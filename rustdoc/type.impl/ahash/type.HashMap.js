(function() {var type_impls = {
"forest_filecoin":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-HasLotusJson-for-HashMap%3CK,+V,+RandomState%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/forest_filecoin/lotus_json/hash_map.rs.html#8-32\">source</a><a href=\"#impl-HasLotusJson-for-HashMap%3CK,+V,+RandomState%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"trait\" href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html\" title=\"trait forest_filecoin::lotus_json::HasLotusJson\">HasLotusJson</a> for <a class=\"type\" href=\"ahash/type.HashMap.html\" title=\"type ahash::HashMap\">HashMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + <a class=\"trait\" href=\"serde/de/trait.DeserializeOwned.html\" title=\"trait serde::de::DeserializeOwned\">DeserializeOwned</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html\" title=\"trait forest_filecoin::lotus_json::HasLotusJson\">HasLotusJson</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.LotusJson\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.LotusJson\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html#associatedtype.LotusJson\" class=\"associatedtype\">LotusJson</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/std/collections/hash/map/struct.HashMap.html\" title=\"struct std::collections::hash::map::HashMap\">HashMap</a>&lt;K, &lt;V as <a class=\"trait\" href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html\" title=\"trait forest_filecoin::lotus_json::HasLotusJson\">HasLotusJson</a>&gt;::<a class=\"associatedtype\" href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html#associatedtype.LotusJson\" title=\"type forest_filecoin::lotus_json::HasLotusJson::LotusJson\">LotusJson</a>, <a class=\"struct\" href=\"ahash/random_state/struct.RandomState.html\" title=\"struct ahash::random_state::RandomState\">RandomState</a>&gt;</h4></section></summary><div class='docblock'>The struct representing JSON. You should <code>#[derive(Deserialize, Serialize)]</code> on it.</div></details><section id=\"method.into_lotus_json\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/forest_filecoin/lotus_json/hash_map.rs.html#20-24\">source</a><a href=\"#method.into_lotus_json\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html#tymethod.into_lotus_json\" class=\"fn\">into_lotus_json</a>(self) -&gt; Self::<a class=\"associatedtype\" href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html#associatedtype.LotusJson\" title=\"type forest_filecoin::lotus_json::HasLotusJson::LotusJson\">LotusJson</a></h4></section><section id=\"method.from_lotus_json\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/forest_filecoin/lotus_json/hash_map.rs.html#26-31\">source</a><a href=\"#method.from_lotus_json\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html#tymethod.from_lotus_json\" class=\"fn\">from_lotus_json</a>(value: Self::<a class=\"associatedtype\" href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html#associatedtype.LotusJson\" title=\"type forest_filecoin::lotus_json::HasLotusJson::LotusJson\">LotusJson</a>) -&gt; Self</h4></section><section id=\"method.into_lotus_json_value\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/forest_filecoin/lotus_json/mod.rs.html#150-152\">source</a><a href=\"#method.into_lotus_json_value\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html#method.into_lotus_json_value\" class=\"fn\">into_lotus_json_value</a>(self) -&gt; <a class=\"type\" href=\"serde_json/error/type.Result.html\" title=\"type serde_json::error::Result\">Result</a>&lt;<a class=\"enum\" href=\"serde_json/value/enum.Value.html\" title=\"enum serde_json::value::Value\">Value</a>&gt;</h4></section><section id=\"method.into_lotus_json_string\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/forest_filecoin/lotus_json/mod.rs.html#153-155\">source</a><a href=\"#method.into_lotus_json_string\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html#method.into_lotus_json_string\" class=\"fn\">into_lotus_json_string</a>(self) -&gt; <a class=\"type\" href=\"serde_json/error/type.Result.html\" title=\"type serde_json::error::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section><section id=\"method.into_lotus_json_string_pretty\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/forest_filecoin/lotus_json/mod.rs.html#156-158\">source</a><a href=\"#method.into_lotus_json_string_pretty\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"forest_filecoin/lotus_json/trait.HasLotusJson.html#method.into_lotus_json_string_pretty\" class=\"fn\">into_lotus_json_string_pretty</a>(self) -&gt; <a class=\"type\" href=\"serde_json/error/type.Result.html\" title=\"type serde_json::error::Result\">Result</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/string/struct.String.html\" title=\"struct alloc::string::String\">String</a>&gt;</h4></section></div></details>","HasLotusJson","forest_filecoin::cli::subcommands::mpool_cmd::StatBucket","forest_filecoin::message_pool::msgpool::selection::Pending","forest_filecoin::networks::actors_bundle::ActorBundleMetadataMap","forest_filecoin::utils::proofs_api::parameters::ParameterMap"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()