(function() {var type_impls = {
"forest_filecoin":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#87\">source</a><a href=\"#impl-Clone-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#87\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/clone.rs.html#169\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;Self</a>)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#741-745\">source</a><a href=\"#impl-Debug-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#747\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.80.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#776-779\">source</a><a href=\"#impl-Default-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#781\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'a%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/serde.rs.html#78-82\">source</a><a href=\"#impl-Deserialize%3C'a%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'a&gt; for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'a&gt; + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'a&gt;,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/serde.rs.html#84-86\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;D&gt;(\n    deserializer: D,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;, &lt;D as <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'a&gt;&gt;::<a class=\"associatedtype\" href=\"serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    D: <a class=\"trait\" href=\"serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'a&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'a>","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(%26K,+%26V)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#876-880\">source</a><a href=\"#impl-Extend%3C(%26K,+%26V)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;'a V</a>)&gt; for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#882\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;'a K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;'a V</a>)&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#453\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(&'a K, &'a V)>","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(%26K,+%26Vec%3CV%3E)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#906-910\">source</a><a href=\"#impl-Extend%3C(%26K,+%26Vec%3CV%3E)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;'a K</a>, &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;)&gt; for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Copy.html\" title=\"trait core::marker::Copy\">Copy</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#912\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;'a K</a>, &amp;'a <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;)&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#453\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(&'a K, &'a Vec<V>)>","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(K,+V)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#864-867\">source</a><a href=\"#impl-Extend%3C(K,+V)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#869\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#453\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(K, V)>","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Extend%3C(K,+Vec%3CV%3E)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#887-890\">source</a><a href=\"#impl-Extend%3C(K,+Vec%3CV%3E)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html\" title=\"trait core::iter::traits::collect::Extend\">Extend</a>&lt;(K, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;)&gt; for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#892\">source</a><a href=\"#method.extend\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\" class=\"fn\">extend</a>&lt;T&gt;(&amp;mut self, iter: T)<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (K, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;)&gt;,</div></h4></section></summary><div class='docblock'>Extends a collection with the contents of an iterator. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#tymethod.extend\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_one\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#453\">source</a><a href=\"#method.extend_one\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_one\" class=\"fn\">extend_one</a>(&amp;mut self, item: A)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Extends a collection with exactly one element.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.extend_reserve\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/1.80.0/src/core/iter/traits/collect.rs.html#461\">source</a><a href=\"#method.extend_reserve\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\" class=\"fn\">extend_reserve</a>(&amp;mut self, additional: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.usize.html\">usize</a>)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">🔬</span><span>This is a nightly-only experimental API. (<code>extend_one</code>)</span></div></span><div class='docblock'>Reserves capacity in a collection for the given number of additional elements. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.Extend.html#method.extend_reserve\">Read more</a></div></details></div></details>","Extend<(K, Vec<V>)>","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+V)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#788-791\">source</a><a href=\"#impl-FromIterator%3C(K,+V)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.tuple.html\">(K, V)</a>&gt; for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#793\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iterable: T) -&gt; <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.tuple.html\">(K, V)</a>&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(K, V)>","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-FromIterator%3C(K,+Vec%3CV%3E)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#806-810\">source</a><a href=\"#impl-FromIterator%3C(K,+Vec%3CV%3E)%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html\" title=\"trait core::iter::traits::collect::FromIterator\">FromIterator</a>&lt;(K, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;)&gt; for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#812\">source</a><a href=\"#method.from_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\" class=\"fn\">from_iter</a>&lt;T&gt;(iterable: T) -&gt; <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    T: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (K, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;)&gt;,</div></h4></section></summary><div class='docblock'>Creates a value from an iterator. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.FromIterator.html#tymethod.from_iter\">Read more</a></div></details></div></details>","FromIterator<(K, Vec<V>)>","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Index%3C%26Q%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#724-728\">source</a><a href=\"#impl-Index%3C%26Q%3E-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'a, K, V, S, Q&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/ops/index/trait.Index.html\" title=\"trait core::ops::index::Index\">Index</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;'a Q</a>&gt; for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Output\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Output\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.0/core/ops/index/trait.Index.html#associatedtype.Output\" class=\"associatedtype\">Output</a> = V</h4></section></summary><div class='docblock'>The returned type after indexing.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.index\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#732\">source</a><a href=\"#method.index\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/ops/index/trait.Index.html#tymethod.index\" class=\"fn\">index</a>(&amp;self, index: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;V</a></h4></section></summary><div class='docblock'>Performs the indexing (<code>container[index]</code>) operation. <a href=\"https://doc.rust-lang.org/1.80.0/core/ops/index/trait.Index.html#tymethod.index\">Read more</a></div></details></div></details>","Index<&'a Q>","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-IntoIterator-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#851-854\">source</a><a href=\"#impl-IntoIterator-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a> for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle\" open><summary><section id=\"associatedtype.Item\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.Item\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.Item\" class=\"associatedtype\">Item</a> = (K, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;)</h4></section></summary><div class='docblock'>The type of the elements being iterated over.</div></details><details class=\"toggle\" open><summary><section id=\"associatedtype.IntoIter\" class=\"associatedtype trait-impl\"><a href=\"#associatedtype.IntoIter\" class=\"anchor\">§</a><h4 class=\"code-header\">type <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#associatedtype.IntoIter\" class=\"associatedtype\">IntoIter</a> = <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/std/collections/hash/map/struct.IntoIter.html\" title=\"struct std::collections::hash::map::IntoIter\">IntoIter</a>&lt;K, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;&gt;</h4></section></summary><div class='docblock'>Which kind of iterator are we turning this into?</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_iter\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#859\">source</a><a href=\"#method.into_iter\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\" class=\"fn\">into_iter</a>(self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/std/collections/hash/map/struct.IntoIter.html\" title=\"struct std::collections::hash::map::IntoIter\">IntoIter</a>&lt;K, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;&gt;</h4></section></summary><div class='docblock'>Creates an iterator from a value. <a href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html#tymethod.into_iter\">Read more</a></div></details></div></details>","IntoIterator","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiMap%3CK,+V%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#92-94\">source</a><a href=\"#impl-MultiMap%3CK,+V%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V&gt; <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#105\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.new\" class=\"fn\">new</a>() -&gt; <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty MultiMap</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: MultiMap&lt;<span class=\"kw-2\">&amp;</span>str, isize&gt; = MultiMap::new();</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#120\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.with_capacity\" class=\"fn\">with_capacity</a>(capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.usize.html\">usize</a>) -&gt; <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty multimap with the given initial capacity.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: MultiMap&lt;<span class=\"kw-2\">&amp;</span>str, isize&gt; = MultiMap::with_capacity(<span class=\"number\">20</span>);</code></pre></div>\n</div></details></div></details>",0,"forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#127-130\">source</a><a href=\"#impl-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_hasher\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#143\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.with_hasher\" class=\"fn\">with_hasher</a>(hash_builder: S) -&gt; <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty MultiMap which will use the given hash builder to hash keys.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n<span class=\"kw\">use </span>std::collections::hash_map::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: MultiMap&lt;<span class=\"kw-2\">&amp;</span>str, isize&gt; = MultiMap::with_hasher(s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.with_capacity_and_hasher\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#160\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.with_capacity_and_hasher\" class=\"fn\">with_capacity_and_hasher</a>(\n    capacity: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.usize.html\">usize</a>,\n    hash_builder: S,\n) -&gt; <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;</h4></section></summary><div class=\"docblock\"><p>Creates an empty MultiMap with the given intial capacity and hash builder.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n<span class=\"kw\">use </span>std::collections::hash_map::RandomState;\n\n<span class=\"kw\">let </span>s = RandomState::new();\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map: MultiMap&lt;<span class=\"kw-2\">&amp;</span>str, isize&gt; = MultiMap::with_capacity_and_hasher(<span class=\"number\">20</span>, s);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#178\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.insert\" class=\"fn\">insert</a>(&amp;mut self, k: K, v: V)</h4></section></summary><div class=\"docblock\"><p>Inserts a key-value pair into the multimap. If the key does exist in\nthe map then the value is pushed to that key’s vector. If the key doesn’t\nexist in the map a new vector with the given value is inserted.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"string\">\"key\"</span>, <span class=\"number\">42</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_many\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#203\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.insert_many\" class=\"fn\">insert_many</a>&lt;I&gt;(&amp;mut self, k: K, v: I)<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = V&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Inserts multiple key-value pairs into the multimap. If the key does exist in\nthe map then the values are extended into that key’s vector. If the key\ndoesn’t exist in the map a new vector collected from the given values is inserted.</p>\n<p>This may be more efficient than inserting values independently.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::&lt;<span class=\"kw-2\">&amp;</span>str, <span class=\"kw-2\">&amp;</span>usize&gt;::new();\nmap.insert_many(<span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">42</span>, <span class=\"number\">43</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.insert_many_from_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#228-230\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.insert_many_from_slice\" class=\"fn\">insert_many_from_slice</a>(&amp;mut self, k: K, v: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.slice.html\">[V]</a>)<div class=\"where\">where\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h4></section></summary><div class=\"docblock\"><p>Inserts multiple key-value pairs into the multimap. If the key does exist in\nthe map then the values are extended into that key’s vector. If the key\ndoesn’t exist in the map a new vector collected from the given values is inserted.</p>\n<p>This may be more efficient than inserting values independently.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::&lt;<span class=\"kw-2\">&amp;</span>str, usize&gt;::new();\nmap.insert_many_from_slice(<span class=\"string\">\"key\"</span>, <span class=\"kw-2\">&amp;</span>[<span class=\"number\">42</span>, <span class=\"number\">43</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.contains_key\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#257-260\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.contains_key\" class=\"fn\">contains_key</a>&lt;Q&gt;(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns true if the map contains a value for the specified key.</p>\n<p>The key may be any borrowed form of the map’s key type, but Hash and Eq\non the borrowed form must match those for the key type.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">42</span>);\n<span class=\"macro\">assert_eq!</span>(map.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);\n<span class=\"macro\">assert_eq!</span>(map.contains_key(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#277\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements in the map.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">2</span>, <span class=\"number\">1337</span>);\n<span class=\"macro\">assert_eq!</span>(map.len(), <span class=\"number\">2</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#298-301\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.remove\" class=\"fn\">remove</a>&lt;Q&gt;(&amp;mut self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Removes a key from the map, returning the vector of values at\nthe key if the key was previously in the map.</p>\n<p>The key may be any borrowed form of the map’s key type, but Hash and Eq\non the borrowed form must match those for the key type.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">1337</span>);\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"macro\">vec!</span>[<span class=\"number\">42</span>, <span class=\"number\">1337</span>]));\n<span class=\"macro\">assert_eq!</span>(map.remove(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">None</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#322-325\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.get\" class=\"fn\">get</a>&lt;Q&gt;(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;V</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the first item in the vector corresponding to\nthe key.</p>\n<p>The key may be any borrowed form of the map’s key type, but Hash and Eq\non the borrowed form must match those for the key type.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">1337</span>);\n<span class=\"macro\">assert_eq!</span>(map.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#349-352\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.get_mut\" class=\"fn\">get_mut</a>&lt;Q&gt;(&amp;mut self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;mut V</a>&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the first item in the vector corresponding to\nthe key.</p>\n<p>The key may be any borrowed form of the map’s key type, but Hash and Eq\non the borrowed form must match those for the key type.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">1337</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(v) = map.get_mut(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>) {\n    <span class=\"kw-2\">*</span>v = <span class=\"number\">99</span>;\n}\n<span class=\"macro\">assert_eq!</span>(map[<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>], <span class=\"number\">99</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#372-375\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.get_vec\" class=\"fn\">get_vec</a>&lt;Q&gt;(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a reference to the vector corresponding to the key.</p>\n<p>The key may be any borrowed form of the map’s key type, but Hash and Eq\non the borrowed form must match those for the key type.</p>\n<h5 id=\"examples-10\"><a class=\"doc-anchor\" href=\"#examples-10\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">1337</span>);\n<span class=\"macro\">assert_eq!</span>(map.get_vec(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[<span class=\"number\">42</span>, <span class=\"number\">1337</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_vec_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#399-402\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.get_vec_mut\" class=\"fn\">get_vec_mut</a>&lt;Q&gt;(&amp;mut self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the vector corresponding to the key.</p>\n<p>The key may be any borrowed form of the map’s key type, but Hash and Eq\non the borrowed form must match those for the key type.</p>\n<h5 id=\"examples-11\"><a class=\"doc-anchor\" href=\"#examples-11\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">1337</span>);\n<span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(v) = map.get_vec_mut(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>) {\n    (<span class=\"kw-2\">*</span>v)[<span class=\"number\">0</span>] = <span class=\"number\">1991</span>;\n    (<span class=\"kw-2\">*</span>v)[<span class=\"number\">1</span>] = <span class=\"number\">2332</span>;\n}\n<span class=\"macro\">assert_eq!</span>(map.get_vec(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[<span class=\"number\">1991</span>, <span class=\"number\">2332</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_vec\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#426-429\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.is_vec\" class=\"fn\">is_vec</a>&lt;Q&gt;(&amp;self, k: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;Q</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.bool.html\">bool</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/borrow/trait.Borrow.html\" title=\"trait core::borrow::Borrow\">Borrow</a>&lt;Q&gt;,\n    Q: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> + ?<a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class=\"docblock\"><p>Returns true if the key is multi-valued.</p>\n<p>The key may be any borrowed form of the map’s key type, but Hash and Eq\non the borrowed form must match those for the key type.</p>\n<h5 id=\"examples-12\"><a class=\"doc-anchor\" href=\"#examples-12\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>, <span class=\"number\">1337</span>);\nmap.insert(<span class=\"number\">2</span>, <span class=\"number\">2332</span>);\n\n<span class=\"macro\">assert_eq!</span>(map.is_vec(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"bool-val\">true</span>);   <span class=\"comment\">// key is multi-valued\n</span><span class=\"macro\">assert_eq!</span>(map.is_vec(<span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>), <span class=\"bool-val\">false</span>);  <span class=\"comment\">// key is single-valued\n</span><span class=\"macro\">assert_eq!</span>(map.is_vec(<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>), <span class=\"bool-val\">false</span>);  <span class=\"comment\">// key not in map</span></code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.capacity\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#447\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.capacity\" class=\"fn\">capacity</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of elements the map can hold without reallocating.</p>\n<h5 id=\"examples-13\"><a class=\"doc-anchor\" href=\"#examples-13\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span>map: MultiMap&lt;usize, usize&gt; = MultiMap::new();\n<span class=\"macro\">assert!</span>(map.capacity() &gt;= <span class=\"number\">0</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#463\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if the map contains no elements.</p>\n<h5 id=\"examples-14\"><a class=\"doc-anchor\" href=\"#examples-14\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\n<span class=\"macro\">assert!</span>(map.is_empty());\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">42</span>);\n<span class=\"macro\">assert!</span>(!map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#480\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.clear\" class=\"fn\">clear</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Clears the map, removing all key-value pairs.\nKeeps the allocated memory for reuse.</p>\n<h5 id=\"examples-15\"><a class=\"doc-anchor\" href=\"#examples-15\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">42</span>);\nmap.clear();\n<span class=\"macro\">assert!</span>(map.is_empty());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.keys\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#502\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.keys\" class=\"fn\">keys</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/std/collections/hash/map/struct.Keys.html\" title=\"struct std::collections::hash::map::Keys\">Keys</a>&lt;'_, K, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all keys in arbitrary order.\nIterator element type is &amp;’a K.</p>\n<h5 id=\"examples-16\"><a class=\"doc-anchor\" href=\"#examples-16\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">1337</span>);\nmap.insert(<span class=\"number\">2</span>,<span class=\"number\">1337</span>);\nmap.insert(<span class=\"number\">4</span>,<span class=\"number\">1991</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>keys: Vec&lt;<span class=\"kw\">_</span>&gt; = map.keys().collect();\nkeys.sort();\n<span class=\"macro\">assert_eq!</span>(keys, [<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">2</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#525\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"multimap/struct.Iter.html\" title=\"struct multimap::Iter\">Iter</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order. The iterator returns\na reference to the key and the first element in the corresponding key’s vector.\nIterator element type is (&amp;’a K, &amp;’a V).</p>\n<h5 id=\"examples-17\"><a class=\"doc-anchor\" href=\"#examples-17\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">1337</span>);\nmap.insert(<span class=\"number\">3</span>,<span class=\"number\">2332</span>);\nmap.insert(<span class=\"number\">4</span>,<span class=\"number\">1991</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pairs: Vec&lt;<span class=\"kw\">_</span>&gt; = map.iter().collect();\npairs.sort_by_key(|p| p.<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(pairs, [(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>), (<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">2332</span>), (<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>, <span class=\"kw-2\">&amp;</span><span class=\"number\">1991</span>)]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#554\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"multimap/struct.IterMut.html\" title=\"struct multimap::IterMut\">IterMut</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order. The iterator returns\na reference to the key and a mutable reference to the first element in the\ncorresponding key’s vector. Iterator element type is (&amp;’a K, &amp;’a mut V).</p>\n<h5 id=\"examples-18\"><a class=\"doc-anchor\" href=\"#examples-18\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">1337</span>);\nmap.insert(<span class=\"number\">3</span>,<span class=\"number\">2332</span>);\nmap.insert(<span class=\"number\">4</span>,<span class=\"number\">1991</span>);\n\n<span class=\"kw\">for </span>(<span class=\"kw\">_</span>, value) <span class=\"kw\">in </span>map.iter_mut() {\n    <span class=\"kw-2\">*</span>value <span class=\"kw-2\">*</span>= <span class=\"kw-2\">*</span>value;\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pairs: Vec&lt;<span class=\"kw\">_</span>&gt; = map.iter_mut().collect();\npairs.sort_by_key(|p| p.<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(pairs, [(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"number\">1764</span>), (<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"number\">5438224</span>), (<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"number\">3964081</span>)]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_all\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#579\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.iter_all\" class=\"fn\">iter_all</a>(&amp;self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/std/collections/hash/map/struct.Iter.html\" title=\"struct std::collections::hash::map::Iter\">Iter</a>&lt;'_, K, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order. The iterator returns\na reference to the key and the corresponding key’s vector.\nIterator element type is (&amp;’a K, &amp;’a V).</p>\n<h5 id=\"examples-19\"><a class=\"doc-anchor\" href=\"#examples-19\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">1337</span>);\nmap.insert(<span class=\"number\">3</span>,<span class=\"number\">2332</span>);\nmap.insert(<span class=\"number\">4</span>,<span class=\"number\">1991</span>);\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pairs: Vec&lt;<span class=\"kw\">_</span>&gt; = map.iter_all().collect();\npairs.sort_by_key(|p| p.<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(pairs, [(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[<span class=\"number\">42</span>, <span class=\"number\">1337</span>]), (<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[<span class=\"number\">2332</span>]), (<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>, <span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[<span class=\"number\">1991</span>])]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_all_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#608\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.iter_all_mut\" class=\"fn\">iter_all_mut</a>(&amp;mut self) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/std/collections/hash/map/struct.IterMut.html\" title=\"struct std::collections::hash::map::IterMut\">IterMut</a>&lt;'_, K, <a class=\"struct\" href=\"https://doc.rust-lang.org/1.80.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;V&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order. The iterator returns\na reference to the key and the corresponding key’s vector.\nIterator element type is (&amp;’a K, &amp;’a V).</p>\n<h5 id=\"examples-20\"><a class=\"doc-anchor\" href=\"#examples-20\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">1337</span>);\nmap.insert(<span class=\"number\">3</span>,<span class=\"number\">2332</span>);\nmap.insert(<span class=\"number\">4</span>,<span class=\"number\">1991</span>);\n\n<span class=\"kw\">for </span>(key, values) <span class=\"kw\">in </span>map.iter_all_mut() {\n    <span class=\"kw\">for </span>value <span class=\"kw\">in </span>values.iter_mut() {\n        <span class=\"kw-2\">*</span>value = <span class=\"number\">99</span>;\n    }\n}\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>pairs: Vec&lt;<span class=\"kw\">_</span>&gt; = map.iter_all_mut().collect();\npairs.sort_by_key(|p| p.<span class=\"number\">0</span>);\n<span class=\"macro\">assert_eq!</span>(pairs, [(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"macro\">vec!</span>[<span class=\"number\">99</span>, <span class=\"number\">99</span>]), (<span class=\"kw-2\">&amp;</span><span class=\"number\">3</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"macro\">vec!</span>[<span class=\"number\">99</span>]), (<span class=\"kw-2\">&amp;</span><span class=\"number\">4</span>, <span class=\"kw-2\">&amp;mut </span><span class=\"macro\">vec!</span>[<span class=\"number\">99</span>])]);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#631\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.flat_iter\" class=\"fn\">flat_iter</a>(&amp;self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;V</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order. The iterator returns\na reference to the key and the first element in the corresponding key’s vector.\nIterator element type is (&amp;’a K, &amp;’a V).</p>\n<h5 id=\"examples-21\"><a class=\"doc-anchor\" href=\"#examples-21\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">1337</span>);\nmap.insert(<span class=\"number\">3</span>,<span class=\"number\">2332</span>);\nmap.insert(<span class=\"number\">4</span>,<span class=\"number\">1991</span>);\n\n<span class=\"kw\">for </span>(key, value) <span class=\"kw\">in </span>map.flat_iter() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"key: {:?}, val: {:?}\"</span>, key, value);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.flat_iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#655\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.flat_iter_mut\" class=\"fn\">flat_iter_mut</a>(&amp;mut self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = (<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;mut V</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>An iterator visiting all key-value pairs in arbitrary order. The iterator returns\na reference to the key and the first element in the corresponding key’s vector.\nIterator element type is (&amp;’a K, &amp;’a V).</p>\n<h5 id=\"examples-22\"><a class=\"doc-anchor\" href=\"#examples-22\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>map = MultiMap::new();\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">42</span>);\nmap.insert(<span class=\"number\">1</span>,<span class=\"number\">1337</span>);\nmap.insert(<span class=\"number\">3</span>,<span class=\"number\">2332</span>);\nmap.insert(<span class=\"number\">4</span>,<span class=\"number\">1991</span>);\n\n<span class=\"kw\">for </span>(key, value) <span class=\"kw\">in </span>map.flat_iter_mut() {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"key: {:?}, val: {:?}\"</span>, key, value);\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entry\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#688\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.entry\" class=\"fn\">entry</a>(&amp;mut self, k: K) -&gt; <a class=\"enum\" href=\"multimap/entry/enum.Entry.html\" title=\"enum multimap::entry::Entry\">Entry</a>&lt;'_, K, V&gt;</h4></section></summary><div class=\"docblock\"><p>Gets the specified key’s corresponding entry in the map for in-place manipulation.\nIt’s possible to both manipulate the vector and the ‘value’ (the first value in the\nvector).</p>\n<h5 id=\"examples-23\"><a class=\"doc-anchor\" href=\"#examples-23\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = MultiMap::new();\nm.insert(<span class=\"number\">1</span>, <span class=\"number\">42</span>);\n\n{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = m.entry(<span class=\"number\">1</span>).or_insert(<span class=\"number\">43</span>);\n    <span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>);\n    <span class=\"kw-2\">*</span>v = <span class=\"number\">44</span>;\n}\n<span class=\"macro\">assert_eq!</span>(m.entry(<span class=\"number\">2</span>).or_insert(<span class=\"number\">666</span>), <span class=\"kw-2\">&amp;</span><span class=\"number\">666</span>);\n\n{\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>v = m.entry(<span class=\"number\">1</span>).or_insert_vec(<span class=\"macro\">vec!</span>[<span class=\"number\">43</span>]);\n    <span class=\"macro\">assert_eq!</span>(v, <span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[<span class=\"number\">44</span>]);\n    v.push(<span class=\"number\">50</span>);\n}\n<span class=\"macro\">assert_eq!</span>(m.entry(<span class=\"number\">2</span>).or_insert_vec(<span class=\"macro\">vec!</span>[<span class=\"number\">667</span>]), <span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[<span class=\"number\">666</span>]);\n\n<span class=\"macro\">assert_eq!</span>(m.get_vec(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>), <span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"macro\">vec!</span>[<span class=\"number\">44</span>, <span class=\"number\">50</span>]));</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.retain\" class=\"method\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#713-715\">source</a><h4 class=\"code-header\">pub fn <a href=\"multimap/struct.MultiMap.html#tymethod.retain\" class=\"fn\">retain</a>&lt;F&gt;(&amp;mut self, f: F)<div class=\"where\">where\n    F: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/ops/function/trait.FnMut.html\" title=\"trait core::ops::function::FnMut\">FnMut</a>(<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;K</a>, <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;V</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.bool.html\">bool</a>,</div></h4></section></summary><div class=\"docblock\"><p>Retains only the elements specified by the predicate.</p>\n<p>In other words, remove all pairs <code>(k, v)</code> such that <code>f(&amp;k,&amp;mut v)</code> returns <code>false</code>.</p>\n<h5 id=\"examples-24\"><a class=\"doc-anchor\" href=\"#examples-24\">§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>multimap::MultiMap;\n\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>m = MultiMap::new();\nm.insert(<span class=\"number\">1</span>, <span class=\"number\">42</span>);\nm.insert(<span class=\"number\">1</span>, <span class=\"number\">99</span>);\nm.insert(<span class=\"number\">2</span>, <span class=\"number\">42</span>);\nm.retain(|<span class=\"kw-2\">&amp;</span>k, <span class=\"kw-2\">&amp;</span>v| { k == <span class=\"number\">1 </span>&amp;&amp; v == <span class=\"number\">42 </span>});\n<span class=\"macro\">assert_eq!</span>(<span class=\"number\">1</span>, m.len());\n<span class=\"macro\">assert_eq!</span>(<span class=\"prelude-val\">Some</span>(<span class=\"kw-2\">&amp;</span><span class=\"number\">42</span>), m.get(<span class=\"kw-2\">&amp;</span><span class=\"number\">1</span>));</code></pre></div>\n</div></details></div></details>",0,"forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#752-756\">source</a><a href=\"#impl-PartialEq-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#758\">source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;<a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>self</code> and <code>other</code> values to be equal, and is used\nby <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.80.0/src/core/cmp.rs.html#263\">source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.80.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>This method tests for <code>!=</code>. The default implementation is almost always\nsufficient, and should not be overridden without very good reason.</div></details></div></details>","PartialEq","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-MultiMap%3CK,+V,+BS%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/serde.rs.html#22-26\">source</a><a href=\"#impl-Serialize-for-MultiMap%3CK,+V,+BS%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, BS&gt; <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, BS&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    BS: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/multimap/serde.rs.html#28-30\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;S&gt;(\n    &amp;self,\n    serializer: S,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.80.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, &lt;S as <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>&gt;::<a class=\"associatedtype\" href=\"serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    S: <a class=\"trait\" href=\"serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","forest_filecoin::db::migration::migration_map::MigrationsMap"],["<section id=\"impl-Eq-for-MultiMap%3CK,+V,+S%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/multimap/lib.rs.html#768-772\">source</a><a href=\"#impl-Eq-for-MultiMap%3CK,+V,+S%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, V, S&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"struct\" href=\"multimap/struct.MultiMap.html\" title=\"struct multimap::MultiMap\">MultiMap</a>&lt;K, V, S&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a>,\n    V: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a>,\n    S: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.80.0/core/hash/trait.BuildHasher.html\" title=\"trait core::hash::BuildHasher\">BuildHasher</a>,</div></h3></section>","Eq","forest_filecoin::db::migration::migration_map::MigrationsMap"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()