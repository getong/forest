searchState.loadedDescShard("nunny", 0, "The definitive non-empty slice/array/vec library for Rust.\nA non-empty array of known size.\nError returned in <code>TryFrom</code> implementations for reference …\nA wrapper struct around non-empty slices/arrays/vectors.\nA non-empty, dynamically sized slice.\nError returned in <code>TryFrom</code> implementations for reference …\nA non-empty, heap allocated Vec.\nSee <code>append</code>.\nSee <code>append</code>.\nCreate a non-empty array\nReturns a <code>primitive array</code>.\nReturns a <code>primitive array</code>.\nReturns a <code>primitive array</code>.\nReturns a <code>primitive array</code>.\nReturns a <code>primitive slice</code>.\nReturns a <code>primitive slice</code>.\nReturns a <code>NonEmpty</code> slice.\nReturns a <code>NonEmpty</code> slice.\nReturns a <code>NonEmpty</code> slice.\nReturns a <code>NonEmpty</code> slice.\nReturns a <code>std::vec::Vec</code>.\nReturns a <code>std::vec::Vec</code>.\nReturns a <code>primitive slice</code>.\nReturns a <code>primitive slice</code>.\nReturns a <code>NonEmpty</code> slice.\nReturns a <code>NonEmpty</code> slice.\nReturns a <code>NonEmpty</code> slice.\nReturns a <code>NonEmpty</code> slice.\nReturns a <code>std::vec::Vec</code>.\nReturns a <code>std::vec::Vec</code>.\nReturns the known non-zero length.\nReturns the known non-zero length.\n<code>NonEmpty</code> version of <code>Iterator::chain</code>.\n<code>NonEmpty</code> version of <code>Iterator::cloned</code>.\nCollect this iterator into a <code>NonEmpty&lt;Vec&gt;</code>.\n<code>NonEmpty</code> version of <code>Iterator::copied</code>.\n<code>NonEmpty</code> version of <code>Iterator::cycle</code>.\nSee <code>dedup_by</code>.\nSee <code>dedup_by</code>.\nSee <code>dedup_by_key</code>.\nSee <code>dedup_by_key</code>.\nReturns a <code>NonEmpty</code> array of the same size as self, with …\nReturns a <code>NonEmpty</code> array of the same size as self, with …\nBorrows each element mutably and returns a <code>NonEmpty</code> array …\nBorrows each element mutably and returns a <code>NonEmpty</code> array …\nBorrows each element and returns a <code>NonEmpty</code> array of …\nBorrows each element and returns a <code>NonEmpty</code> array of …\n<code>NonEmpty</code> version of <code>Iterator::enumerate</code>.\nCreate a <code>NonEmpty</code> heap-allocated vec with <code>len</code> items, …\nCreate a <code>NonEmpty</code> heap-allocated vec with <code>len</code> items, …\nCreate a <code>NonEmpty</code> heap-allocated vec with <code>len</code> items, …\nCreate a <code>NonEmpty</code> heap-allocated vec with <code>len</code> items, …\nReturns the first element, guaranteed.\nReturns the first element, guaranteed.\n<code>NonEmpty</code> version of <code>Iterator::next</code>.\nReturns the first element, guaranteed.\nReturns the first element, guaranteed.\n<code>NonEmpty</code> version of <code>Iterator::flatten</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>NonEmpty</code> version of <code>Iterator::fuse</code>.\nSee <code>insert</code>.\nSee <code>insert</code>.\n<code>NonEmpty</code> version of <code>Iterator::inspect</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>primitive array</code>.\nReturns a <code>primitive array</code>.\nReturn a <code>NonEmpty</code> boxed slice.\nReturn a <code>NonEmpty</code> boxed slice.\nReturns a <code>std::vec::Vec</code>.\nReturns a <code>std::vec::Vec</code>.\nReturns the last element, guaranteed.\nReturns the last element, guaranteed.\n<code>NonEmpty</code> version of <code>Iterator::last</code>.\nReturns the last element, guaranteed.\nReturns the last element, guaranteed.\nReturns a <code>NonEmpty</code> slice.\nReturns a <code>NonEmpty</code> slice.\nReturns the known non-zero length.\nReturns the known non-zero length.\n<code>NonEmpty</code> version of <code>Iterator::map</code>.\n<code>NonEmpty</code> version of <code>Iterator::max</code>.\n<code>NonEmpty</code> version of <code>Iterator::max_by</code>.\n<code>NonEmpty</code> version of <code>Iterator::max_by_key</code>.\n<code>NonEmpty</code> version of <code>Iterator::min</code>.\n<code>NonEmpty</code> version of <code>Iterator::min_by</code>.\n<code>NonEmpty</code> version of <code>Iterator::min_by_key</code>.\nReturns a <code>NonEmpty</code> array.\nCreate a new <code>NonEmpty</code> slice\nCreate a new <code>NonEmpty</code> heap-allocated vec, returning the …\nCreate a new <code>NonEmpty</code> heap-allocated vec, returning the …\nCreate a new <code>NonEmpty</code> slice\nReturns a <code>NonEmpty</code> array.\nReturns a <code>NonEmpty</code> array.\nCreate a new <code>NonEmpty</code> slice\nCreate a new <code>NonEmpty</code> heap-allocated vec\nCreate a new <code>NonEmpty</code> slice\nReturns a <code>NonEmpty</code> array.\nCreate a new <code>NonEmpty</code> heap-allocated vec\nCreate a <code>NonEmpty</code> array.\nCreate a new <code>NonEmpty</code> slice\nCreate a new <code>NonEmpty</code> heap-allocated vec\nCreate a new <code>NonEmpty</code> heap-allocated vec\nCreate a <code>NonEmpty</code> array.\nCreate a new <code>NonEmpty</code> slice\nReturns a <code>NonEmpty</code> array.\nCreate a new <code>NonEmpty</code> heap-allocated vec\nCreate a new <code>NonEmpty</code> heap-allocated vec\nReturns a <code>NonEmpty</code> array.\nCreate a <code>NonEmpty</code> array.\nCreate a new <code>NonEmpty</code> heap-allocated vec\nCreate a new <code>NonEmpty</code> heap-allocated vec\nCreate a <code>NonEmpty</code> array.\nCreate a <code>NonEmpty</code> array.\nCreate a new <code>NonEmpty</code> slice\nCreate a new <code>NonEmpty</code> heap-allocated vec\nCreate a new <code>NonEmpty</code> slice\nCreate a new <code>NonEmpty</code> heap-allocated vec\nCreate a <code>NonEmpty</code> array.\nCreate a <code>NonEmpty</code> array of a single element\nCreate a <code>NonEmpty</code> slice of a single element\nCreate a <code>NonEmpty</code> heap-allocated vec, of a single element.\nCreate a <code>NonEmpty</code> slice of a single element\nCreate a <code>NonEmpty</code> heap-allocated vec, of a single element.\nCreate a <code>NonEmpty</code> array of a single element\nCreating a <code>NonEmpty</code> heap-allocated vec where the first …\nCreating a <code>NonEmpty</code> heap-allocated vec where the first …\nCreate a <code>NonEmpty</code> array of a single mutable reference\nCreate a <code>NonEmpty</code> slice of a single element\nCreate a <code>NonEmpty</code> slice of a single element\nCreate a <code>NonEmpty</code> array of a single mutable reference\nCreate a <code>NonEmpty</code> array of a single reference\nCreate a <code>NonEmpty</code> array of a single reference\nCreate a <code>NonEmpty</code> heap-allocated vec, of a single element, …\nCreate a <code>NonEmpty</code> heap-allocated vec, of a single element, …\nPeek this <code>NonEmpty</code> iterator, without advancing it.\nPeek and modify this <code>NonEmpty</code> iterator, without advancing …\n<code>NonEmpty</code> version of <code>Iterator::peekable</code>, allowing you to use\nSee <code>push</code>.\nSee <code>push</code>.\n<code>NonEmpty</code> version of <code>Iterator::reduce</code>.\nRemove the <code>NonEmpty</code> wrapper, allowing you to access normal …\nSee <code>reserve</code>.\nSee <code>reserve</code>.\nSee <code>reserve_exact</code>.\nSee <code>reserve_exact</code>.\nSee <code>resize_with</code>.\nSee <code>resize_with</code>.\n<code>NonEmpty</code> version of <code>Iterator::rev</code>.\nSafety\nSafety\nSee <code>shrink_to</code>.\nSee <code>shrink_to</code>.\nSee <code>shrink_to_fit</code>.\nSee <code>shrink_to_fit</code>.\nCreate a non-empty slice\nSee <code>spare_capacity_mut</code>.\nSee <code>spare_capacity_mut</code>.\nReturns the first element, guaranteed, and the rest of the …\nReturns the first element, guaranteed, and the rest of the …\nReturns the first element, guaranteed, and the rest of the …\nReturns the first element, guaranteed, and the rest of the …\nReturns the last element, guaranteed, and the rest of the …\nReturns the last element, guaranteed, and the rest of the …\nReturns the last element, guaranteed, and the rest of the …\nReturns the last element, guaranteed, and the rest of the …\n<code>NonEmpty</code> version of <code>Iterator::take</code>.\nShortens the vector to a guaranteed-nonzero length\nShortens the vector to a guaranteed-nonzero length\nCollect <code>Ok</code> items into a <code>NonEmpty&lt;Vec&gt;</code>, short-circuiting on …\nSee <code>try_reserve</code>.\nSee <code>try_reserve</code>.\nSee <code>try_reserve_exact</code>.\nSee <code>try_reserve_exact</code>.\n<code>NonEmpty</code> version of <code>Iterator::unzip</code>.\nCreate a non-empty heap-allocated vector")