searchState.loadedDescShard("tabled", 0, "An easy to use library for pretty print tables of Rust …\nA length of fields and headers, which must be the same.\nTabled a trait responsible for providing a header fields …\nA derive macro to implement a <code>Tabled</code> trait.\nBuilder module provides a <code>Builder</code> type which helps building\nCreates a <code>Table</code> with <code>Display</code> arguments nested within.\nFields method must return a list of cells.\nModule is responsible for tables underlyign grid.\nHeaders must return a list of column names.\nThis module contains macro functions for dynamic <code>Table</code> …\nCreates a <code>Table</code> with <code>Display</code> arguments nested within.\nModule contains various table configuration settings.\nModule contains a list of table representatives.\nBuilder creates a <code>Table</code> from dynamic data set.\n<code>IndexBuilder</code> helps to add an index to the table.\nBuilds a table.\nBuild creates a <code>Table</code> instance.\nClean removes empty columns and rows.\nRemove all records.\nSets a index to the chosen column.\nReturns an amount of columns which would be present in a …\nReturns an amount of rows which would be present in a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>Builder</code> instance.\nNo flag makes builder to not use an index.\nAdd an index to the <code>Table</code>.\nInsert a column with a specific position.\nInsert a row into a specific position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet an index name.\nCreates a <code>Builder</code> instance.\nPush a column.\nAdds a row to a <code>Table</code>.\nRemoves a column with a specific position.\nRemoves a row with a specific position.\nSets a content of cells which are created in case rows has …\nTranspose index and columns.\nCreates a <code>Builder</code> instance with a given row capacity.\nGrid provides a set of methods for building a text-based …\nGrid provides a set of methods for building a text-based …\nGrid provides a set of methods for building a text-based …\nA module which contains <code>ANSIFmt</code> trait and its …\nBuilds a table.\nBuilds a table.\nBuilds a table.\nA module which contains Colors trait and its blanket …\nModule contains a list of configs for varios tables/grids.\nModule contains a list of implementations of <code>Estimate</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe new method creates a grid instance with default styles.\nThe new method creates a grid instance with default styles.\nThe new method creates a grid instance with default styles.\nThe module contains <code>Records</code>, <code>ExactRecords</code>, <code>RecordsMut</code>, …\nBuilds a table into string.\nBuilds a table into string.\nBuilds a table into string.\nA module contains utility functions which grid relay on.\nSets colors map.\nThe structure represents a ANSI color by suffix and prefix.\nA trait which prints an ANSI prefix and suffix.\nThe structure represents a ANSI color by suffix and prefix.\nGets a reference as a color.\nConstructs a new instance with suffix and prefix set to …\nPrint ANSI prefix.\nPrint ANSI suffix.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a reference to a prefix.\nGets a reference to a prefix.\nGets a reference to a suffix.\nGets a reference to a suffix.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks whether the color is not actually set.\nVerifies if anything was actually set.\nConstructs a new instance with suffix and prefix.\nConstructs a new instance with suffix and prefix.\nColor implementation.\nA trait which represents map of colors.\nA color which is actually has not value.\nThe structure represents empty <code>Colors</code> map.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a color for a given position.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerifies whether a map is empty or not.\n<code>AlignmentHorizontal</code> represents an horizontal alignment of …\n<code>AlignmentVertical</code> represents an vertical alignment of a …\nAn offset from the start.\nBorder is a representation of a cells’s borders (left, …\nBorders represents a Table frame with horizontal and …\nAlign to the bottom.\nA particular cell (row, column) on the grid.\nAlign to the center.\nAlign to the center.\nA colors structure for <code>ColoredConfig</code>.\nA spanned configuration plus colors for cells.\nAll cells in a column on the grid.\nThis structure represents a settings of a grid.\nA <code>CompactConfig</code> based configuration plus vertical …\nAn offset from the end.\nEntity a structure which represent a set of cells.\nAn iterator over cells.\nA structure to keep information for <code>Entity</code> as a key.\nFormatting represent a logic of formatting of a cell.\nAll cells on the grid.\nA structure for a custom horizontal line.\nIndent represent a filled space.\nAlign on the left.\nThe structure represents an offset in a text.\nPosition is a (row, col) position on a Grid.\nAlign on the right.\nAll cells in a row on the grid.\nA structure which represents 4 box sides.\nThis structure represents a settings of a grid.\nAlign to the top.\nA structure for a vertical line.\nAn setting to allow alignment per line.\nA character for a bottom.\nA bottom horizontal on the frame.\nBottom side.\nRight intersection character.\nA bottom horizontal intersection on the frame.\nA bottom left on the frame.\nA bottom right on the frame.\nCopies the underlying reference to a new border.\nConvert all values on the border into another ones.\nConverts borders type into another one.\nCreates a new object.\nCopies the underlying reference to a new border.\nCalculates an amount of horizontal lines would present on …\nCalculates an amount of vertical lines would present on …\nThis function constructs a cell borders with all sides …\nReturns empty borders.\nCreates a new line.\nCreates a new line.\nA fill character.\nThis function constructs a cell borders with all sides’s …\nReturns Borders filled in with a supplied value.\nCreates a new line.\nCreates a new object.\nCreates a new line.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new <code>CompactMultilineConfig</code>.\nThis function constructs a cell borders with all sides set.\nCreates a new line.\nCreates a new line.\nGet a value for an <code>Entity</code>.\nGet a alignment horizontal.\nGet a horizontal alignment for a given Entity.\nGet a alignment horizontal.\nGet a vertical alignment for a given Entity.\nGet a alignment horizontal.\nReturns a border of a cell.\nReturns a border color of a cell.\nGets a color of all borders on the grid.\nGets a global border value if set.\nReturns a current <code>Borders</code> structure.\nReturns a current <code>Borders</code> structure.\nReturns a current <code>Borders</code> structure.\nReturns a current <code>Borders</code> structure.\nReturns a current <code>Borders</code> structure.\nGet a character which will be used in case any …\nGets colors of a borders carcass on the grid.\nReturns a list of colors.\nGet a span value of the cell, if any is set.\nGet a span value of the cell, if any is set.\nGet a formatting settings for a given Entity.\nGet formatting.\nGets a horizontal character which would be rendered on the …\nGets a color of a cell horizontal.\nGets a overridden line.\nGets all overridden lines.\nGets an intersection character which would be rendered on …\nGets a color of a cell vertical.\nGet a justification which will be used while expanding …\nGet a justification color which will be used while …\nReturns a grid margin.\nReturns a margin value currently set.\nReturns a grid margin.\nReturns a margin color.\nReturns a margin color value currently set.\nReturns a margin color.\nReturns a margin offset value currently set.\nGet a padding for a given.\nGet a padding for a given Entity.\nGet a padding for a given.\nSet a padding to a given cells.\nGet a padding color for a given Entity.\nget a padding color.\nGet a span value of the cell, if any is set.\nGet a span value of the cell, if any is set.\nGets a vertical character which would be rendered on the …\nGets a color of a cell vertical.\nGets a overridden vertical line.\nGets all overridden vertical lines.\nVerifies if there’s any custom alignment horizontal set.\nVerifies if there’s any custom alignment vertical set.\nVerifies if there’s any colors set for a borders.\nVerifies whether anything is set on the bottom.\nVerifies if borders has bottom line set on the frame.\nVerifies if there’s any spans set.\nVerifies if there’s any custom formatting set.\nVerifies if borders has horizontal lines set.\nChecks if grid would have a horizontal border with the …\nVerifies if there’s any colors set for a borders.\nVerifies whether anything is set on the left.\nVerifies if borders has left line set on the frame.\nVerifies if there’s any colors set for a borders.\nVerifies if there’s any custom padding set.\nVerifies if there’s any custom padding set.\nVerifies whether anything is set on the right.\nVerifies if borders has right line set on the frame.\nVerifies if there’s any spans set.\nVerifies whether anything is set on the top.\nVerifies if borders has top line set on the frame.\nVerifies if borders has vertical lines set.\nChecks if grid would have a vertical border with the …\nA horizontal split.\nAn setting to allow horizontal trim.\nSet a value for an <code>Entity</code>.\nSet the border line by row index.\nSet the border line by column index.\nA top left character on the frame.\nLine intersection character.\nLine intersection character.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns an inner config.\nThe function checks if a cell is hidden indirectly because …\nThe function checks if a cell is hidden because of a …\nThe function checks if a cell is hidden because of a row …\nThe function returns whether the cells will be rendered or …\nChecks whether any side is set.\nA verification whether any border was set.\nVerifies if the line has any setting set.\nVerifies if the line has any setting set.\nVerifies whether anything was set beside a global entry.\nChecks if any colors is set on.\nChecks if there any char in a horizontal border being …\nChecks if there any char in a horizontal border being …\nIterate over cells which are covered via the <code>Entity</code>.\nA character for a left.\nA vertical split on the left frame line.\nLeft intersection character.\nLeft side.\nA character for a left bottom corner.\nA horizontal split on the left frame line.\nA character for a left top corner.\nGet a list of overridden chars in a horizontal border.\nGet a overridden color in a horizontal border.\nGet a list of overridden chars in a horizontal border.\nGet a overridden color in a vertical border.\nLine character.\nLine character.\nThis function constructs a cell borders with all sides set.\nCreates a new <code>Formatting</code> structure.\nCreates a new line.\nCreates a new Indent structure.\nCreates a new object.\nCreates a new line.\nReturns an standard config.\nCreates an empty <code>EntityMap</code>.\nCreate a new colored config.\nCreate a new <code>CompactMultilineConfig</code>.\nRemoves a value for an <code>Entity</code>.\nSets off all borders possible on the <code>Entity</code>.\nGets a color of border of a cell on the grid.\nRemoves border changes.\nRemoves border changes.\nRemove a color for a given cell.\nRemoves border changes.\nRemoves border changes.\nRemoves column spans.\nRemoves border changes.\nSets off the border line by row index if any were set\nRemoves a list of overridden chars in a horizontal border.\nRemoves a list of overridden chars in a horizontal border.\nRemoves row spans.\nRemoves border changes.\nSets off the border line by column index if any were set\nA character for a right.\nA vertical split on the right frame line.\nRight intersection character.\nRight side.\nA character for a right bottom corner.\nA horizontal split on the right frame line.\nA character for a right top corner.\nSet a horizontal alignment.\nSet a horizontal alignment to a given cells.\nSet a horizontal alignment.\nSet a vertical alignment to a given cells.\nSet a horizontal alignment.\nSet border set a border value to all cells in <code>Entity</code>.\nSets a color of border of a cell on the grid.\nSets a color of all borders on the grid.\nSet the all <code>Borders</code> values to a char.\nSet the <code>Borders</code> value as correct one.\nSet the <code>Borders</code> value as correct one.\nSet the <code>Borders</code> value as correct one.\nSets colors of border carcass on the grid.\nSets colors of border carcass on the grid.\nSets colors of border carcass on the grid.\nSet a character which will be used in case any …\nSet a color for a given cell.\nSet a list of colors.\nSet a column span to a given cells.\nSet a formatting to a given cells.\nSet formatting.\nOverride a character on a horizontal line.\nOverride a character color on a horizontal line.\nSet a justification which will be used while expanding …\nSet a justification color which will be used while …\nSet grid margin.\nSet a margin of a grid.\nSet grid margin.\nSet colors for a margin.\nSet a color of margin of a grid.\nSet colors for a margin.\nSet an offset of margin of a grid.\nSet a padding to a given cells.\nSet a padding to a given cells.\nSet a padding to a given cells.\nSet a padding to a given cells.\nSet a padding to a given cells.\nSet a padding color to all cells.\nSet a column span to a given cells.\nOverride a vertical split line.\nOverride a character color on a vertical line.\nA number of repeats of a fill character.\nCreates a new Indent structure with space (<code>&#39; &#39;</code>) as a fill …\nA character for a top.\nA top horizontal on the frame.\nTop side.\nLeft intersection character.\nA top horizontal intersection on the frame.\nA top left on the frame.\nA top right on the frame.\nA vertical split.\nAn setting to allow vertical trim.\nCreates a new Indent structure with space (<code>&#39; &#39;</code>) as a fill …\nA <code>Dimension</code> implementation which calculates exact …\nCompleteDimension is a <code>Dimension</code> implementation for a <code>Table</code>\nCompleteDimension is a <code>Dimension</code> implementation for a <code>Table</code>\nA constant size dimension or a value dimension.\nConst size represents either a const array values or a …\nDimension of a <code>Grid</code>\nA control of width/height logic for situations where we …\nA dimension value.\nDimension estimation of a <code>Grid</code>\nConst width value.\nIncrease first cell width/height in a row/column.\nIncrease last cell width/height in a row/column.\nA constant array of estimates.\nIncrease cells width/height 1 by 1 in a row/column.\nA list of width values for columns.\nA list of width values for columns and a value for the …\nPeekableDimension is a <code>Dimension</code> implementation for a <code>Table</code>\nPoolTableDimension is a dimension resolve strategy for …\nA <code>Dimension</code> implementation which calculates exact …\nA <code>Dimension</code> implementation which calculates exact …\nA constant dimension.\nA value which act as a single estimate for all entries.\nForce height estimation.\nForce height estimation.\nForce width estimation.\nForce width estimation.\nCalculates dimensions of columns.\nEstimates a metric.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCopies a reference from self.\nCopies a reference from self.\nGet a width by column.\nGet a row height by index.\nGet row heights.\nReturn width and height lists.\nReturn width and height lists.\nReturn width and height lists.\nGet a column width by index.\nGet column widths.\nCalculates height of rows.\nCalculates height of rows.\nCalculates height of rows.\nReturn a height priority.\nCalculates height of rows.\nCalculates height of rows.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCopies a reference from self.\nChecks whether is the dimensions is set.\nChecks whether is the dimensions is set.\nChecks whether is nothing was set.\nChecks whether is nothing was set.\nReturns a new dimension object with a given estimates.\nCreates a new object.\nCreates a constant dimension.\nSet rows heights.\nSet rows heights.\nSet column widths.\nSet column widths.\nCalculates width of columns.\nCalculates width of columns.\nCalculates width of columns.\nReturn a width priority.\nCalculates width of columns.\nCalculates width of columns.\nA string representation of a <code>Grid</code> cell.\nEmpty representation of <code>Records</code>.\n<code>Records</code> extension which guarantees the amount of rows.\nThe representation of data, rows and columns of a <code>Grid</code>.\nIterator which goes over rows.\nCell iterator inside a row.\nA Records implementation for any IntoIterator.\nRows iterator.\nThe representation of data, rows and columns of a grid.\nRecords represents table data.\nA <code>Records</code> representation which can modify cell by (row, …\nA records representation which can be modified by moving …\nReturns count of columns in the records.\nReturns an amount of lines of a text of a cell by an index.\nReturns an exact amount of rows in records.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a line of a text of a cell by an index.\nReturns a width of line of a text of a cell by an index.\nReturns a text of a cell by an index.\nReturns a width of a text of a cell by an index.\nHint amount of rows in the records.\nInserts column at index.\nInserts a row at index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe module contains a list of helpers for <code>IntoRecords</code>\nReturns an iterator over rows.\nReturns a iterator over rows.\nReturns a new IterRecords object.\nConstructs an empty representation of <code>Records</code> with a given …\nAdds a new column to a data set.\nAdds a new row to a data set.\nRemoves a column from a data set by index.\nRemoves a row from a data set by index.\nSets a text to a given cell by index.\nSwap cells with one another.\nSwap columns with one another.\nSwap rows with one another.\nModule contains <code>VecRecords</code>.\nA module contains <code>BufRecords</code> iterator.\nA module with a utility enum <code>EitherString</code>.\nThe module contains <code>LimitColumns</code> records iterator.\nThe module contains <code>LimitRows</code> records iterator.\nThe module contains <code>TruncateContent</code> records iterator.\nAn iterator over some iterator or allocated buffer.\nBufRecords inspects <code>IntoRecords</code> iterator and keeps read …\nA row iterator for <code>BufRecords</code>\nAllocated iterator.\nGiven iterator.\nReturns a slice of a keeping buffer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new <code>BufRecords</code> structure, filling the buffer.\nEither allocated string or some type which can be used as …\nAllocated string.\nSomething which can be used as a string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn iterator which limits amount of columns.\nAn iterator over columns for <code>LimitColumns</code>.\nAn iterator over rows for <code>LimitColumns</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new <code>LimitColumns</code>.\n<code>LimitRows</code> is an records iterator which limits amount of …\nA rows iterator for <code>LimitRows</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new <code>LimitRows</code> iterator.\nA records iterator which truncates all cells to a given …\nA column iterator for <code>TruncateContent</code>.\nA row iterator for <code>TruncateContent</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new <code>TruncateContent</code> object.\nCell implementation which can be used with <code>VecRecords</code>.\nStrWithWidth is a structure is responsible for a string …\nThe struct is a Cell implementation which keeps width …\nA Records implementation based on allocated buffers.\nReturns a number of lines cell has.\nCreates a new instance of the structure with a single line.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a original text value.\nGets a line by index.\nReturns a width of cell line.\nCreates a new instance of the structure.\nCreates a new object.\nCreates new <code>VecRecords</code> structure.\nGets a text.\nReturns a width of cell.\nThis module contains a different functions which are used …\nIterator over lines.\nCalculates a number of lines.\nReturns a list of tabs (<code>\\t</code>) in a string..\nReturns the argument unchanged.\nReturns a char width.\nReturns a string width.\nSplits the string by lines.\nReturns a string width (accouting all characters).\nReturns string width and count lines of a string. It’s a …\nReturns a max string width of a line.\nCalls <code>U::from(self)</code>.\nReplaces tabs in a string with a given width of spaces.\nAlignment represent a horizontal and vertical alignment …\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nRotate <code>Table</code> to the bottom.\nA trait for configuring a single cell.\nColor represents a color which can be set to things like …\n<code>Concat</code> concatenates tables along a particular axis […\nA default fill character to be used.\n<code>Dup</code> duplicates a given set of cells into another set of …\nA marker structure to be able to create an empty <code>Settings</code>.\nReturns a new <code>Table</code> that reflects a segment of the …\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nA color representation.\nRotate <code>Table</code> to the left.\nMargin is responsible for a left/right/top/bottom outer …\nMarginColor is responsible for a left/right/top/bottom …\nModify structure provide an abstraction, to be able to …\nThis is a container of <code>CellOption</code>s which are applied to a …\nPadding is responsible for a left/right/top/bottom inner …\nPaddingColor is responsible for a left/right/top/bottom …\nReverse data on the table.\nRotate <code>Table</code> to the right.\nRotate can be used to rotate a table by 90 degrees.\nSettings is a combinator of <code>TableOption</code>s.\nThe structure represents a shadow of a table.\nA trait which is responsible for configuration of a <code>Table</code>.\nRotate <code>Table</code> to the top.\nBottom constructs a vertical alignment to …\nCenter constructs a horizontal alignment to …\n<code>Center_vertical</code> constructs a vertical alignment to …\nModification function of a certail part of a grid targeted …\nThe function modificaties of records and a grid …\nReturns a new <code>Table</code> that reflects a segment of the …\nReverse columns.\nSets a cell’s content for cases where 2 tables has …\nThis module contains a <code>Disable</code> structure which helps to …\nCreates an empty list.\nConstruct’s an Padding object with no color.\nConstruct’s an Padding object with no color.\nCreates a new empty <code>Color</code>`.\nConstruct’s an PaddingExpand object.\nThe function, sets a characters for the margin on an each …\nThe function, sets a characters for the padding on an each …\nThe function, sets a color for the margin on an each side.\nThe function, sets a color for all sides.\nThis module contains a list of primitives to help to …\nThis module contains settings for render strategy of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert alignment to horizontal.\nReturn a prefix.\nReturn a suffix.\nConvert alignment to vertical.\nThe module contains <code>Height</code> structure which is responsible …\nThis module contains a <code>Highlight</code> primitive, which helps …\nA hint whether an <code>TableOption</code> is going to change table …\nA hint whether an <code>TableOption</code> is going to change table …\nA hint whether an <code>TableOption</code> is going to change table …\nA hint whether an <code>TableOption</code> is going to change table …\nConcatenate 2 tables vertically (along axis=1)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLeft constructs a horizontal alignment to …\nA function which combines together <code>Modify::new</code> and …\nThe module contains a <code>Location</code> trait and implementations …\nThe module contains <code>Measurement</code> trait and its …\nThe module contains a set of methods to merge cells …\nCreates a new combinator.\nConstruct’s an Margin object.\nConstruct’s an Margin object.\nConstruct’s an Padding object.\nConstruct’s an Padding object.\nCreates a new <code>Modify</code> without any options.\nCreates a new <code>Color</code>…\nNew creates a new <code>Dup</code> modifier.\nConstruct’s an <code>Shadow</code> object with default fill …\nThis module contains a list of primitives that implement a …\nThis module contains a <code>PaddingExpand</code> setting to expand …\nThis module contains primitives to create a spread row. …\nThe module contains <code>Peaker</code> trait and its implementations …\nRight constructs a horizontal alignment to …\nReturns a new <code>Table</code> that reflects a segment of the …\nReverse rows.\nReturns a new <code>Table</code> that reflects a segment of the …\nSwitch shadow to bottom.\nSets a color for a shadow.\nThe function, sets a characters for the <code>Shadow</code> to be used.\nSwitch shadow to left.\nSet an offset value (default is ‘1’).\nSwitch shadow to right.\nSwitch shadow to top.\nThis module contains a <code>Span</code> settings, it helps to make a …\nThis module contains a <code>Split</code> setting which is used to …\nThis module contains a list of primitives which can be …\nThe module contains a variety of configurations of table, …\nTop constructs a vertical alignment to …\nConcatenate 2 tables horizontally (along axis=0)\nThis module contains object which can be used to limit a …\nAdd an option to a combinator.\nIt’s a generic function which stores a <code>CellOption</code>.\nWith a generic function which stores a <code>CellOption</code>.\nConstruct’s an Padding object with all sides set to 0.\nDisable removes particular rows/columns from a <code>Table</code>.\nA marker struct for <code>Disable</code>.\nA marker struct for <code>Disable</code>.\nDisable columns.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDisable rows.\nA formatting function of particular cells on a <code>Table</code>.\nThis is a struct wrapper for a lambda which changes config.\nA lambda which formats cell content.\n<code>FormatContentPositioned</code> is like a <code>FormatContent</code> an …\nThis function creates <code>FormatConfig</code> function to modify a …\nThis function creates a new <code>Format</code> instance, so it can be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMultiline a helper function for changing multiline content …\nThis function creates a new <code>FormatContentPositioned</code>, so it …\n<code>AlignmentStrategy</code> is a responsible for a flow how we apply …\nAllow horizontal and vertical trim.\nA structure to handle special chars.\n<code>CleanCharset</code> removes all <code>\\t</code> and <code>\\r</code> occurrences.\nAllow horizontal trim.\nSet a justification character and a color.\nDoesn’t allow any trim.\nApply alignment for cell content as a whole.\nApply alignment for each line of a cell content as a whole.\nSet a tab size.\n<code>TrimStrategy</code> determines if it’s allowed to use empty …\nAllow vertical trim.\nReturns <code>CleanCharset</code> which removes all <code>\\t</code> and <code>\\r</code> …\nSets a color for a justification.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates new <code>Justification</code> object.\nCreates new <code>TabSize</code> object.\nA modification for cell/table to increase its height.\nA modification for cell/table to increase its height.\nHeight is a abstract factory for height settings.\nA structure used to set <code>Table</code> height via a list of rows …\nA modification of a table to increase the table height.\nA modification of a table to decrease the table height.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate <code>CellHeightIncrease</code> to set a table/cell height.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate <code>CellHeightLimit</code> to set a table/cell height.\nCreate <code>HeightList</code> to set a table height to a constant list …\nCreates a new object of the structure.\nConstructs a new object.\nCreates a new object.\nCreates a new object.\nCreates a new object.\nThe priority makes sense only for table, so the function …\nSet’s a priority by which the limit logic will be …\nSets a different priority logic.\nSets a different priority logic.\nHighlight modifies a table style by changing a border of a …\nBuild a new instance of <code>Highlight</code>\nBuild a new instance of <code>Highlight</code>\nBuild a new instance of <code>Highlight</code>\nBuild a new instance of <code>Highlight</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBuild a new instance of <code>Highlight</code>\nThe structure is an implementation of <code>Location</code> to search …\nThe structure is an implementation of <code>Location</code> to search …\nThe structure is an implementation of <code>Location</code> to search …\nA coordinate of the finding.\nAn iterator of the coordinates. If it’s empty it’s …\nLocation is an interface which searches for a particular …\nAn abstract factory for locations, to be used to find …\nConstructs a new location searcher with a specified …\nConstructs a new location searcher for a column by its …\nConstructs a new location searcher for a cells with a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSearch for the thing in <code>Records</code>, returning a list of …\nConstructs a new object of the structure.\nConstructs a new object of the structure.\nConstructs a new object of the structure.\nMax width value.\nA width value which can be obtained on behalf of <code>Table</code>.\nMin width value.\nPercent from a total table width.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a measurement value.\nMerge to combine duplicates together, using <code>Span</code>.\nA modificator for <code>Table</code> which looks up for duplicates in …\nA modificator for <code>Table</code> which looks up for duplicates in …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHorizontal merge.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVertical merge.\nCell denotes a particular cell on a <code>Table</code>.\nColumn represents a single column on a grid.\nColumn denotes a set of cells on given columns on a <code>Table</code>.\nAn <code>Iterator</code> which goes goes over columns of a <code>Table</code>.\nDifference struct used for chaining <code>Object</code>’s.\nAn <code>Iterator</code> which goes over only cells which are present …\nAn <code>Iterator</code> which returns an entity once.\n<code>FirstColumn</code> represents the first column on a grid.\nThis structure represents the first row of a <code>Table</code>. It’s …\nFrame includes cells which are on the edges of each side. …\nAn <code>Iterator</code> which goes goes over all cell on a frame of a …\nAn <code>Iterator</code> which goes goes over cells which are present …\nIntersection struct used for chaining <code>Object</code>’s.\nInversion struct used for chaining <code>Object</code>’s.\nAn <code>Iterator</code> which goes goes over cells which are not …\nAn <code>Iterator</code> which returns a list of cells.\n<code>LastColumn</code> represents the last column on a grid.\n<code>LastColumnOffset</code> represents a single column on a grid …\nThis structure represents the last row of a <code>Table</code>.\nA row which is located by an offset from the last row.\nObject helps to locate a necessary part of a <code>Table</code>.\nA row which is located by an offset from the first row.\nRow denotes a set of cells on given rows on a <code>Table</code>.\nAn <code>Iterator</code> which goes goes over all rows of a <code>Table</code>.\nAn <code>Iterator</code> which goes goes over all cell in a sector in a …\nThis structure represents a sub table of <code>Table</code>.\nThis is a segment which contains all cells on the table.\nCombination struct used for chaining <code>Object</code>’s.\nAn <code>Iterator</code> which goes over a combination <code>Object::Iter</code>.\nReturns a table segment on which are present all cells.\nCombines cells. It doesn’t repeat cells.\nCells returns a set of coordinates of cells.\nReturns a new instance of <code>Columns</code> for a first column.\nReturns a first row <code>Object</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns cells which are present in both <code>Object</code>s only.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns cells which are not present in target <code>Object</code>.\nReturns a new instance of <code>Columns</code> for a last column.\nReturns a last row <code>Object</code>.\nCreate new cell structure.\nReturns a new instance of <code>Columns</code> for a range of columns.\nReturns a new instance of <code>Rows</code> for a range of rows.\nThis function builds a <code>Segment</code>.\nExcludes rhs cells from this cells.\nReturns a new instance of <code>Columns</code> for a single column.\nReturns a new instance of <code>Rows</code> with a single row.\nHorizontal expansion of padding (LEFT and RIGHT)\nPaddingExpand is able to expand padding to its limit a …\nVertical expansion of padding (TOP and BOTTOM)\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nFooter renders a <code>Panel</code> at the bottom. See <code>Panel</code>.\nHeader inserts a <code>Panel</code> at the top. See <code>Panel</code>.\nA horizontal/column span from 0 to a count rows.\nPanel allows to add a Row which has 1 continues Cell to a …\nA vertical/row span from 0 to a count columns.\nCreates an horizontal row at last row.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an horizontal row at first row.\nCreates an empty horizontal row at given index.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new object.\nCreates a new object.\nCreates a new horizontal panel.\nCreates a new vertical panel.\nCreates an empty vertical row at given index.\nSplit the set text to a certain width, so it fits within …\nA strategy of width function. It determines the order how …\nA Peaker which goes over column 1 by 1, but truncates as …\nA Peaker which goes over the biggest column first.\nA Peaker which goes over the smallest column first.\nA Peaker which goes over column 1 by 1.\nA Peaker which goes over column 1 by 1, from right side, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new priority which does not target anything.\nCreates a new priority which does not target anything.\nCreates a new priority which does not target anything.\nThis function returns a column index which will be changed.\nColumns (Vertical) span.\nRow (vertical) span.\nSpan represent a horizontal/column span setting for any …\nNew constructs a horizontal/column <code>Span</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new column (vertical) span with a maximux value …\nCreates a new row (vertical) span with a maximux value …\nCreates a new column (vertical) span.\nCreates a new row (vertical) span.\nNew constructs a vertical/row <code>Span</code>.\nReturns a new <code>Table</code> formatted with several optional …\nReturns a split <code>Table</code> with the empty columns/rows filtered …\nReturns a new <code>Table</code> split on the column at the provided …\nReturns a split <code>Table</code> with the redistributed cells pushed …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns a split <code>Table</code> with all cells retained.\nReturns a new <code>Table</code> split on the row at the provided index.\nReturns a split <code>Table</code> with the redistributed cells …\nAn offset from the start.\nBorder represents a border of a Cell.\nBorder represents a border color of a Cell.\nA correctness function of style for <code>Table</code> which has <code>Span</code>s.\nAn offset from the end.\nA horizontal split line which can be used to set a border.\n<code>LineChar</code> sets a char to a specific location on a …\n<code>LineText</code> writes a custom text on a border.\nThe structure represents an offset in a text.\nA marker struct which is used in <code>Style</code>.\nStyle is represents a theme of a <code>Table</code>.\nA vertical split line which can be used to set a border.\nThis is a style which relays only on ASCII charset.\nThis is a theme analog of <code>Style::rounded</code>, but in using …\nThis style is analog of <code>empty</code> but with a vertical space(’…\nSets a bottom border.\nSet a bottom character.\nSet a bottom border color.\nSet a color of the text.\nSets a bottom left corner.\nSet a bottom left intersection color.\nSets a bottom right corner.\nSet a bottom right intersection color.\nSets a top left corner.\nSet a top left intersection color.\nSets a top right corner.\nSet a top right intersection color.\nThis is a style uses only ‘.’ and ‘:’ chars. It …\nUsing this function you deconstruct the existing borders.\nThis style is a style with no styling options on,\nCreates a stub horizontal line.\nCreates a stub horizontal line.\nThis style uses a chars which resembles ‘2 lines’.\nThis function constructs a cell borders with all sides’s …\nCreates a new horizontal split line.\nCreates a new vertical split line.\nThis function constructs a cell borders with all sides’s …\nSet a frame for a style.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThis function constructs a cell borders with all sides set.\nCreates a new horizontal split line.\nCreates a new vertical split line.\nThis function constructs a cell borders with all sides set.\nGet a bottom character.\nGet a bottom character.\nGet a bottom left intersection character.\nGet a bottom left intersection character.\nGet a top left intersection character.\nGet a top right intersection character.\nGet a horizontal character.\nSet a vertical intersection character.\nSet a horizontal intersection character.\nGet a left character.\nGet a left character.\nGet a right character.\nGet a right character.\nGet a top character.\nGet a top character.\nGet a vertical character.\nSets a horizontal split line.\nSet a horizontal character.\nCreates a <code>LineChar</code> which overrides horizontal line.\nSet border horizontal lines.\nFetches outer border from a style.\nFetches vertical line from a style.\nFetches vertical line from a style.\nFetches right vertical line from a style.\nFetches left vertical line from a style.\nFetches right vertical line from a style.\nFetches left vertical line from a style.\nSets an inner intersection char. A char between horizontal …\nSet a vertical intersection character.\nSet a vertical intersection character.\nSets a bottom intersection char.\nSets a left intersection char.\nSets a right intersection char.\nSets a top intersection char.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts a border into a general data structure.\nGet a general structure of line.\nGet a general structure of line.\nConverts a border into a general data structure.\nSets a left border.\nSet a left character.\nSet a left border color.\nSet a horizontal line. An equivalent of calling …\nSet a horizontal line. An equivalent of calling …\nSet a vertical line. An equivalent of calling …\nSet a vertical line. An equivalent of calling …\nSet a horizontal line. An equivalent of calling …\nSet a vertical line. An equivalent of calling …\n<code>markdown</code> style mimics a <code>Markdown</code> table style.\nThis style is analog of <code>Style::ascii</code> which uses UTF-8 …\nThis style looks like a <code>Style::rounded</code> but with …\nCreates an empty border.\nCreates a new horizontal split line.\nCreates a new vertical split line.\nCreates an empty border.\nCreates a <code>LineText</code> instance.\nSet an offset from which the text will be started.\n<code>psql</code> style looks like a table style <code>PostgreSQL</code> uses.\nThis style is one of table views in <code>ReStructuredText</code>.\nRemoves bottom border.\nRemove a vertical bottom character.\nRemoves frame.\nRemoves horizontal split lines.\nRemoves all horizontal lines set by <code>Style::horizontals</code>\nRemove a vertical intersection character.\nRemove a horizontal intersection character.\nRemoves left border.\nRemove a horizontal left character.\nRemoves right border.\nRemove a horizontal right character.\nRemoves top border.\nRemove a vertical top character.\nRemoves vertical split lines.\nRemoves all verticals lines set by <code>Style::verticals</code>\nSets a right border.\nSet a right character.\nSet a right border color.\nThis style looks like a <code>Style::sharp</code> but with rounded …\nSet a bottom border character.\nSet a bottom left intersection character.\nSet a bottom right intersection character.\nSet a top left intersection character.\nSet a top right intersection character.\nSet a left border character.\nSet a right border character.\nSet a top border character.\nThis style looks like a <code>Style::modern</code> but without …\nSets a top border.\nSet a top character.\nSet a top border color.\nSets a vertical split line.\nSet a vertical character.\nCreates a <code>LineChar</code> which overrides vertical line.\nSet border vertical lines.\n<code>Colorization</code> sets a color for the whole table data (so it…\n<code>ColumnNames</code> sets strings on horizontal lines for the …\nA colorization of a target <code>Object</code>.\nLayout can be used to move header to a specific corner.\nA raw style data, which can be produced safely from <code>Style</code>.\nSet an alignment for the names.\nVerifies if borders has bottom line set on the frame.\nVerifies if borders has horizontal lines set.\nVerifies if borders has left line set on the frame.\nVerifies if borders has right line set on the frame.\nVerifies if borders has top line set on the frame.\nVerifies if borders has vertical lines set.\nCreates a <code>Colorization</code> with a pattern which peaks cells …\nCreates a <code>Colorization</code> with a pattern which peaks cells …\nCreates a <code>Colorization</code> with a chess pattern.\nSet color for the column names.\nCreates a <code>Colorization</code> with a pattern which changes column …\nCreates a <code>Colorization</code> with a target <code>Object</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuild a theme out of a style builder.\nGet borders structure.\nGet a border character bottom .\nGet borders color structure.\nGet a border character bottom left corner .\nGet a border character bottom right corner .\nGet a border character top left corner .\nGet a border character top right corner .\nGet a border character horizontal .\nGet a border character intersection of horizontal and …\nGet a border character bottom intersection with a vertical …\nGet a border character left intersection with a horizontal …\nGet a border character right intersection with a …\nGet a border character top intersection with a vertical …\nGet a border character left .\nGet borders structure.\nGet a border character right .\nGet a border character top .\nGet a border character vertical .\nGet a border color bottom .\nGet a border color bottom left corner .\nGet a border color bottom right corner .\nGet a border color top left corner .\nGet a border color top right corner .\nGet a border color horizontal .\nGet a border color intersection of horizontal and vertical …\nGet a border color bottom intersection with a vertical …\nGet a border color left intersection with a horizontal …\nGet a border color right intersection with a horizontal …\nGet a border color top intersection with a vertical line .\nGet a border color left .\nGet borders color structure.\nGet a border color right .\nGet a border color top .\nGet a border color vertical .\nSet an outer border.\nSet an outer border.\nGet a horizontal line at the row if any set.\nGet a vertical line at the row if any set.\nInsert a horizontal line to a specific row location.\nInsert a vertical line into specific column location.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet a horizontal line the names will be applied to.\nCreates a <code>ColumnNames</code> with a given names.\nConstruct a new layout setting.\nCreates a new empty style.\nRemove borders.\nRemove a border character bottom .\nRemove a border character bottom left corner .\nRemove a border character bottom right corner .\nRemove a border character top left corner .\nRemove a border character top right corner .\nRemove a border character horizontal .\nRemove a border character intersection of horizontal and …\nRemove a border character bottom intersection with a …\nRemove a border character left intersection with a …\nRemove a border character right intersection with a …\nRemove a border character top intersection with a vertical …\nRemove a border character left .\nRemove a border character right .\nRemove a border character top .\nRemove a border character vertical .\nRemove colors.\nRemove a border color bottom .\nRemove a border color bottom left corner .\nRemove a border color bottom right corner .\nRemove a border color top left corner .\nRemove a border color top right corner .\nRemove a border color horizontal .\nRemove a border color intersection of horizontal and …\nRemove a border color bottom intersection with a vertical …\nRemove a border color left intersection with a horizontal …\nRemove a border color right intersection with a horizontal …\nRemove a border color top intersection with a vertical …\nRemove a border color left .\nRemove a border color right .\nRemove a border color top .\nRemove a border color vertical .\nRemove horizontal lines.\nRemove vertical lines.\nCreates a <code>Colorization</code> with a pattern which changes row by …\nSet borders structure.\nSet a border character bottom .\nSet a border character bottom left corner .\nSet a border character bottom right corner .\nSet a border character top left corner .\nSet a border character top right corner .\nSet a border character horizontal .\nSet a border character intersection of horizontal and …\nSet a border character bottom intersection with a vertical …\nSet a border character left intersection with a horizontal …\nSet a border character right intersection with a …\nSet a border character top intersection with a vertical …\nSet a border character left .\nSet a border character right .\nSet a border character top .\nSet a border character vertical .\nSet borders structure.\nSet a border color bottom .\nSet a border color bottom left corner .\nSet a border color bottom right corner .\nSet a border color top left corner .\nSet a border color top right corner .\nSet a border color horizontal .\nSet a border color intersection of horizontal and vertical …\nSet a border color bottom intersection with a vertical …\nSet a border color left intersection with a horizontal …\nSet a border color right intersection with a horizontal …\nSet a border color top intersection with a vertical line .\nSet a border color left .\nSet a border color right .\nSet a border color top .\nSet a border color vertical .\nReturns an outer border of the style.\nReturns an outer border of the style.\nSet horizontal border lines.\nSet vertical border lines.\nCut the suffix.\nDon’t show the suffix.\nJustify sets all columns widths to the set value.\n<code>MinWidth</code> changes a content in case if it’s length is …\nUse a string with n chars instead.\nA suffix limit settings.\nTruncate cut the string to a given width if its length …\nWidth allows you to set a min and max width of an object …\nA structure used to set <code>Table</code> width via a list of columns …\nWrap wraps a string to a new line in case it exceeds the …\nSet’s a fill character which will be used to fill the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a <code>MinWidth</code> structure.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a <code>Justify</code> structure.\nSet the keep words option.\nCreate <code>WidthList</code> to set a table width to a constant list …\nCreates a new Justify instance with a Max width used as a …\nCreates a new Justify instance with a Min width used as a …\nUse trancate logic per line, not as a string as a whole.\nCreates a new <code>Justify</code> instance.\nCreates a new instance of <code>MinWidth</code>.\nCreates a <code>Truncate</code> object\nCreates a new object.\nCreates a <code>Wrap</code> object\nPriority defines the logic by which a increase of width …\nPriority defines the logic by which a truncate will be …\nPriority defines the logic by which a truncate will be …\nSets a suffix which will be appended to a resultant string.\nSets a suffix limit, which is used when the suffix is too …\nTruncate a given string\nReturns a <code>Truncate</code> structure.\nWrap a given string\nReturns a <code>Wrap</code> structure.\nA single cell.\nA vertical column.\nA table which consumes an <code>IntoRecords</code> iterator. It assumes …\n<code>ExtendedTable</code> display data in a ‘expanded display mode’…\nA table which consumes an <code>IntoRecords</code> iterator.\n<code>PoolTable</code> is a table which allows a greater set of …\nA horizontal row.\nThe structure provides an interface for building a table …\n<code>TableValue</code> a structure which is responsible for a <code>PoolTable</code>…\nFormat table into a writer.\nFormat table into <code>io::Write</code>r.\nCreates a builder from a data set given.\nLimit a number of columns.\nLimit a number of columns.\nReturns an amount of columns in the table.\nReturns an amount of rows in the table.\nFormat table into fmt::Writeer.\nFormat table into fmt::Writeer.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a table config.\nReturns a table config.\nReturns a table config.\nReturns a table config.\nReturns a used records.\nReturns a used records.\nSet a height for each row.\nSet a height for each row.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a table shape (count rows, count columns).\nIt’s a generic function which applies options to …\nCreates a new <code>CompactTable</code> structure with a width …\nCreates a new instance of <code>ExtendedTable</code>\nCreates a new <code>IterTable</code> structure.\nNew creates a Table instance.\nCreates a <code>PoolTable</code> out from a record iterator.\nLimit a number of rows.\nLimit a number of rows.\nReturns a table shape (count rows, count columns).\nLimit an amount of rows will be read for dimension …\nSets the template for a record.\nBuild a string.\nBuild a string.\nReturns total widths of a table, including margin and …\nReturns total widths of a table, including margin and …\nTruncates table to a set width value for a table. It …\nSet a width for each column.\nSet a width for each column.\nWith is a generic function which applies options to the …\nWith is a generic function which applies options to the …\nIt’s a generic function which applies options to the …\nA is a generic function which applies options to the …\nCreates a new <code>CompactTable</code> structure with a known …")