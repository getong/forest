searchState.loadedDescShard("fvm", 0, "(Proper package docs coming shortly; for now this is a …\nThis module contains the logic to invoke the node by …\nConvenience macro for generating Actor Errors\nCreate a mapping from enum items to values in a way that …\nThe <code>CallManager</code> manages a single call stack.\nThe default <code>CallManager</code> implementation.\nThe returned values upon finishing a call manager.\nImplicitly invoke a constructor. We keep this separate for …\nThe result of calling actor’s entrypoint\nInvoke a method.\nThe underlying <code>Machine</code> on top of which this <code>CallManager</code> …\nBlockID representing nil parameters or return data.\nUpgrade to a new actor code CID.\nAppends an event to the event accumulator.\nReturns the blockstore.\nCalls an actor at the given address and entrypoint. The …\nCharge gas.\nReturns the machine context.\nCreate a new actor with the given code CID, actor ID, and …\nDeletes an actor from the state-tree, charging gas as …\nReturns a reference to the engine\nThe exit code (0 for success).\nReturns the externs.\nFinishes execution, returning the gas used, machine, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the gas premium paid by the currently executing …\nReturns a reference to the gas tracker.\nLooks up an actor in the state-tree, charging gas as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the total invocations done on this call stack.\nLimit memory usage throughout a message execution.\nReturns a reference to the machine.\nReturns a mutable reference to the machine.\nConstruct a new call manager.\nGet the actor address (f2) that will should be assigned to …\nGetter for message nonce.\nGetter for origin actor.\nReturns the current price list.\nResolve an address into an actor ID, charging gas as …\nResolve an address and charge for it.\nSets an actor in the state-tree, charging gas as …\nTransfers tokens from one actor to another, charging gas …\nThe return value, if any.\nExecute some operation (usually a call_actor) within a …\nA call backtrace records the actors an error was …\nThe ultimate “cause” of a failed message.\nThe original cause was a fatal error.\nA “frame” in a call backtrace.\nThe original cause was a syscall error.\nBegins a new backtrace. If there is an existing backtrace, …\nThe last syscall error before the first actor in <code>frames</code> …\nClear the backtrace.\nThe exit code.\nThe actors through which this error was propagated from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRecords a fatal error as the cause of a backtrace.\nRecords a failing syscall as the cause of a backtrace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the backtrace is completely empty.\nThe abort message.\nThe method that was invoked.\nPush a “frame” (actor exit) onto the backtrace.\nSets the cause of a backtrace.\nThe actor that exited with this code.\nThe backtrace, captured if the relevant environment …\nThe exact syscall error.\nThe alternate-formatted message from the anyhow error.\nThe syscall function name.\nThe informational syscall message.\nThe syscall “module”.\nAn <code>Engine</code> represents a single, caching wasm engine. It …\nThe proper way of getting this struct is to convert from …\nEnginePool represents a limited pool of engines.\nContainer managing <code>Engine</code>s with different …\nAcquire an <code>Engine</code>. This method will block until an <code>Engine</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an <code>EnginePool</code> for the given <code>NetworkConfig</code>, creating …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new “multi-engine” with the given concurrency …\nCreate a new <code>EnginePool</code>.\nLoads an actor’s Wasm code from the blockstore by CID, …\nInstantiates and caches the Wasm modules for the bytecodes …\nA description of some failure encountered when applying a …\nThe kind of message being applied:\nApply message return data.\nThe default <code>Executor</code>.\nAn executor executes messages on the underlying …\nThe <code>Kernel</code> on which messages will be applied. We specify a …\nThe backtrace from a message failure.\nA message describing a pre-validation failure.\nAn executor that executes messages on a separate thread …\nEvents generated while applying the message.\nExecution trace information, for debugging.\nThis is the entrypoint to execute a message.\nThis is the entrypoint to execute a message.\nThis is the entrypoint to execute a message.\nAdditional failure information for debugging, if any.\nFlushes the state-tree, returning the new root CID.\nFlush the state-tree to the underlying blockstore.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume consumes the executor and returns the Machine. If …\nTip given to miner from message.\nMessage receipt for the transaction. This data is stored …\nCreate a new <code>DefaultExecutor</code> for executing messages on the …\nGas penalty from transaction, if any.\nChain information provider.\nConsensus related methods.\nRandomness provider trait\nGets 32 bytes of randomness for ChainRand paramaterized by …\nGets 32 bytes of randomness for ChainRand paramaterized by …\nGets the CID for a given tipset.\nVerify a consensus fault.\nA typesafe representation of gas (internally stored as …\nSingle gas charge in the VM. Contains information about …\nData structure to encapsulate the optional duration which …\nType alias so that we can disable this with a compiler …\nA handle returned by <code>charge_gas</code> which must be used to mark …\nProvides prices for operations in the VM. All costs are in …\nApplies the specified gas charge, where quantities are …\nReturns the gas value as milligas, without loss of …\nSafely consumes gas and returns an out of gas error if …\nGas charged for immediate computation.\nExecution time related to this charge, if traced and …\nCreate a timer that doesn’t measure anything.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>Gas</code> from milligas.\nGetter for gas available.\nGetter for the maximum gas usable by this message.\nGetter for gas used.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGas limit and gas used are provided in protocol units …\nCreate a new timer that will update the elapsed time of a …\nConstruct a <code>Gas</code> from gas, scaling up. If this exceeds the …\nReturns the gas required to create a new actor in the …\nReturns the gas required to lookup an actor in the …\nReturns the gas required to update an actor in the …\nReturns the gas required for accessing the balance of an …\nReturns the gas required for adding an object to the FVM …\nReturns the gas required for committing an object to the …\nReturns the gas required for loading an object based on …\nReturns the base gas required for loading an object, …\nReturns the gas required for reading a loaded object.\nReturns the gas required for storing an object.\nReturns the gas required for storing a message of a given …\nReturns gas required for computing unsealed sector Cid.\nReturns the gas required for creating an actor. Pass <code>true</code> …\nReturns the gas required for deleting an actor.\nReturns the gas required for getting the CID of the code …\nReturns the gas required for looking up the type of a …\nReturns the gas required for looking up the CID of a …\nReturns the cost of the gas required for getting …\nReturns gas required for hashing data.\nReturns the gas required for installing an actor.\nReturns the gas required for looking up an actor’s …\nReturns the gas required for accessing the message context.\nReturns the gas required when invoking a method.\nReturns the gas required for returning a value from a …\nReturns the gas required for accessing the network context.\nReturns gas required for recovering signer pubkey from …\nReturns the gas required for resolving an actor address.\nReturns the gas required for accessing the balance of the …\nReturns the gas required for looking up a tipset CID with …\nReturns the gas required when invoking a method.\nReturns gas required for BLS aggregate signature …\nReturns gas required for verifying consensus fault.\nReturns gas required for PoSt verification.\nReturns gas required for replica verification.\nReturns gas required for seal verification.\nReturns gas required for signature verification.\nOther gas including:\nPop a gas limit, restoring the previous one, and adding …\nReturns gas price list by NetworkVersion for gas …\nPush a new gas limit.\nConvenience method to record the elapsed time only if some …\nReturns the gas value as an integer, truncating the …\nReturns the gas value as an integer, rounding the …\nConvenience method to start measuring time before the …\nRecord the elapsed time since the charge was made.\nRecord the elapsed time based on an instant taken before …\nCalculates total gas charge (in milligas) by summing …\nActors operations whose scope of action is actors other …\nBlocks in the block registry are addressed by an ordinal, …\nA registry of open blocks (per-kernel). Think “file …\nThe <code>Kernel</code>’s <code>CallManager</code> is\nThe FVM’s equivalent of <code>anyhow::Context</code>. This is …\nCryptographic primitives provided by the kernel.\nDebugging APIs.\nContains the error value\nEventing APIs.\nThe IPLD subset of the kernel.\nThe “kernel” implements the FVM interface as presented …\nThe <code>Kernel</code>’s memory allocation tracker.\nAccessors to query attributes of the incoming message.\nNetwork-related operations.\nContains the success value\nRandomness queries.\nExecution result.\nActor state access and manipulation. Depends on BlockOps …\nThe actor calling operations.\nCodes and hashers supported by FVM. You <em>can</em> use this hash …\nRepresents an error from a syscall. It can optionally …\nThe actor upgrade operations.\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nA macro to be used by <code>ambassador::Delegate</code> to delegate …\nReturns the balance associated with an actor id\nCreate a new block.\nComputes a CID for a block.\nOpen a block.\nRead data from a block.\nReturns the blocks codec &amp; size.\nChargeGas charges specified amount of <code>gas</code> for execution. …\nCreates an actor with given <code>code_cid</code>, <code>actor_id</code>, …\nThe balance of the receiver.\nReturns whether debug mode is enabled.\nRecords an event emitted throughout execution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the remaining gas for the transaction.\nGets the block associated with a block handle.\nLook up the code CID of an actor.\nReturns the actor’s “type” (if builitin) or 0 (if …\nReturns the CodeCID for the supplied built-in actor type.\nRandomness returns a (pseudo)random byte array drawing …\nRandomness returns a (pseudo)random byte array drawing …\nHashes input <code>data_in</code> using with the specified hash …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the <code>Kernel</code> and return the underlying <code>CallManager</code> …\nReturns true if the error is fatal. A fatal error means …\nCheck if a block is reachable. Call this before attempting …\nGive access to the limiter of the underlying call manager.\nLog a message.\nLooks up the “delegated” (f4) address of the specified …\nThe kernel’s underlying “machine”.\nMark a cid as reachable. Call this when a new block is …\nMessage information.\nNetwork information (epoch, version, etc.).\nConstruct a new <code>Kernel</code> from the given <code>CallManager</code>.\nComputes an address for a new actor. The returned address …\nImport this module (with a glob) if you’re implementing …\nAdds a new block to the registry, checking that all …\nAdds a new block to the registry, marking all children as …\nGiven a message hash and its signature, recovers the …\nResolves an address of any protocol to an ID address (via …\nGet the state root.\nDeletes the executing actor from the state tree, burning …\nSends a message to another actor. The method type …\nUpdate the state-root.\nReturns the size &amp; codec of the specified block.\nStore an artifact. Returns error on malformed name, …\nThe CID of the tipset at the specified epoch.\nUpgrades the running actor to the specified code CID.\nVerifies a BLS aggregate signature. In the case where …\nVerifies that a signature is valid for an address and …\nThe “default” <code>Kernel</code> implementation.\nTracks block data and organizes it through index handles …\nThe call manager for this call stack. If this kernel calls …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVerifies a batch of seals. This is a privledged syscall, …\nComputes an unsealed sector CID (CommD) from its …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the total token supply in circulation at the …\nVerify aggregate seals verifies an aggregated batch of …\nVerifies that two block headers provide proof of a …\nVerifies a window proof of spacetime.\nVerifies a window proof of spacetime.\nVerify replica update verifies a snap deal: an upgrade …\nIdentifier for Actors, includes builtin and initialized …\nAddress is the struct that defines the protocol and data …\nEpoch number of a chain. This acts as a proxy for time …\nA Cid that contains a multihash with an allocated size of …\nThe logical number of decimal places of a token unit.\nDelegate the implementation of a trait to a struct …\nExitCode defines the exit code from the VM invocation.\nThe lowest exit code that an actor may abort with.\nMethod number indicator for calling actor methods.\nA Multihash with the same allocated size as the …\nSpecifies the network version\nThe code indicating successful execution.\nThe logical precision of a token unit.\nSend in “read-only” mode.\nSecp256k1 Public key length in bytes.\nSecp256k1 signature length in bytes.\nLength of the signature input message hash in bytes (32).\nAn internal VM assertion failed.\nThe message receiver aborted with a reserved exit code.\nThe message receiver trapped (panicked).\nThe message sender didn’t have the requisite funds.\nThe message receiver either doesn’t exist and can’t be …\nThe actor returned a block handle that doesn’t exist\nMessage execution (including subcalls) used more gas than …\nThe message sender doesn’t exist.\nThe message sender was not in a valid state to send this …\nFlags passed to the send syscall.\nSignature variants for Filecoin signatures.\nA quantity of native tokens. A token amount is an integer, …\nThe actor failed a user-level assertion.\nThe requested operation is forbidden.\nThe method parameters are invalid.\nThe actor’s internal state is invalid.\nThe actor has insufficient funds to perform the requested …\nThe requested resource does not exist.\nThe method cannot handle a transfer of value.\nThe requested operation cannot be performed in “read-only…\nThere was a de/serialization failure within actor code.\nThe message cannot be handled (usually indicates an …\nThe actor failed with an unspecified error.\ngenesis (specs-actors v0.9.3)\nbreeze (specs-actors v0.9.7)\ntrust (specs-actors v3.0.x)\nnorwegian (specs-actors v3.1.x)\nturbo (specs-actors v4.0.x)\nHyperDrive\nChocolate v6\nOhSnap v7\nSkyr (builtin-actors v8)\nShark (builtin-actors v9)\nHygge (builtin-actors v10)\nLightning (builtin-actors v11)\nsmoke (specs-actors v0.9.8)\nThunder (builtin-actors v11)\nWatermelon (builtin-actors v12)\nDragon (builtin-actors v13)\nWaffle (builtin-actors v14)\nTBD (builtin-actors v15)\nignition (specs-actors v0.9.11)\nactors v2 (specs-actors v2.0.x)\ntape (increases max prove commit size by 10x)\nkumquat (specs-actors v2.2.0)\ncalico (specs-actors v2.3.2)\npersian (post-2.3.2 behaviour transition)\norange\nGet a flags value with all known bits set.\nReturns the quantity of indivisible units.\nThe current base-fee.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe caller’s actor ID.\nThe Chain ID of the network.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe current epoch.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags pertaining to the currently executing actor’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a token amount from a quantity of indivisible …\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates address from encoded bytes.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a token amount from nanoFIL.\nCreates a token amount from a quantity of whole units …\nThe gas premium being paid by the currently executing …\nGet ID of the address. ID protocol only.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts Address into <code>Payload</code> object, where the respective …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nReturns true if the exit code indicates success.\nReturns true if the error code is in the range of exit …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe method number from the message.\nThe network version.\nConstruct a new arbitrary network version.\nGenerates new address using the Actor protocol.\nGenerates new address using BLS pubkey.\nGenerates a new delegated address from a namespace and a …\nGenerates new address using ID protocol.\nGenerates new address using Secp256k1 pubkey.\nThe nonce from the explicit message.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe current call’s origin actor ID.\nReturns the <code>Payload</code> object from the address, where the …\nReturns the raw bytes data payload of the Address\nReturns protocol for Address\nThe receiver’s actor ID (i.e. ourselves).\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe current time (seconds since the unix epoch).\nReturns encoded bytes of Address\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe value that was received.\nDistinguished Account actor that is the destination of all …\nThe Machine is the top-level object of the FVM.\nPer-epoch machine context.\nA mapping of builtin actor CIDs to their respective types.\nNetwork-level settings. Except when testing locally, …\nEnable actor debugging.\nActor redirects for debug execution\nThe base fee that’s in effect when the Machine runs.\nReturns a reference to the machine’s blockstore.\nReturns the builtin actor index.\nAn override for builtin-actors. If specified, this should …\nSet Chain ID of the network.\nThe Chain ID of the network.\nv15 and onwards: The amount of FIL that has vested from …\nReturns the code CID for a builtin actor, given the actor…\nReturns a reference to the machine context: static …\nEnable actor debugging. This is a consensus-critical …\nEnable execution traces. <code>MachineContext::tracing</code>.\nThe current epoch\nReturns a reference to all “node” supplied APIs.\nFlushes the state-tree and returns the new root CID.\nFlushes the state-tree and returns the new root CID.\nCreate a [‘MachineContext’] for a given epoch, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the code CID for the account actor.\nReturns the code CID for the eam actor.\nReturns the code CID for the Ethereum Account actor.\nReturns the code CID for the init actor.\nReturns the code CID for the system actor.\nReturns the code CID for the system actor.\nReturns the the actor code’s “id” if it’s a …\nThe initial state root on which this block is based.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the machine and returns the owned blockstore.\nReturns true id the passed code CID is the account actor.\nReturns true id the passed code CID is the EthAccount …\nReturns true id the passed code CID is the placeholder …\nLoad a manifest from the blockstore.\nReturns a generated ID of a machine\nThe maximum blocks size that can be created in the FVM.\nThe maximum call depth.\nMaximum size of memory of any Wasm instance, ie. each …\nMaximum size of memory used during the entire (recursive) …\nThe maximum number of elements on wasm stack DEFAULT: 64Ki …\nNetwork-level settings.\nThe network version at epoch\nCreate a new <code>DefaultMachine</code>.\nConstruct a new manifest from actor name/cid tuples.\nCreate a new network config for the given network version.\nCreates a new limiter to track the resources of a message …\nOverride actors with the specific manifest. This is …\nThe price list.\nSet actor redirects for debug execution\nSets <code>MachineContext::base_fee</code>.\nSet <code>MachineContext::circ_supply</code>.\nReturns an immutable reference to the state tree.\nReturns a mutable reference to the state tree.\nThe UNIX timestamp (in seconds) of the current tipset\nWhether or not to produce execution traces in the returned …\nLimit resources throughout the whole message execution, …\nExecution level memory tracking and adjustment.\nReturns the argument unchanged.\nGrows an instance’s memory from <code>from</code> to <code>to</code>. There’s no …\nGrows an instance’s table from <code>from</code> to <code>to</code> elements. There…\nReturns <code>true</code> if growing by <code>delta</code> bytes is allowed. …\nCalls <code>U::from(self)</code>.\nGet a snapshot of the total memory required by the …\nPush a new frame onto the call stack, and keep tallying up …\nState of all actor implementations.\nState tree implementation using hamt. This structure is …\nSpecifies the version of the state tree\nCorresponds to actors &lt; v2\nCorresponds to actors = v2\nCorresponds to actors = v3\nCorresponds to actors = v4\nCorresponds to actors &gt;= v5\nCorresponding to actors &gt;= v10\nTokens available to the actor.\nBegin a new state transaction. Transactions stack.\nLink to code for the actor.\nSafely deducts funds from an Actor\nThe actor’s “delegated” address, if assigned.\nDelete actor identified by the supplied ID.\nDeposits funds to an Actor\nEnd a transaction, reverting if requested.\nFlush state tree and return Cid root.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet actor state from an actor ID.\nReturns true if we’re inside of a transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this StateTree and returns the Blockstore it owns …\nGet an ID address from any Address\nTry to mutate the actor state identified by the supplied …\nMutate and set actor state identified by the supplied ID. …\nConstructor for actor state\nConstruct a new empty actor with the specified code.\nConstructor for a hamt state tree given an IPLD store\nRegister a new address through the init actor.\nSequence of the actor.\nSet actor state with an actor ID.\nLink to the state of the actor.\nRetrieve store reference to modify db.\nRepresents an actor “abort”. Returning an <code>Abort</code> from a …\nAbort the running actor (exit, out of gas, or fatal error).\nThe syscall context. Allows syscalls to access the <code>Kernel</code> …\nControlFlow is a general-purpose enum for returning a …\nFail with the specified syscall error.\nThe actor explicitly aborted with the given exit code, …\nThe system failed with a fatal error indicating a bug in …\nThe helper trait used by <code>Syscall</code> to convert kernel results …\nA “linker” for exposing syscalls to wasm modules.\nRepresents a Wasm memory. All methods are inexpensive and …\nThe actor ran out of gas. This will unwind the actor call …\nReturn a value to the actor.\nA <code>Syscall</code> is a function in the form …\nCheck that the given slice, specified by an offset and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an execution error into an “abort”. We can’t …\nJust like from_error, but escalating syscall errors as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe running actor’s <code>Kernel</code>.\nLink this syscall with the specified linker, module name, …\nLink a syscall.\nThe running actor’s <code>Memory</code>.\nConstruct a new “memory” from the given slice.\nRead a Filecoin address from actor memory.\nRead a CID from actor memory starting at the given offset.\nReturn a slice of byte arrays into the actor’s memory.\nReturn a slice into the actor’s memory.\nReturn a mutable slice into the actor’s memory.\nWrite a CID to actor memory at the given offset.\nEmitted on each send call regardless whether we actually …\nAn “event” that happened during execution.\nExecution Trace, only for informational and debugging …\nEmitted every time an actor is successfully invoked.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")