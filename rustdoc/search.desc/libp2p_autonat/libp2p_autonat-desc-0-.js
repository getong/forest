searchState.loadedDescShard("libp2p_autonat", 0, "Implementation of the AutoNAT protocol.\nThe second version of the autonat protocol.\n<code>NetworkBehaviour</code> for AutoNAT.\nConfig for the <code>Behaviour</code>.\nThe connection closed before a response was received.\nThe connection closed before a response could be send.\nThe protocol name used for negotiating with …\nThe request could not be sent because a dialing attempt …\nThe outbound request failed, was rejected, or the remote …\nThe inbound request failed, was rejected, or none of the …\nEvent produced by <code>Behaviour</code>.\nPossible failures occurring in the context of receiving an …\nEvent on an inbound probe.\nInbound probe failed.\nReceiving the dial-back request or sending a response …\nAn IO failure happened on an outbound stream.\nAn IO failure happened on an inbound stream.\nAssumed NAT status.\nProbe was aborted because the local peer has no listening …\nProbe was aborted because no server is known, or all …\nPossible failures occurring in the context of sending an …\nEvent on an outbound probe.\nOutbound probe failed or was aborted.\nSending the dial-back request or receiving a response …\nUnique identifier for a probe.\nA dial-back request was sent to a remote peer.\nA dial-back request was received from a remote peer.\nThe server refused or failed to dial us.\nThe remote successfully dialed one of our addresses.\nWe refused or failed to dial the client.\nA dial request to the remote was successful.\nThe local peer failed to respond to an inbound request due …\nThe assumed NAT changed.\nThe request timed out before a response was received.\nThe inbound request timed out, either while reading the …\nThe remote supports none of the requested protocols.\nThe local peer supports none of the protocols requested by …\nAdd a peer to the list over servers that may be used for …\nDelay on init before starting the fist probe.\nConfidence in the assumed NAT status.\nMax confidence that can be reached in a public / private …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMax addresses that are tried per peer.\nAssumed NAT status.\nAs a server reject probes for clients that are observed at …\nExplicitly probe the provided address for external …\nAssumed public address of the local peer. Returns <code>None</code> in …\nInterval in which the NAT should be tested again if max …\nRemove a peer from the list of servers. See …\nInterval in which the NAT status should be re-tried if it …\nMax total dial requests done in …\nMax dial requests done in <code>[Config::throttle_clients_period</code>]…\nPeriod for throttling clients requests.\nThrottle period for re-using a peer as server for a …\nTimeout for requests.\nUse connected peers as servers for probes.\nNew status.\nFormer status.\nThe addresses that will be attempted to dial.\nPeer that sent the request.\nPeer to which the response is sent.\nPeer that sent the dial-back request.\nThe address at which the remote succeeded to dial us.\nPeer to which the request is sent.\nId of the peer that sent the response.\nId of the peer used for the probe. <code>None</code> if the probe was …\nThe amount of data that was sent to the server. Is 0 if it …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe result of the test. If the test was successful, this …\nThe peer id of the server that was selected for testing.\nThe address that was selected for testing.\nAll address that were submitted for testing.\nThe peer id of the client that submitted addresses for …\nThe amount of data that was requested by the server and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe result of the test.\nThe address that was eventually tested.")