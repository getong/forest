searchState.loadedDescShard("fvm_shared", 0, "Allowable clock drift in validations.\nIdentifier for Actors, includes builtin and initialized …\nThe expected number of block producers in each epoch.\nTotal gas limit allowed per block. This is shared across …\nParams for the network. This is now continued on into …\nDefault bit width for the hamt in the filecoin protocol.\nMultihash code for the identity hash function.\nCodec for raw data.\nThe maximum supported CID size.\nBase actor constructor method.\nBase actor send method.\nAvailable rewards for mining.\nMethod number indicator for calling actor methods.\nConfig trait which handles different network …\nThe outcome of a <code>Send</code>, covering its ExitCode and optional …\nLookback height for retrieving ticket randomness.\nTotal Filecoin available to the network.\nTotal filecoin available to network.\nTotal Filecoin supply.\nEpochs to look back for verifying PoSt proofs.\nZero address used to avoid allowing it to be used for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitial reward actor balance. This function is only called …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis module contains types exchanged at the syscall layer …\nf2: Actor protocol address, 20 byte hash of actor data.\nActor protocol addressing\nAddress is the struct that defines the protocol and data …\nf3: BLS key address, full 48 byte public key.\nBLS key addressing\nBLS public key length used for validation of BLS addresses.\nLength of the checksum hash for string encodings.\nf4: Delegated address, a namespace with an arbitrary …\nDelegated actor protocol addressing\nA “delegated” (f4) address.\nAddress error\nDefines first available ID address after builtin actors\nf0: ID protocol address.\nID protocol addressing\nThe max encoded length of an address.\nMax length of f4 sub addresses.\nNetwork defines the preconfigured networks to use with …\nHash length of payload for Secp and Actor addresses.\nPayload is the data of the Address. Variants are the …\nProtocol defines the addressing protocol used to derive …\nUncompressed secp public key used for validation of Secp …\nf1: SECP256K1 key address, 20 byte hash of PublicKey.\nSECP256K1 key addressing\nGets the current network.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates address from encoded bytes.\nGet ID of the address. ID protocol only.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts Address into <code>Payload</code> object, where the respective …\nReturns the delegated address’s namespace .\nConstruct a new delegated address from the namespace …\nGenerates payload from raw bytes and protocol.\nGenerates new address using the Actor protocol.\nGenerates new address using BLS pubkey.\nGenerates a new delegated address from a namespace and a …\nGenerates new address using ID protocol.\nGenerates new address using Secp256k1 pubkey.\nParse an address belonging to this network.\nReturns the <code>Payload</code> object from the address, where the …\nReturns the raw bytes data payload of the Address\nReturns protocol for Address\nSets the default network.\nReturns the delegated address’s subaddress .\nReturns encoded bytes of Address including the protocol …\nReturns encoded bytes of Address\nReturns encoded bytes of Address without the protocol byte.\nA big signed integer type.\nA big unsigned integer type.\nThe maximum number of bytes we accept to …\nA <code>Sign</code> is a <code>BigInt</code>’s composing element.\nA generic trait for converting a value to a <code>BigInt</code>. This …\nA generic trait for converting a value to a <code>BigUint</code>.\nThe error type returned when a checked conversion …\nAn iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …\nAn iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …\nA constant <code>BigInt</code> with value 0, useful for static …\nA constant <code>BigUint</code> with value 0, useful for static …\nDefines an additive identity element for <code>Self</code>.\nReinitializes a <code>BigInt</code>.\nAssign a value to a <code>BigUint</code>.\nReturns the ceil value of the average of <code>self</code> and <code>other</code>.\nReturns the ceil value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>self</code> and <code>other</code>.\nReturns the floor value of the average of <code>self</code> and <code>other</code>.\nReturns whether the bit in position <code>bit</code> is set, using the …\nReturns whether the bit in the given position is set\nDetermines the fewest bits necessary to express the <code>BigInt</code>,\nDetermines the fewest bits necessary to express the <code>BigUint</code>…\nReturns the truncated principal cube root of <code>self</code> – see …\nReturns the truncated principal cube root of <code>self</code> – see …\nReturns the number of one bits.\nDecrements self by one.\nCeiled integer division.\nFloored integer division.\nSimultaneous floored integer division and modulus. Returns …\nSimultaneous truncated integer division and modulus. …\nDeprecated, use <code>is_multiple_of</code> instead.\nDeprecated, use <code>is_multiple_of</code> instead.\nDeprecated, use <code>is_multiple_of</code> instead.\nGreatest common divisor and Bézout coefficients.\nGreatest common divisor, least common multiple, and …\nGreatest common divisor, least common multiple, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigUint</code>. Each <code>u8</code> of the input …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code> from an array of bytes in …\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nGreatest Common Divisor (GCD).\nCalculates the Greatest Common Divisor (GCD) of the number …\nCalculates the Greatest Common Divisor (GCD) of the number …\nGreatest Common Divisor (GCD) and Lowest Common Multiple …\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nCalculates the Greatest Common Divisor (GCD) and Lowest …\nIncrements self by one.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtract the original value, if available. The value will …\nConvert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …\nReturns <code>true</code> if the number is even.\nReturns <code>true</code> if the number is divisible by <code>2</code>.\nReturns <code>true</code> if the number is divisible by <code>2</code>.\nReturns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is a multiple of <code>other</code>.\nReturns <code>true</code> if the number is odd.\nReturns <code>true</code> if the number is not divisible by <code>2</code>.\nReturns <code>true</code> if the number is not divisible by <code>2</code>.\nReturns <code>true</code> if <code>self</code> is equal to the additive identity.\nReturns an iterator of <code>u32</code> digits representation of the …\nReturns an iterator of <code>u32</code> digits representation of the …\nReturns an iterator of <code>u64</code> digits representation of the …\nReturns an iterator of <code>u64</code> digits representation of the …\nLowest Common Multiple (LCM).\nCalculates the Lowest Common Multiple (LCM) of the number …\nCalculates the Lowest Common Multiple (LCM) of the number …\nReturns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.\nFloored integer modulo, satisfying:\nReturns the modular multiplicative inverse if it exists, …\nReturns the modular multiplicative inverse if it exists, …\nReturns <code>(self ^ exponent) mod modulus</code>\nReturns <code>(self ^ exponent) % modulus</code>.\nNegate <code>Sign</code> value.\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>.\nRounds up to nearest multiple of argument.\nRounds up to nearest multiple of argument.\nRounds up to nearest multiple of argument.\nReturns the truncated principal <code>n</code>th root of <code>self</code> – See …\nReturns the truncated principal <code>n</code>th root of <code>self</code> – see …\nCreates and initializes a <code>BigInt</code>.\nCreates and initializes a <code>BigUint</code>. The input slice must …\nReturns <code>self ^ exponent</code>.\nReturns <code>self ^ exponent</code>.\nRounds down to nearest multiple of argument.\nRounds down to nearest multiple of argument.\nRounds down to nearest multiple of argument.\nSets or clears the bit in the given position, using the two…\nSets or clears the bit in the given position\nSets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.\nReturns the sign of the <code>BigInt</code> as a <code>Sign</code>.\nReturns the truncated principal square root of <code>self</code> – …\nReturns the truncated principal square root of <code>self</code> – …\nConverts the value of <code>self</code> to a <code>BigInt</code>.\nConverts the value of <code>self</code> to a <code>BigUint</code>.\nConverts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nReturns the byte representation of the <code>BigUint</code> in …\nReturns the sign and the byte representation of the <code>BigInt</code> …\nReturns the byte representation of the <code>BigUint</code> in …\nReturns the integer in the requested base in big-endian …\nReturns the integer in the requested base in big-endian …\nReturns the integer in the requested base in little-endian …\nReturns the integer in the requested base in little-endian …\nReturns the two’s-complement byte representation of the …\nReturns the two’s-complement byte representation of the …\nReturns the integer formatted as a string in the given …\nReturns the integer formatted as a string in the given …\nReturns the sign and the <code>u32</code> digits representation of the …\nReturns the <code>u32</code> digits representation of the <code>BigUint</code> …\nReturns the sign and the <code>u64</code> digits representation of the …\nReturns the <code>u64</code> digits representation of the <code>BigUint</code> …\nReturns the number of least-significant bits that are ones.\nReturns the number of least-significant bits that are zero,\nReturns the number of least-significant bits that are zero,\nReturns the additive identity element of <code>Self</code>, <code>0</code>.\nWrapper for deserializing as BigInt from bytes.\nWrapper for serializing big ints to match filecoin spec. …\nDeserializes bytes into big int.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerializes big int as bytes following Filecoin spec.\nWrapper for deserializing as BigUint from bytes.\nWrapper for serializing big ints to match filecoin spec. …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEpoch number of a chain. This acts as a proxy for time …\nDuration of each tipset epoch.\nConst used within the VM to denote an unset <code>ChainEpoch</code>\nConstant defining the QuantSpec which performs no …\nA spec for epoch quantization.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe offset from zero from which to base the modulus\nRounds <code>epoch</code> to the nearest exact multiple of the …\nThe unit of quantization\nMultihash code for Poseidon BLS replica commitments.\nMultihash code for Sha2 256 trunc254 padded used in data …\nCIDToCommitment extracts the raw commitment bytes, the …\ncid_to_data_commitment_v1 extracts the raw data commitment …\ncid_to_piece_commitment_v1 converts a CID to a comm_p – …\ncid_to_replica_commitment_v1 extracts the raw replica …\nCommitmentToCID converts a raw commitment hash to a CID by …\nDataCommitmentV1ToCID converts a raw data commitment to a …\npiece_commitment_v1_to_cid converts a comm_p to a CID – …\nReplicaCommitmentV1ToCID converts a raw data commitment to …\nResult of checking two headers for a consensus fault.\nConsensus fault types in VM.\nEpoch of the fault, which is the higher epoch of the two …\nType of fault.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAddress of the miner at fault (always an ID address).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBLS Public key length in bytes.\nBLS signature length in bytes.\nCrypto error\nProvided public key is not understood\nUnable to perform ecrecover with the given params\nSecp256k1 Public key length in bytes.\nSecp256k1 signature length in bytes.\nLength of the signature input message hash in bytes (32).\nA cryptographic signature, represented in bytes, of any …\nSignature variants for Filecoin signatures.\nFailed to produce a signature\nReturns reference to signature bytes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a BLS Signature given the raw bytes.\nCreates a SECP Signature given the raw bytes.\nReturns SignatureType for the signature.\nChecks if a signature is valid given data and address.\nReturn Address for a message given it’s signing bytes …\nReturn the public key used for signing a message given it…\nVerifies an aggregated BLS signature. Returns <code>Ok(false)</code> if …\nReturns <code>String</code> error if a bls signature is invalid.\nReturns <code>String</code> error if a secp256k1 signature is invalid.\nThe logical number of decimal places of a token unit.\nThe logical precision of a token unit.\nA quantity of native tokens. A token amount is an integer, …\nReturns the quantity of indivisible units.\nReturns the argument unchanged.\nCreates a token amount from a quantity of indivisible …\nCreates a token amount from nanoFIL.\nCreates a token amount from a quantity of whole units …\nCalls <code>U::from(self)</code>.\nA system-level assertion has failed.\nThe passed buffer is too small.\nWhen a syscall fails, it returns an <code>ErrorNumber</code> to …\nExitCode defines the exit code from the VM invocation.\nThe lowest exit code that an actor may abort with.\nThe operation is forbidden.\nA syscall parameters was invalid.\nThe requested CID shape (multihash codec, multihash …\nThe requested IPLD codec isn’t supported.\nThe actor is not in the correct state to perform the …\nThere were insufficient funds to complete the requested …\nThe specified IPLD block handle was invalid.\nThis syscall would exceed some system limit (memory, …\nA resource was not found.\nThe code indicating successful execution.\nThe actor is executing in a read-only context.\nAn internal VM assertion failed.\nThe message receiver aborted with a reserved exit code.\nThe message receiver trapped (panicked).\nThe message sender didn’t have the requisite funds.\nThe message receiver either doesn’t exist and can’t be …\nThe actor returned a block handle that doesn’t exist\nMessage execution (including subcalls) used more gas than …\nThe message sender doesn’t exist.\nThe message sender was not in a valid state to send this …\nThe IPLD block did not match the specified IPLD codec.\nThe actor failed a user-level assertion.\nThe requested operation is forbidden.\nThe method parameters are invalid.\nThe actor’s internal state is invalid.\nThe actor has insufficient funds to perform the requested …\nThe requested resource does not exist.\nThe method cannot handle a transfer of value.\nThe requested operation cannot be performed in “read-only…\nThere was a de/serialization failure within actor code.\nThe message cannot be handled (usually indicates an …\nThe actor failed with an unspecified error.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the exit code indicates success.\nReturns true if the error code is in the range of exit …\nAn event as originally emitted by the actor.\nA key value entry inside an Event.\nFlags associated with an Event entry.\nEvent with extra information stamped by the FVM. This is …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe value’s codec. Must be IPLD_RAW (0x55) for now …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nCarries the ID of the actor that emitted this event.\nGet a flags value with all bits unset.\nThe event as emitted by the actor.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nA bitmap conveying metadata or hints about this entry.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe key of this event.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe event’s value.\npolyval evaluates a polynomial given by coefficients <code>p</code> in …\nDefault Unsigned VM message type which includes all data …\nDoes some basic checks on the Message to see if the fields …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSize of a piece in bytes with padding.\nPiece information for part or a whole file.\nSize of a piece in bytes.\nContent identifier for piece.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts unpadded piece size into padded piece size.\nSize in nodes. For BLS12-381 (capacity 254 bits), must be …\nConverts padded piece size into an unpadded piece size.\nValidates piece size.\nValidates piece size.\nReturns a zero piece commitment based on the amount of …\nString of random bytes usually generated from a randomness …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResult of a state transition from a message\nIf any actor events were emitted during execution, this …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInformation needed to verify an aggregated seal proof.\nRandomness used when verifying a seal proof. This is just …\nThe maximum assignable sector number. Raising this would …\nSeal proof type which defines the version and sector size.\nProof of spacetime type, indicating version and sector …\nSeal proof type which defines the version and sector size.\nProof of update type\nInformation needed to verify a replica update\nRandomness used for Seal proofs.\nInformation needed to verify a seal proof.\nSealVerifyParams is the structure of information that must …\nSector ID which contains the sector number and the actor …\nSectorNumber is a numeric identifier for a sector. It is …\nUnit of sector quality\nSectorSize indicates one of a set of possible sizes in the …\nThe unit of spacetime committed to the network\nUnit of storage power (measured in bytes)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns registered seal proof for given sector size\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nProof size for each SealProof type\nProof size for each PoStProof type\nProduces the update RegisteredProof corresponding to the …\nProduces the windowed PoSt-specific RegisteredProof …\nThe maximum duration a sector sealed with this proof may …\nReturns the sector size of the proof type, which is …\nReturns the sector size of the proof type, which is …\nConvert the original proof type to the v1 proof added in …\nReturns the partition size, in sectors, associated with a …\nReturns the partition size, in sectors, associated with a …\nInformation submitted by a miner to provide a Window PoSt.\nProof of spacetime data stored on chain.\nRandomness type used for generating PoSt proof randomness.\nInformation about a sector necessary for PoSt verification\nInformation needed to verify a Window PoSt submitted …\nInformation needed to verify a Winning PoSt attached to a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed when sealing - needs to be mapped to PoSt registered …\nUsed to derive 32-byte prover ID\nReturns the Q.0 position estimate of the filter\nExtrapolate filter “position” delta epochs in the …\nExtrapolate the CumSumRatio given two filters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe natural log of Q.128 x.\nCreate a new filter estimate given two Q.0 format ints.\nState of all actor implementations.\nError returned when attempting to deduct funds with an …\nEmpty state tree information. This is serialized as an …\nState root information. Contains information about the …\nSpecifies the version of the state tree\nCorresponds to actors &lt; v2\nCorresponds to actors = v2\nCorresponds to actors = v3\nCorresponds to actors = v4\nCorresponds to actors &gt;= v5\nCorresponding to actors &gt;= v10\nActors tree. The structure depends on the state root …\nTokens available to the actor.\nLink to code for the actor.\nSafely deducts funds from an Actor\nThe actor’s “delegated” address, if assigned.\nDeposits funds to an Actor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInfo. The structure depends on the state root version.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructor for actor state\nConstruct a new empty actor with the specified code.\nSequence of the actor.\nLink to the state of the actor.\nState tree version\nA fixed sized struct for serializing an event <code>Entry</code> …\nSend in “read-only” mode.\nFlags passed to the send syscall.\nAn unsafe trait to mark “syscall safe” types. These …\nThe token amount type used in syscalls. It can represent …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThis module contains syscall output data carrier structs, …\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe current base-fee.\nThe Chain ID of the network.\nThe current epoch.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe network version.\nThe current time (seconds since the unix epoch).\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInvocation flags pertaining to the currently executing …\nInvocation is in “read-only” mode. Any balance …\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe caller’s actor ID.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags pertaining to the currently executing actor’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nThe gas premium being paid by the currently executing …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe method number from the message.\nThe nonce from the explicit message.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe current call’s origin actor ID.\nThe receiver’s actor ID (i.e. ourselves).\nThe intersection of a source flags value with the …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe value that was received.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSpecifies the network version\ngenesis (specs-actors v0.9.3)\nbreeze (specs-actors v0.9.7)\ntrust (specs-actors v3.0.x)\nnorwegian (specs-actors v3.1.x)\nturbo (specs-actors v4.0.x)\nHyperDrive\nChocolate v6\nOhSnap v7\nSkyr (builtin-actors v8)\nShark (builtin-actors v9)\nHygge (builtin-actors v10)\nLightning (builtin-actors v11)\nsmoke (specs-actors v0.9.8)\nThunder (builtin-actors v11)\nWatermelon (builtin-actors v12)\nDragon (builtin-actors v13)\nWaffle (builtin-actors v14)\nTBD (builtin-actors v15)\nignition (specs-actors v0.9.11)\nactors v2 (specs-actors v2.0.x)\ntape (increases max prove commit size by 10x)\nkumquat (specs-actors v2.2.0)\ncalico (specs-actors v2.3.2)\npersian (post-2.3.2 behaviour transition)\norange\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConstruct a new arbitrary network version.")