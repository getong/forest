searchState.loadedDescShard("forest_filecoin", 1, "Returns true if the exit code indicates success.\nReturns true if the error code is in the range of exit …\nYield a set of contained flags values.\nYield a set of contained named flags values.\nGive access to the limiter of the underlying call manager.\nLog a message.\nLooks up the “delegated” (f4) address of the specified …\nThe kernel’s underlying “machine”.\nThe method number from the message.\nMessage information.\nNetwork information (epoch, version, etc.).\nThe network version.\nConstruct a new <code>Kernel</code> from the given <code>CallManager</code>.\nConstruct a new arbitrary network version.\nGenerates new address using the Actor protocol.\nGenerates new address using BLS pubkey.\nGenerates a new delegated address from a namespace and a …\nGenerates new address using ID protocol.\nGenerates new address using Secp256k1 pubkey.\nComputes an address for a new actor. The returned address …\nThe nonce from the explicit message.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe current call’s origin actor ID.\nReturns the <code>Payload</code> object from the address, where the …\nReturns the raw bytes data payload of the Address\nReturns protocol for Address\nThe receiver’s actor ID (i.e. ourselves).\nGiven a message hash and its signature, recovers the …\nThe intersection of a source flags value with the …\nResolves an address of any protocol to an ID address (via …\nGet the state root.\nDeletes the executing actor from the state tree, burning …\nSends a message to another actor. The method type …\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nUpdate the state-root.\nStore an artifact. Returns error on malformed name, …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe current time (seconds since the unix epoch).\nThe CID of the tipset at the specified epoch.\nReturns encoded bytes of Address\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nUpgrades the running actor to the specified code CID.\nThe value that was received.\nVerifies a BLS aggregate signature. In the case where …\nVerifies that a signature is valid for an address and …\nDistinguished Account actor that is the destination of all …\nThe Machine is the top-level object of the FVM.\nPer-epoch machine context.\nA mapping of builtin actor CIDs to their respective types.\nNetwork-level settings. Except when testing locally, …\nEnable actor debugging.\nActor redirects for debug execution\nThe base fee that’s in effect when the Machine runs.\nReturns a reference to the machine’s blockstore.\nReturns the builtin actor index.\nAn override for builtin-actors. If specified, this should …\nSet Chain ID of the network.\nThe Chain ID of the network.\nv15 and onwards: The amount of FIL that has vested from …\nReturns the code CID for a builtin actor, given the actor…\nReturns a reference to the machine context: static …\nEnable actor debugging. This is a consensus-critical …\nEnable execution traces. <code>MachineContext::tracing</code>.\nThe current epoch\nReturns a reference to all “node” supplied APIs.\nFlushes the state-tree and returns the new root CID.\nFlushes the state-tree and returns the new root CID.\nCreate a [‘MachineContext’] for a given epoch, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the code CID for the account actor.\nReturns the code CID for the eam actor.\nReturns the code CID for the Ethereum Account actor.\nReturns the code CID for the init actor.\nReturns the code CID for the system actor.\nReturns the code CID for the system actor.\nReturns the the actor code’s “id” if it’s a …\nThe initial state root on which this block is based.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes the machine and returns the owned blockstore.\nReturns true id the passed code CID is the account actor.\nReturns true id the passed code CID is the EthAccount …\nReturns true id the passed code CID is the placeholder …\nLoad a manifest from the blockstore.\nReturns a generated ID of a machine\nThe maximum blocks size that can be created in the FVM.\nThe maximum call depth.\nMaximum size of memory of any Wasm instance, ie. each …\nMaximum size of memory used during the entire (recursive) …\nThe maximum number of elements on wasm stack DEFAULT: 64Ki …\nNetwork-level settings.\nThe network version at epoch\nCreate a new <code>DefaultMachine</code>.\nConstruct a new manifest from actor name/cid tuples.\nCreate a new network config for the given network version.\nCreates a new limiter to track the resources of a message …\nOverride actors with the specific manifest. This is …\nThe price list.\nSet actor redirects for debug execution\nSets <code>MachineContext::base_fee</code>.\nSet <code>MachineContext::circ_supply</code>.\nReturns an immutable reference to the state tree.\nReturns a mutable reference to the state tree.\nThe UNIX timestamp (in seconds) of the current tipset\nWhether or not to produce execution traces in the returned …\nLimit resources throughout the whole message execution, …\nExecution level memory tracking and adjustment.\nReturns the argument unchanged.\nGrows an instance’s memory from <code>from</code> to <code>to</code>. There’s no …\nGrows an instance’s table from <code>from</code> to <code>to</code> elements. There…\nReturns <code>true</code> if growing by <code>delta</code> bytes is allowed. …\nCalls <code>U::from(self)</code>.\nGet a snapshot of the total memory required by the …\nPush a new frame onto the call stack, and keep tallying up …\nState of all actor implementations.\nState tree implementation using hamt. This structure is …\nSpecifies the version of the state tree\nCorresponds to actors &lt; v2\nCorresponds to actors = v2\nCorresponds to actors = v3\nCorresponds to actors = v4\nCorresponds to actors &gt;= v5\nCorresponding to actors &gt;= v10\nTokens available to the actor.\nBegin a new state transaction. Transactions stack.\nLink to code for the actor.\nSafely deducts funds from an Actor\nThe actor’s “delegated” address, if assigned.\nDelete actor identified by the supplied ID.\nDeposits funds to an Actor\nEnd a transaction, reverting if requested.\nFlush state tree and return Cid root.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet actor state from an actor ID.\nReturns true if we’re inside of a transaction.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this StateTree and returns the Blockstore it owns …\nGet an ID address from any Address\nTry to mutate the actor state identified by the supplied …\nMutate and set actor state identified by the supplied ID. …\nConstructor for actor state\nConstruct a new empty actor with the specified code.\nConstructor for a hamt state tree given an IPLD store\nRegister a new address through the init actor.\nSequence of the actor.\nSet actor state with an actor ID.\nLink to the state of the actor.\nRetrieve store reference to modify db.\nRepresents an actor “abort”. Returning an <code>Abort</code> from a …\nAbort the running actor (exit, out of gas, or fatal error).\nThe syscall context. Allows syscalls to access the [<code>Kernel</code>]…\nControlFlow is a general-purpose enum for returning a …\nFail with the specified syscall error.\nThe actor explicitly aborted with the given exit code, …\nThe system failed with a fatal error indicating a bug in …\nThe helper trait used by <code>Syscall</code> to convert kernel results …\nA “linker” for exposing syscalls to wasm modules.\nRepresents a Wasm memory. All methods are inexpensive and …\nThe actor ran out of gas. This will unwind the actor call …\nReturn a value to the actor.\nA <code>Syscall</code> is a function in the form …\nCheck that the given slice, specified by an offset and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert an execution error into an “abort”. We can’t …\nJust like from_error, but escalating syscall errors as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe running actor’s [<code>Kernel</code>].\nLink this syscall with the specified linker, module name, …\nLink a syscall.\nThe running actor’s <code>Memory</code>.\nConstruct a new “memory” from the given slice.\nRead a Filecoin address from actor memory.\nRead a CID from actor memory starting at the given offset.\nReturn a slice of byte arrays into the actor’s memory.\nReturn a slice into the actor’s memory.\nReturn a mutable slice into the actor’s memory.\nWrite a CID to actor memory at the given offset.\nEmitted on each send call regardless whether we actually …\nAn “event” that happened during execution.\nExecution Trace, only for informational and debugging …\nEmitted every time an actor is successfully invoked.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSingle gas charge in the VM. Contains information about …\nSingle gas charge in the VM. Contains information about …\nSingle gas charge in the VM. Contains information about …\nData structure to encapsulate the optional duration which …\nData structure to encapsulate the optional duration which …\nA typesafe representation of gas (internally stored as …\nA typesafe representation of gas (internally stored as …\nProvides prices for operations in the VM. All costs are in …\nProvides prices for operations in the VM. All costs are in …\nApplies the specified gas charge, where quantities are …\nSafely consumes gas and returns an out of gas error if …\nGas charged for immediate computation.\nGas charged for immediate computation.\nGas charged for immediate computation.\nExecution time related to this charge, if traced and …\nExecution time related to this charge, if traced and …\nExecution time related to this charge, if traced and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGetter for gas available.\nGetter for the maximum gas usable by this message.\nGetter for gas used.\nReturns the gas required for growing memory.\nReturns the gas required for initializing memory.\nReturns the gas required for initializing tables.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGas limit and gas used are provided in protocol units …\nReturns the gas required to create a new actor in the …\nReturns the gas required to lookup an actor in the …\nReturns the gas required to update an actor in the …\nReturns the gas required for accessing the balance of an …\nReturns the gas required for adding an object to the FVM …\nReturns the gas required for committing an object to the …\nReturns the base gas required for loading an object, …\nReturns the gas required for loading an object based on …\nReturns the gas required for reading a loaded object.\nReturns the gas required for storing an object.\nReturns the gas required for storing a message of a given …\nReturns gas required for computing unsealed sector Cid.\nReturns the gas required for creating an actor. Pass <code>true</code> …\nReturns the gas required for deleting an actor.\nReturns the gas required for getting the CID of the code …\nReturns the gas required for looking up the type of a …\nReturns the gas required for looking up the CID of a …\nReturns the cost of the gas required for getting …\nReturns gas required for hashing data.\nReturns the gas required for looking up an actor’s …\nReturns the gas required for accessing the message context.\nReturns the gas required when invoking a method.\nReturns the gas required for storing the response of a …\nReturns the gas required for accessing the network context.\nReturns gas required for recovering signer pubkey from …\nReturns the gas required for resolving an actor address.\nReturns the gas required for accessing the balance of the …\nReturns the gas cost to be applied on a syscall.\nReturns the gas required for looking up a tipset CID with …\nReturns the gas required when invoking a method.\nReturns gas required for verifying consensus fault.\nReturns gas required for PoSt verification.\nReturns gas required for replica verification.\nReturns gas required for seal verification.\nReturns gas required for signature verification.\nOther gas including:\nOther gas including:\nOther gas including:\nPop a gas limit, restoring the previous one, and adding …\nPush a new gas limit.\nCalculates total gas charge (in milligas) by summing …\nCalculates total gas charge (in <code>milligas</code>) by summing …\nThis is to catch <code>#[non_exhaustive]</code> upstream errors, and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis should be the latest enumeration of all builtin actors\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis should be the latest enumeration of all builtin actors\nA list of <code>BuiltinActor</code>s to their CIDs\nThe CID that this manifest was built from\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe CID that this manifest was built from, also known as …\nBase actor send method.\nDefault Unsigned VM message type which includes all data …\nMethod number indicator for calling actor methods.\nDoes some basic checks on the Message to see if the fields …\nDoes some basic checks on the Message to see if the fields …\nTests if a message is equivalent to another replacing …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new Message to transfer an amount of FIL …\nSize of a piece in bytes with padding.\nPiece information for part or a whole file.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a shim over <code>Randomness</code> from <code>fvm_shared</code> with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nInformation about a sector necessary for PoSt verification\nProof of spacetime data stored on chain.\nProof of spacetime type, indicating version and sector …\nProof of spacetime type, indicating version and sector …\nRepresents a shim over <code>RegisteredSealProof</code> from <code>fvm_shared</code> …\nSeal proof type which defines the version and sector size.\nSeal proof type which defines the version and sector size.\nRepresents a shim over <code>SectorInfo</code> from <code>fvm_shared</code> with …\nInformation about a sector necessary for PoSt verification\n<code>SectorSize</code> indicates one of a set of possible sizes in the …\nSectorSize indicates one of a set of possible sizes in the …\nSectorSize indicates one of a set of possible sizes in the …\nUnit of storage power (measured in bytes)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns registered seal proof for given sector size\nReturns registered seal proof for given sector size\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed when sealing - needs to be mapped to PoSt registered …\nProof size for each SealProof type\nProof size for each SealProof type\nProof size for each PoStProof type\nProof size for each PoStProof type\nProduces the update RegisteredProof corresponding to the …\nProduces the update RegisteredProof corresponding to the …\nProduces the windowed PoSt-specific RegisteredProof …\nProduces the windowed PoSt-specific RegisteredProof …\nProduces the winning PoSt-specific RegisteredProof …\nThe maximum duration a sector sealed with this proof may …\nThe maximum duration a sector sealed with this proof may …\nReturns the sector size of the proof type, which is …\nReturns the sector size of the proof type, which is …\nReturns the sector size of the proof type, which is …\nReturns the sector size of the proof type, which is …\nConvert the original proof type to the v1 proof added in …\nConvert the original proof type to the v1 proof added in …\nReturns the partition size, in sectors, associated with a …\nReturns the partition size, in sectors, associated with a …\nReturns the partition size, in sectors, associated with a …\nReturns the partition size, in sectors, associated with a …\nIdentifier for Actors, includes builtin and initialized …\n<code>Newtype</code> to wrap different versions of …\nState of all actor implementations.\nState of all actor implementations.\nState of all actor implementations.\nState of all actor implementations.\nState root information. Contains information about the …\nFVM <code>StateTree</code> variant. The <code>new_from_root</code> constructor will …\nState tree implementation using hamt. This structure is …\nState tree implementation using hamt. This structure is …\nState tree implementation using hamt. This structure is …\nActors tree. The structure depends on the state root …\nTokens available to the actor.\nTokens available to the actor.\nTokens available to the actor.\nTokens available to the actor.\nBegin a new state transaction. Transactions stack.\nBegin a new state transaction. Transactions stack.\nLink to code for the actor.\nLink to code for the actor.\nLink to code for the actor.\nLink to code for the actor.\nSafely deducts funds from an Actor\nThe actor’s “delegated” address, if assigned.\nThe actor’s “delegated” address, if assigned.\nThe actor’s “delegated” address, if assigned.\nDelete actor for an address. Will resolve to ID address to …\nDelete actor identified by the supplied ID.\nDelete actor identified by the supplied ID. Returns no …\nDeposits funds to an Actor\nEnd a transaction, reverting if requested.\nEnd a transaction, reverting if requested.\nFlush state tree and return Cid root.\nFlush state tree and return Cid root.\nFlush state tree and return Cid root.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet actor state from an address. Will be resolved to ID …\nGet actor state from an actor ID.\nGet actor state from an address. Will be resolved to ID …\nGet actor state from an actor ID.\nGets actor state from implicit actor address\nGets actor state from explicit actor address\nGet required actor state from an address. Will be resolved …\nReturns true if we’re inside of a transaction.\nInfo. The structure depends on the state root version.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsumes this StateTree and returns the Blockstore it owns …\nConsumes this StateTree and returns the Blockstore it owns …\nGet an ID address from any Address\nGet an ID address from any Address\nGet an ID address from any Address\nGet an required ID address from any Address\nTry to mutate the actor state identified by the supplied …\nTry to mutate the actor state identified by the supplied …\nMutate and set actor state for an Address. Returns false …\nMutate and set actor state identified by the supplied ID. …\nMutate and set actor state identified by the supplied ID. …\nConstructor for actor state\nConstructor for a HAMT state tree given an IPLD store\nConstruct a new empty actor with the specified code.\nConstruct a new empty actor with the specified code.\nConstructor for a hamt state tree given an IPLD store\nConstructor for a hamt state tree given an IPLD store\nRegister a new address through the init actor.\nRegister a new address through the init actor.\nReturns the public key type of address(<code>BLS</code>/<code>SECP256K1</code>) of …\nSequence of the actor.\nSequence of the actor.\nSequence of the actor.\nSequence of the actor.\nSet actor state for an address. Will set state at ID …\nSet actor state with an actor ID.\nSet actor state with an actor ID.\nSet actor state with an actor ID.\nLink to the state of the actor.\nLink to the state of the actor.\nLink to the state of the actor.\nLink to the state of the actor.\nRetrieve store reference to modify db.\nRetrieve store reference to modify db.\nRetrieve store reference to modify db.\nState tree version\nState of all actor implementations.\nState tree implementation using HAMT. This structure is …\nTokens available to the actor.\nLink to code for the actor.\nSafely deducts funds from an Actor\nDeposits funds to an Actor\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet actor state from an address. Will be resolved to ID …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet an ID address from any Address\nConstructor for actor state\nConstructor for a HAMT state tree given an IPLD store\nSequence of the actor.\nLink to the state of the actor.\nRetrieve store reference to modify db.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>ActorID</code>\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecifies the network version\nSpecifies the network version\ngenesis (specs-actors v0.9.3)\nbreeze (specs-actors v0.9.7)\ntrust (specs-actors v3.0.x)\nnorwegian (specs-actor v3.1.x)\nturbo (specs-actor v4.0.x)\nHyperDrive\nChocolate v6\nOhSnap v7\nSkyr v8\nCandy v9\nsmoke (specs-actors v0.9.8)\nignition (specs-actors v0.9.11)\nactors v2 (specs-actors v2.0.x)\ntape (increases max prove commit size by 10x)\nkumquat (specs-actors v2.2.0)\ncalico (specs-actors v2.3.2)\npersian (post-2.3.2 behaviour transition)\norange\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIntermediary for retrieving state objects and updating …\nExternal format for returning market balance from state.\nState manager handles all interactions with the internal …\nMessages are transactions that produce new states. The …\nReturns a reference to the state manager’s <code>Blockstore</code>.\nThis is a cache which indexes tipsets to their calculated …\nruns the given message and returns its result without any …\nComputes message on the given Tipset state, after applying …\nReturns reference to the state manager’s <code>ChainStore</code>.\nConceptually, a <code>Tipset</code> consists of <em>blocks</em> which share an …\nBlocking version of <code>compute_tipset_state</code>\nChecks the eligibility of the miner. This is used in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets actor from given <code>Cid</code>, if it exists.\nGets actor state from implicit actor address\nGets actor state from explicit actor address\nReturns a BLS public key from provided address\nReturns raw work address of a miner given the state root.\nReturns the internal, protocol-level network name.\nReturns network version for the given epoch.\nReturns specified actor’s claimed power and total …\nReturns a message receipt from a given tipset and message …\nGets required actor from given <code>Cid</code>.\nRetrieves and generates a vector of sector info for the …\nGets the state tree\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if miner has been slashed or is considered …\nLooks up ID Address from the state at the given Tipset.\nLooks up required ID Address from the state at the given …\nRetrieves market balance in escrow and locked tables.\nRetrieves market state\nRetrieves miner faults.\nChecks power actor state for if miner meets consensus …\nRetrieves miner info.\nRetrieves miner power.\nRetrieves miner recoveries.\nReplays the given message and returns the result of …\nBlocking version of <code>replay</code>\nSimilar to <code>resolve_to_key_addr</code> in the <code>forest_vm</code> …\nCheck if tipset had executed the message, by loading the …\nReturns the pair of (parent state root, message receipt …\nValidates all tipsets at epoch <code>start..=end</code> behind the …\n<code>WaitForMessage</code> blocks until a message appears on chain. It …\nAllows for deriving the randomness from a particular …\nComputes a 256-bit digest. See …\nComputes a pseudo random 32 byte <code>Vec</code>.\nComputes a pseudo random 32 byte <code>Vec</code> from digest\nReturns the argument unchanged.\nGets 32 bytes of randomness for <code>ChainRand</code> parameterized by …\nnetwork version 13; without look-back\nnetwork version 14 onward\nGets 32 bytes of randomness for <code>ChainRand</code> parameterized by …\nnetwork version 13 onward\nCalls <code>U::from(self)</code>.\nGenesis information used when calculating circulating …\nVesting schedule info. These states are lazily filled, to …\nReturns the argument unchanged.\nReturns the argument unchanged.\ninfo about the Accounts in the genesis state\nCalculate total FIL circulating supply based on state, …\nCalculate total FIL circulating supply based on Genesis …\nCalculate total FIL circulating supply based on Genesis …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns amount locked in multisig contract\nState manager error\nOther state manager error\nError originating from state\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGenerates sector challenge indexes for use in winning PoSt …\nParsed tree of <code>fvm4::trace::ExecutionEvent</code>s\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstruct a single <code>ExecutionTrace</code>s from a linear array of …\nCommon code that’s shared across all migration code. …\nThis module contains the migration logic for the <code>NV17</code> …\nThis module contains the migration logic for the <code>NV18</code> …\nThis module contains the migration logic for the <code>NV19</code> …\nThis module contains the migration logic for the <code>NV21</code> …\nThis module contains the migration logic for the <code>NV21</code> …\nThis module contains the migration logic for the <code>NV21</code> …\nThis module contains the migration logic for the <code>NV22</code> …\nThis module contains the fix logic for the <code>NV22</code> …\nThis module contains the migration logic for the <code>NV23</code> …\nRun state migrations\nTrait that defines the interface for actor migration job.\nOutput of actor migration job.\nCache of existing CID to CID migrations for an actor.\nTrait defining the interface for actor migration verifier.\nSized wrapper of <code>PostMigrationCheck</code>.\nTrait that defines the interface for actor migration job …\nSized wrapper of <code>PostMigrator</code>.\nTrait that migrates from one data structure to another, …\nType that implements <code>TypeMigration</code> for different type …\nActor’s address\nActor’s balance\nCache of existing CID to CID migrations for this actor\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nActor’s state head CID\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSome migration jobs might need to be deferred to be …\nNew CID for the actor\nNew state head CID\nEpoch of last state transition prior to migration\nDefines migration job for a single actor migration.\nDefines migration result for a single actor migration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA migrator that does nothing but delegates the explicit …\nMigrator which preserves the head CID and provides a fixed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new migrator which preserves the head CID and …\nHandles several cases of migration:\nInserts a new migrator into the migration specification.\nInserts a new post migration check into the post migration …\nInserts a new post migrator into the post migration …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPost migration checks. This is used to verify the …\nPost migrator(s). This may include new actor creation.\nVerifies correctness of the migration specification.\nThe implementation should verify that the migration …\nType implementing the <code>ActorMigrationVerifier</code> trait.\nThis module contains the migration logic for the <code>NV17</code> …\nThis module contains the migration logic for the <code>NV17</code> …\nRun migration for <code>NV17</code>. This should be the only exported …\nThis module contains the migration logic for the <code>NV17</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRuns the migration for <code>NV17</code>. Returns the new state root.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTranslated from …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the migration logic for the <code>NV18</code> …\nRun migration for <code>NV18</code>. This should be the only exported …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates the Ethereum Account Manager actor in the state …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates the Ethereum Account actor in the state tree.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRuns the migration for <code>NV18</code>. Returns the new state root.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the migration logic for the <code>NV19</code> …\nThis module contains the migration logic for the <code>NV19</code> …\nRun migration for <code>NV19</code>. This should be the only exported …\nRuns the migration for <code>NV19</code>. Returns the new state root.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the migration logic for the <code>NV21</code> …\nRun migration for <code>NV21</code>. This should be the only exported …\nRuns the migration for <code>NV21</code>. Returns the new state root.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRun migration for <code>NV21</code> calibration network fix. This …\nRun migration for <code>NV21</code> calibration network fix. This …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRuns the light-weight patch for the <code>NV21</code> calibration …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRuns the light-weight patch for the <code>NV21</code> calibration …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the migration logic for the <code>NV22</code> …\nThis module contains the migration logic for the <code>NV22</code> …\nThis module contains the migration logic for the <code>NV22</code> …\nRun migration for <code>NV22</code>. This should be the only exported …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis method implements the migration logic as outlined in …\nRuns the migration for <code>NV22</code>. Returns the new state root.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the migration logic for the <code>NV22fix</code> …\nRun migration for <code>NV22fix</code>. This should be the only …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRuns the migration for <code>NV22</code>. Returns the new state root.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis module contains the migration logic for the <code>NV23</code> …\nThis module contains the logic for converting the mining …\nRun migration for <code>NV23</code>. This should be the only exported …\nRuns the migration for <code>NV23</code>. Returns the new state root.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrints a diff of the resolved state tree. If the actor’s …\nTries to resolve state tree actors, if all data exists in …\nResolves link to recursively resolved <code>Ipld</code> with no hash …\nResolves <code>Ipld</code> links recursively, building an <code>Ipld</code> …\nReturns a tuple of unsigned and signed messages used for …\nReturns a tuple of unsigned and signed messages used for …\nReturns a Ticket to be used for testing\nAPI tooling\nManage archives\nCreate and restore backups\nBenchmark various Forest subsystems\nUtilities for manipulating CAR files\nCommand-line options for the <code>forest-tool</code> binary\nDatabase management\nDownload parameters for generating and verifying proofs …\nNetwork utilities\nMiscellaneous, semver-exempt commands for developer use.\nManage snapshots\nState migration tools\nforest-tool sub-commands\nArchives are key-value pairs encoded as CAR files. The …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nServer returned JSON-RPC and it didn’t match our schema\nCompare two RPC providers.\nServer returned JSON-RPC and it matched our schema, but …\nA filter list that allows or rejects RPC methods based on …\nTransport or ask task management errors\nServer spoke JSON-RPC: no such method\nServer doesn’t seem to be speaking JSON-RPC\nServer spoke JSON-RPC: bad request (or other error)\nData about a failed test. Used for debugging.\nBrief description of a single method call against a single …\nAuthorize (or not) an RPC method based on its name. If the …\nCheck that an endpoint exists and that both the Lotus and …\nSee Self::basic, and note on this <code>impl</code> block.\nCreate a list of allowed and rejected RPC methods from a …\nEthereum chain ID. Default to the calibnet chain ID.\nForest result after calling the RPC method.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCheck that an endpoint exists and that Forest returns …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLotus result after calling the RPC method.\nMiner address to use for miner tests. Miner worker key …\nThe number of tipsets to use to generate test cases.\nSnapshot input paths. Supports <code>.car</code>, <code>.car.zst</code>, and …\nOptional data dump if either status was invalid.\nCheck that an endpoint exists, has the same JSON schema, …\nSee Self::validate, and note on this <code>impl</code> block.\nWorker address to use where key is applicable. Worker key …\nFilecoin network chain\nCancel test run on the first failure\nFilter which tests to run according to method name. Case …\nFilter file which tests to run according to method name. …\nForest address\nGenesis file path, only applicable for devnet\nValidate snapshot at given EPOCH, use a negative value -N …\nLotus address\nMaximum number of concurrent requests\nWhich API path to dump.\nBehavior for tests marked as <code>ignored</code>.\nSnapshot input paths. Supports <code>.car</code>, <code>.car.zst</code>, and …\nPrint block headers at 30 day interval for a snapshot file\nShow the difference between the canonical and computed …\nTrim a snapshot of the chain and write it to <code>&lt;output_path&gt;</code>\nShow basic information about an archive.\nMerge snapshot archives into a single file. The output …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerge a set of snapshots (diff snapshots or lite …\nCompute the tree of actor states for a given epoch and …\nHow many state-roots to include. Lower limit is 900 for …\nDo not include any values reachable from this epoch.\nHow many state-roots to include when computing the diff …\nLatest epoch that has to be exported for this snapshot, …\nSelected epoch to validate.\nOverwrite output file without prompting.\nOverwrite output file without prompting.\nSnapshot output filename or directory. Defaults to …\nSnapshot output filename or directory. Defaults to …\nPath to an uncompressed archive (CAR)\nSnapshot input path. Currently supports only <code>.car</code> file …\nPath to snapshot file.\nSnapshot input paths. Supports <code>.car</code>, <code>.car.zst</code>, and …\nSnapshot input paths. Supports <code>.car</code>, <code>.car.zst</code>, and …\nCreate a backup of the node. By default, only the …\nRestore a backup of the node from a file. The node must be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBackup everything from the Forest data directory. This …\nBacks up the blockstore for the specified chain. If not …\nPath to the output backup file if not using the default\nPath to the backup file\nOptional TOML file containing forest daemon configuration. …\nOptional TOML file containing forest daemon configuration. …\nForce restore even if files already exist WARNING: This …\nInclude proof parameters in the backup\nDisables backing up the key-pair\nDisables backing up the key-store\nBenchmark streaming data from a CAR archive\nExporting a <code>.forest.car.zst</code> file from HEAD\nEncoding of a <code>.forest.car.zst</code> file\nDepth-first traversal of the Filecoin graph\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHow many state-roots to include. Lower limit is 900 for …\nLatest epoch that has to be exported for this snapshot, …\nEnd zstd frames after they exceed this length\nEnd zstd frames after they exceed this length\nWhether or not we want to expect <code>libipld_core::ipld::Ipld</code> …\nSnapshot input file (<code>.car.</code>, <code>.car.zst</code>, <code>.forest.car.zst</code>)\nSnapshot input files (<code>.car.</code>, <code>.car.zst</code>, <code>.forest.car.zst</code>)\nSnapshot input files (<code>.car.</code>, <code>.car.zst</code>, <code>.forest.car.zst</code>)\nSnapshot input files (<code>.car.</code>, <code>.car.zst</code>, <code>.forest.car.zst</code>)\nSnapshot input files (<code>.car.</code>, <code>.car.zst</code>, <code>.forest.car.zst</code>)\nConcatenate two or more CAR files into a single archive\nCheck the validity of a CAR archive. For Filecoin-specific …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAt present, three properties are checked:\nCAR archive. Supported extensions: <code>.car</code>, <code>.car.zst</code>, …\nA list of CAR file paths. A CAR file can be a plain CAR, a …\nSkip verifying that blocks are hashed correctly\nSkip verifying the integrity of the on-disk index\nThe output <code>.forest.car.zst</code> file path\nDB destruction\nShow DB stats\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nOptional chain, will override the chain section of …\nOptional chain, will override the chain section of …\nOptional TOML file containing forest daemon configuration\nOptional TOML file containing forest daemon configuration\nAnswer yes to all forest-cli yes/no questions without …\nDownload all proof parameters\nOptional TOML file containing forest daemon configuration\nPrint out download location instead of downloading files\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDownload only verification keys\nSize in bytes\nConverts a human readable string to a <code>u64</code> size.\nPing a peer via its <code>multiaddress</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe number of times it should ping\nThe minimum seconds between pings\nPeer <code>multiaddress</code>\nGenerate a key-pair file from the given base64-encoded …\nDump the OpenRPC definition for the node.\nGenerate a <code>PeerId</code> from the given key-pair file.\nGenerate a base64-encoded private key from the given …\nEnumerate the tipset CIDs for a span of epochs starting at …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf omitted, defaults to the HEAD of the node.\nPath to the key-pair file.\nPath to the key-pair file.\nPath to save the key-pair file.\nWhich API path to dump.\nBase64-encoded private key.\nMake this snapshot suitable for use as a compressed …\nFilecoin keeps track of “the state of the world”, …\nFetches the most recent snapshot from a trusted, …\nValidate the snapshots individually.\nValidate the provided snapshots as a whole.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNetwork chain the snapshot will belong to\nNumber of recent epochs to scan for broken links\nNumber of recent epochs to scan for broken links\nAssert the snapshot belongs to this network. If left …\nAssert the snapshot belongs to this network. If left …\nNumber of recent epochs to scan for bad …\nNumber of recent epochs to scan for bad …\nWhich epoch to compute the state transition for\nFail at the first invalid snapshot\nOverwrite output file without prompting.\nEnd zstd frames after they exceed this length\nGenerate JSON output\nOutput file, will be in <code>.forest.car.zst</code> format.\nPath to a snapshot CAR, which may be zstd compressed\nPath to a snapshot CAR, which may be zstd compressed\nPath to a snapshot CAR, which may be zstd compressed\nInput CAR file, in <code>.car</code>, <code>.car.zst</code>, or <code>.forest.car.zst</code> …\nVendor to fetch the snapshot from\nGenerate a merged actor bundle from the hard-coded sources …\nGenerate actors metadata from required bundles list\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>&quot;hunter2:/ip4/127.0.0.1/wss&quot; -&gt; &quot;wss://:hunter2@127.0.0.1/&quot;</code>\nReturn …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n…\nWrapper that uses the <code>Range</code> HTTP header to resume get …\nKeep running the future created by <code>make_fut</code> until the …\nExtension methods for constructing <code>dag-cbor</code> Cid\nDefault CID builder for Filecoin\nExtension methods for inserting and retrieving IPLD data …\nExtension methods for <code>CborStore</code> that omits default …\nBatch put CBOR objects into block store and returns vector …\nDefault multihash code is <code>cid::multihash::Code::Blake2b256</code> …\nGet typed object from block store by <code>CID</code>. Return an error …\nGets the block from the blockstore. Return an error when …\nA wrapper of <code>CborStore::put_cbor</code> that omits code parameter …\nStream of CAR blocks. If the input data is compressed with …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStream key-value pairs from a CAR archive into a block …\nGenerates BLAKE2b hash of fixed 32 bytes size.\nThis method will attempt to de-serialize given bytes using …\n<code>serde_bytes</code> with max length check\n<code>CidVec</code> allows for efficient zero-copy de-serialization of …\n<code>FilterCids</code> traverses an <code>libipld_core::ipld::Ipld</code> tree, …\nFind and extract all the <code>Cid</code> from a <code>DAG_CBOR</code>-encoded blob …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDe-serialize a DAG-CBOR encoded CID.\nA <code>serde</code> <code>Deserialize</code>r of DAG-CBOR data.\nThis method should be called after a value has been …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nDecodes a value from CBOR data in a reader.\nConstructs a <code>Deserializer</code> which reads from a <code>Read</code>er.\nDecodes a value from CBOR data in a slice.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCheck if byte is a major type with indefinite length.\nlotus use cbor-gen for generating codec for types, it has …\nchecked if <code>output &gt; crate::utils::ByteArrayMaxLen</code>\nchecked if <code>input &gt; crate::utils::BYTE_ARRAY_MAX_LEN</code>\nIt can often take time to perform some operations in …\nConverts a TOML file represented as a string to <code>S</code>\nRestricts permissions on a file to user-only: 0600\nWrites a string to a specified file. Creates the desired …\nWrapper type of <code>memmap2::Mmap</code> that implements <code>ReadAt</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrapper <code>AsyncWriter</code> implementation that calculates the …\nTrait marking the object that is collecting a kind of a …\nA void writer that does nothing but implements <code>AsyncWrite</code>\nReturn the checksum and resets the internal hasher.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet the value of an environment variable, or a default …\nCheck if the given environment variable is set to truthy …\nReveals three trees arranged in an order that resemble the …\nReveals a beautiful Belgian waffle. A keen eye may notice …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA blocking loop that records peak resident set size …\nDownload a file via IPFS HTTP gateway in trustless mode. …\n<code>location</code> may be:\nThis module contains the logic for storing and verifying …\nThis module contains the logic for fetching the proofs …\nDefault parameters, as outlined in Lotus <code>v1.26.2</code>. …\nEnvironment variable that allows skipping checksum …\nDefault directory name for storing proofs parameters.\nEnvironment variable to set the directory where proofs …\nData structure for retrieving the proof parameter data …\nMap of parameter data, to be deserialized from the …\nEnsures the parameter file is downloaded and has the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nForest uses a set of external crates for verifying the …\nAll keys and proofs gen parameters\nDomain bound to the Cloudflare R2 bucket.\nDefault IPFS gateway to use for fetching parameters. Set …\nRunning Forest requires the download of chain’s proof …\nOnly verification parameters\nIf set to 1, enforce using the IPFS gateway for fetching …\nSector size options for fetching.\nAll keys and proofs gen parameters for a given size\nDownloads the parameter file from Cloudflare R2 to the …\nEnsures the parameter files are downloaded to cache dir\nDownloads the parameter file from Cloudflare R2 to the …\nReturns the argument unchanged.\nGet proofs parameters and all verification keys for a …\nGet proofs parameters and all verification keys for a …\nCalls <code>U::from(self)</code>.\nA <code>Client</code> to make Requests with.\nA builder to construct the properties of a Request.\nA Response to a submitted Request.\nConvert the response into a <code>Stream</code> of <code>Bytes</code> from the body.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nShortcut method to quickly make a GET request.\nConvenience method to make a <code>GET</code> request to a URL.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new <code>Client</code> using the global Forest HTTP …\nConstructs the Request and sends it the target URL, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUpdate the moments with the given value.\nDecouple stream generation and stream consumption into …\nCurrent version of the Forest repository with git hash …\nCurrent git commit hash of the Forest repository.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCommand-line options for the <code>forest-wallet</code> binary\nEncrypt local wallet\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nUse remote wallet associated with the Filecoin node. …\nGet account balance\nGet the default address of the wallet\nDeletes the wallet associated with the given address.\nExport the wallet’s keys\nCheck if the wallet has a key\nImport keys from existing wallet\nList addresses of the wallet\nCreate a new wallet\nSend funds between accounts\nSet the default wallet address\nSign a message\nValidates whether a given string can be decoded as a …\nVerify the signature of a message. Returns true if the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nPrompts for password, looping until the <code>KeyStore</code> is …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe address of the account to check\nThe address that contains the keys to export\nThe address to be used to sign the message\nThe address to be validated\nThe address used to sign the message\nThe address of the wallet to delete\noptionally specify the account to send funds from …\nIn milliGas\nThe key to check\nThe given key to set to the default address\nThe hex encoded message to sign\nThe message to verify\nOutput may be given an SI prefix like <code>atto</code> by default. Do …\nOutput may be given an SI prefix like <code>atto</code> by default. Do …\nOutput is rounded to 4 significant figures by default. Do …\nOutput is rounded to 4 significant figures by default. Do …\nThe path to the private key\nThe signature of the message to verify\nThe signature type to use. One of SECP256k1, or BLS")