searchState.loadedDescShard("forest_filecoin", 0, "Environmental variable which holds the <code>KeyStore</code> encryption …\nconstant string that is used to identify the JWT secret …\n<code>KeyStore</code> structure, this contains a set of <code>KeyInfos</code> …\nWhen importing CAR files, maintain a read-ahead buffer …\nWhen importing CAR files, chunk key-value pairs before …\nDefine type aliases for system actor <code>State</code> types before …\nThis is an empty module for documentation purposes.\n<code>TTL</code> to set for Ethereum <code>Hash</code> to <code>Cid</code> entries or <code>None</code> to …\nImplements <code>fn system_migrator</code>, requiring proper system …\nImplements <code>Verifier</code>, requiring proper <code>Manifest</code> types and …\nAnother libp2p bitswap(SPEC) implementation in Rust.\nLoad actors from the bundle file (possibly generating it …\nIn the Filecoin ecosystem, there are TWO different ways to …\nCreates a new butterfly policy with the given version. …\nCreates a new calibnet policy with the given version.\nCreates a new devnet policy with the given version. Works …\nCreates a new mainnet policy with the given version.\nMetrics bind, e.g. 127.0.0.1:6116\nRPC bind, e.g. 127.0.0.1:1234\nSkips loading import CAR file and assumes it’s already …\nVerify JWT Token and return the allowed permissions from …\nAdmin permissions\nClaim structure for JWT Tokens\nError enumeration for Authentication\nInvalid permissions to use specified method\nconstant string that is used to identify the JWT secret …\nFilecoin Method does not exist\nMissing authentication header\nReading permissions\nSigning permissions\nWriting permissions\nCreate a new JWT Token\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nVerify JWT Token and return the allowed permissions from …\nThe result from getting an entry from <code>Drand</code>. The entry …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the current round number.\nThe signature of message <code>H(prev_round.signature, round)</code> …\nTrait used as the interface to be able to retrieve bytes …\nJSON beacon entry format. This matches the <code>drand</code> round …\nContains height at which the beacon is activated, as well …\nContains the vector of <code>BeaconPoint</code>, which are mappings of …\nContains all the info about a <code>Drand</code> beacon chain. API …\n<code>Drand</code> randomness beacon that can be used to generate …\nConfiguration used when initializing a <code>Drand</code> beacon.\nType of the <code>drand</code> network. <code>mainnet</code> is chained and <code>quicknet</code> …\nEnvironmental Variable to ignore <code>Drand</code>. Lotus parallel is …\nReturns the beacon entries for a given epoch. When the …\nInfo about the beacon chain, used to verify correctness of …\nReturns a <code>BeaconEntry</code> given a round. It fetches the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInterval between beacons, in seconds.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the most recent beacon round for the given …\nGets the <code>drand</code> network\nNetwork type\nConstruct a new <code>DrandBeacon</code>.\nPublic endpoints of the <code>Drand</code> service. See …\nKeeps track of verified beacon entries.\nVerify beacon entries that are sorted by round.\nConstructs a new, empty <code>BeaconSchedule&lt;T&gt;</code> with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPorted from …\nPorted from …\nBlockchain blocks error\nInvalid signature\nError in validating arbitrary data\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLimit of BLS and SECP messages combined in a block.\nA complete Filecoin block. This contains the block header …\nTracks the Merkle roots of both SECP and BLS messages …\nReturns block header’s CID.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPersists the block in the given block store\nProofs generated by a miner which determines the reward …\nPoisson inverted <code>CDF</code> lambda is in Q.256 format\nUses <code>VRFProof</code> to compute number of wins. The algorithm is …\n<code>expneg</code> accepts x in Q.256 format and computes e^-x. It is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ncomputes lambda in Q.256\n<code>poly_val</code> evaluates a polynomial given by coefficients <code>p</code> in …\nBlock message used as serialized <code>gossipsub</code> messages for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA <code>RawBlockHeader</code> which caches calls to <code>RawBlockHeader::cid</code> …\nThe verifiable oracle randomness used to elect this block…\nAggregate signature of miner in block\nThe period in which a new block is generated. There may be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIf the block timestamp is within the allowable clock drift\nReturns <code>None</code> if the blockstore doesn’t contain the CID.\nThe CID of the root of an array of <code>MessageReceipts</code>\nThe CID of the Merkle links for <code>bls_messages</code> and …\nThe address of the miner actor that mined this block\nThe base fee of the parent block\nThe set of parents this block was based on. Typically one, …\nSerializes the header to bytes for signing purposes i.e. …\nThe CID of the parent state root after calculating parent …\nBlock creation time, in seconds since the Unix epoch\nValidates if the current header’s Beacon entries are …\nCheck to ensure block signature is valid\nThe aggregate chain weight of the parent set\nA Ticket is a marker of a tick of the blockchain’s …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTicket constructor\nA proof output by running a <code>VRF</code> on the <code>VDFResult</code> of the …\n<code>FullTipset</code> is an expanded version of a tipset that …\nAn immutable set of blocks at the same height with the …\nA set of <code>CIDs</code> forming a unique key for a Tipset. Equal …\nReturns reference to all blocks in a full tipset.\nReturns true if self wins according to the Filecoin …\nReturns an iterator of all tipsets\nReturns an iterator of all tipsets\nReturns an iterator of all tipsets, taking an owned …\nReturns a non-empty collection of <code>CIDs</code> for the current …\nReturns <code>true</code> if the tipset key contains the given CID.\nReturns epoch of the tipset.\nReturns epoch of the tipset.\nConstructs and returns a full tipset if messages from …\nReturns the first block of the tipset.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFetch the genesis block header for a given tipset.\nSorted\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns all blocks in a full tipset.\nReturns a non-empty collection of <code>CID</code>\nConverts the full tipset into a Tipset which removes the …\nCheck if <code>self</code> is the child of <code>other</code>\nReturns an iterator of <code>CID</code>s.\nReturns a key for the tipset.\nReturns a key for the tipset.\nReturns the number of blocks in the tipset.\nFetch a tipset from the blockstore. This call fails if the …\nLoad the heaviest tipset from the blockstore\nFetch a tipset from the blockstore. This calls fails if …\nTipset isn’t just plain old data - it has an invariant …\nReturns the smallest ticket of all blocks in the tipset\nReturns the block with the smallest ticket of all blocks …\nReturns the smallest timestamp of all blocks in the tipset\nBuilds a new Tipset from a collection of blocks. A valid …\nReturns the state root for the tipset parent.\nReturns the state root for the tipset parent.\nReturns the keys of the parents of the blocks in the …\nReturns a non-empty collection of <code>CID</code>\nReturns the tipset’s calculated weight\nReturns the tipset’s calculated weight.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe output from running a VRF proof.\nReturns reference to underlying proof bytes.\nCompute the <code>BLAKE2b256</code> digest of the proof.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>VRFProof</code> from a raw vector.\nLimits gas base fee change to 12.5% of the change.\nUsed in calculating the base fee change.\nGenesis base fee.\nDisambiguate the type to signify that we are expecting a …\nStores chain data such as heaviest tipset and cached …\n<code>Enum</code> for <code>pubsub</code> channel that defines message type variant …\nAdds a block header to the tipset tracker, which tracks …\nReturns a Tuple of BLS messages of type <code>UnsignedMessage</code> …\nReturns a tuple of <code>UnsignedMessage</code> and <code>SignedMessages</code> from …\nReturns key-value store instance.\nNeeded by the Ethereum mapping.\nUsed as a cache for tipset <code>lookbacks</code>.\nkey-value <code>datastore</code>.\nEthereum mappings store\nExpands tipset to tipset with all other headers in the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nAttempts to de-serialize to unsigned message or signed …\nGets look-back tipset (and state-root of that tipset) for …\nReads the <code>Cid</code> from the blockstore for <code>EthAPI</code> queries.\nReturns parent message receipt given <code>block_header</code> and …\nReads the <code>TipsetKey</code> from the blockstore for <code>EthAPI</code> queries.\nReturns the currently tracked heaviest tipset.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks metadata file if block has already been validated.\nLotus often treats an empty <code>TipsetKey</code> as shorthand for “…\nMarks block as validated in the metadata file.\nGiven a tipset this function will return all unique …\nRetrieves ordered valid messages from a <code>Tipset</code>. This will …\nReturns messages from key-value store based on a slice of …\nPersists slice of <code>serializable</code> objects to <code>blockstore</code>.\nFilter <code>SignedMessage</code>’s to keep only the most recent …\nReturns a reference to the publisher of head changes.\nPublisher for head change events\nWrites the delegated message <code>Cid</code>s to the blockstore for …\nWrites with timestamp the <code>Hash</code> to <code>Cid</code> mapping to the …\nWrites tipset block headers to data store and updates …\nWrites the <code>TipsetKey</code> to the blockstore for <code>EthAPI</code> queries.\nReturns a vector of CIDs from provided root CID\nReturns a tuple of CIDs for both unsigned and signed …\nSets heaviest tipset within <code>ChainStore</code> and store its …\nSettings store\nTracks blocks for the purpose of forming tipsets.\nDetermines if provided tipset is heavier than existing …\nvalidated blocks\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nError originating constructing blockchain structures\nError originating from Cid creation\nError originating from encoding arbitrary data\nChain error\nKey not found in database\nOther chain error\nAmt error\nKey was not found\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKeeps look-back tipsets in cache at a given interval …\nMethods for resolving fetches of null tipsets. Imagine …\nIterate from the given tipset to genesis. Missing tipsets …\n<code>Blockstore</code> pointer needed to load tipsets from cold …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFinds the latest beacon entry given a tipset up to 20 …\nLoads a tipset from memory given the tipset keys and cache.\nLoads a tipset from memory given the tipset keys and …\nFind tipset at epoch <code>to</code> in the chain of ancestors starting …\n<code>Arc</code> reference tipset cache.\nTracks blocks by their height for the purpose of forming …\nAdds a block header to the tracker.\nChecks if there are multiple blocks from the same miner at …\nExpands the given block header into the largest possible …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDeletes old entries in the <code>TipsetTracker</code> that are past the …\nThread-safe cache for tracking bad blocks. This cache is …\nReturns the argument unchanged.\nReturns <code>Some</code> with the reason if the block CID is in bad …\nCalls <code>U::from(self)</code>.\nReturns <code>Some</code> with the reason if the block CID is in bad …\nPuts a bad block <code>Cid</code> in the cache with a given reason.\nLocal head is behind the network and needs move into the …\nThe <code>ChainMuxer</code> handles events from the P2P network and …\nMessage <em>should not</em> be added to the message pool\nLocal head is the direct ancestor of the network head. The …\nLocal head is at the same height as the network head. The …\nRepresents the result of evaluating the network head …\nMessages should be added to the message pool\nRepresents whether received messages should be added to …\nIn stateless mode, forest still connects to the P2P swarm …\nStructure that defines syncing configuration options\nBad blocks cache, updates based on invalid state …\nReturns a clone of the bad blocks cache to be used outside …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenesis tipset\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage pool\nIncoming network events to be handled by synchronizer\nContext to be able to send requests to P2P network\nNumber of recent state roots to keep in the database after …\nRequest window length for tipsets during chain exchange\nState of the <code>ChainSyncer</code> <code>Future</code> implementation\nmanages retrieving and updates state objects\nWhen <code>stateless_mode</code> is true, forest connects to the P2P …\nReturns a cloned <code>Arc</code> of the sync worker state.\nTipset channel receiver\nSample size of tipsets to acquire before determining what …\nTipset channel sender\nSyncing state of chain sync workers.\nHelper function to collect errors from async validations.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTimeout milliseconds for response from an RPC request\nMaximum number of concurrent chain exchange request being …\nRace tasks to completion while limiting the number of …\nContext used in chain sync to handle network requests. …\nRequests that some content with a particular <code>Cid</code> get …\nSend a <code>chain_exchange</code> request for a single full tipset …\nSend a <code>chain_exchange</code> request for only block headers …\nSend a <code>chain_exchange</code> request for only messages (ignore …\nSend a <code>chain_exchange</code> request to the network and await …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn first finishing <code>Ok</code> future that passes validation …\nHelper function to handle the peer retrieval if no peer …\nSend a hello request to the network (does not immediately …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChannel to send network messages through P2P service\nReturns a reference to the peer manager of the network …\nManages peers to send requests to and updates request …\nValidates network tipsets that are sorted by epoch in …\n<code>ChainSync</code> completed and is following chain.\nError has occurred while syncing.\nSyncing headers from the heaviest tipset to genesis.\nIdle state.\nSyncing messages and performing state transitions.\nPersisting headers on chain from heaviest to genesis.\nCurrent state of the <code>ChainSyncer</code> using the <code>ChainExchange</code> …\nState of the node’s syncing process. This state is …\nReturn a reference to the base <code>Tipset</code>\nReturn the current <code>ChainEpoch</code>\nSets error for the sync.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the elapsed time of the current syncing process. …\nInitializes the syncing state with base and target tipsets …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSets epoch of the sync.\nSets the sync stage for the syncing state. If setting to …\nGet the current <code>SyncStage</code> of the <code>Syncer</code>\nReturns the current <code>Tipset</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>TipsetProcessor</code> receives and prioritizes a stream of …\nChecks optional values in header.\nCheck the clock drift.\nValidate messages in a full block, relative to the parent …\nConcatenate all validation error messages into one comma …\nAsk peers for the <code>Message</code>s that these <code>Tipset</code>s should …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDownload headers between the proposed head and the current …\nGoing forward along the tipsets, try to load the messages …\nSync headers backwards from the proposed head to the …\nTipsets pushed into this stream <em>must</em> be validated …\nValidate the block according to the rules specific to the …\nValidates full blocks in the tipset in parallel (since the …\nCheck if any CID in <code>tipset</code> is a known bad block. If so, …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe core primitive for saving space in this module.\nMUST NOT overlap with the above.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA space-optimised hash map of <code>Cid</code>s, matching the API for …\nA view into a single entry in a map, which may either be …\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nHides compaction from users.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nHides compaction from users.\nHow many values this map is guaranteed to hold without …\nReturns <code>true</code> if the map contains a value for the specified …\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a reference to the value corresponding to the key.\nGets a reference to the value in the entry.\nInserts a key-value pair into the map.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the map is empty.\nReturns the number of elements in the map.\nCreates an empty <code>HashMap</code>.\nRemoves a key from the map, returning the value at the key …\nReflective of reserved capacity of this map.\nA hash set implemented as a <code>HashMap</code> where the value is <code>()</code>.\nReturns <code>true</code> if the set contains a <code>Cid</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nAdds a value to the set.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the set is empty.\nReturns the number of elements.\nCreates an empty <code>HashSet</code>.\nRemoves a <code>Cid</code> from the set. Returns whether the value was …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>MaybeCompactedCid</code>, with indirection to save space on the …\nThere are typically MANY small, immutable collections of …\nReturns <code>true</code> if the slice contains an element with the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a non-empty collection of <code>CID</code>\nReturns an iterator of <code>CID</code>s.\nThis module defines a parser and pretty-printer for …\nSI prefix definitions\nTake a float from the front of <code>input</code>\nParse token amounts as floats with SI prefixed-units.\nTake an si::Prefix from the front of <code>input</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBiggest first\nBiggest first\n<code>-6</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>&quot;0.000001&quot;</code>\n<code>&quot;micro&quot;</code>\n<code>[ &quot;μ&quot;, &quot;u&quot; ]</code>\n<code>[REMOVED]</code> Attach to daemon via a JavaScript console\nManage RPC permissions\nInteract with Filecoin blockchain\nCLI structure generated when interacting with Forest binary\nManage node configuration\nPrint healthcheck info\nPrint node info\nInteract with the message pool\nManage P2P network\nSend funds between accounts\nShutdown Forest\nManage snapshots\nInteract with and query Filecoin chain state\nForest binary sub-commands available.\nInspect or interact with the chain synchronizer\nPrint an error message and exit the program with an error …\nFormat a vector to a prettified string\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrints a pretty HTTP JSON-RPC response result\nPrints a bytes HTTP JSON-RPC response result\nPrints a tipset from a HTTP JSON-RPC response result\nRequire user confirmation. Returns <code>false</code> when not …\nClient JWT token to use for JSON-RPC authentication\nGet RPC API Information\nCreate a new Authentication token with given permission\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nToken is revoked after this duration\nToken is revoked after this duration\nPermission to assign to the token, one of: read, write, …\npermission to assign the token, one of: read, write, sign, …\nRetrieves and prints out the block specified by the given …\nPrints out the genesis tipset\nPrints out the canonical head of the chain\nReads and prints out a message referenced by the specified …\nReads and prints out IPLD nodes referenced by the …\nManually set the head to the given tipset. This …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf <code>epoch_or_offset</code> is negative, get the tipset that many …\nConstruct the new head tipset from these CIDs\nUse the tipset from this epoch as the new head. Negative …\nSkip confirmation dialogue.\nDump default configuration to standard output\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDisplay ready status\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHealthcheck port\nDon’t exit until node is ready\nBase fee is the set price per unit of gas (measured in …\nepoch the node is currently at\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nChain health is the percentage denoting how close we are …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow far behind the node is with respect to syncing to head …\nStart time of the node\nGet pending messages\nPrint mempool stats\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNumber of blocks to look back for minimum <code>basefee</code>\nOnly print <code>CIDs</code> of messages in output\nReturn messages from a given address\nPrint pending messages for addresses in local wallet only\nPrint stats for addresses in local wallet only\nReturn messages to a given address\nConnects to a peer by its peer ID and multi-addresses\nDisconnects from a peer by it’s peer ID\nLists <code>libp2p</code> swarm network info\nLists <code>libp2p</code> swarm listener addresses\nLists <code>libp2p</code> swarm peers\nPrint information about reachability from the internet\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMulti-address (with <code>/p2p/</code> protocol)\nPrint agent name\nPeer ID to disconnect from\nReturns the argument unchanged.\noptionally specify the account to send funds from …\nIn milliGas\nCalls <code>U::from(self)</code>.\nAssume “yes” as answer to shutdown prompt\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nExport a snapshot of the chain to <code>&lt;output_path&gt;</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrints hex-encoded representation of SHA-256 checksum and …\nHow many state-roots to include. Lower limit is 900 for …\nDon’t write the archive.\n…\nSkip creating the checksum file.\nTipset to start the export from, default is the chain head\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhich epoch to compute the state transition for\nThe <code>.car</code> file path to save the state root\nCheck if a given block is marked bad, and for what reason\nMark a given block as bad\nCheck sync status\nDisplay continuous sync data until sync is complete\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe block CID to check\nThe block CID to mark as a bad block\nDon’t exit after node is synced\nGets car db path\nGets chain data directory\nCLI options\nCLI RPC options\nAutomatically download a chain specific snapshot to sync …\nChoose network chain to sync to\nPrint an error message and exit the program with an error …\nEnable or disable colored logging in <code>stdout</code>\nA TOML file containing relevant configurations\nDaemonize Forest process\nCheck your command-line options and configuration file if …\nEncrypt the key-store (default: true)\nExit after basic daemon initialization\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe genesis CAR file\nHalt with exit code 0 after successfully importing a …\nSets the current HEAD epoch to validate to. Useful to …\nAddress used for healthcheck server. By defaults binds on …\nValidate snapshot at given EPOCH, use a negative value -N …\nSnapshot import mode. Available modes are <code>copy</code>, <code>move</code> and …\nImport a snapshot from a local CAR file or URL\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAllow Kademlia (default: true)\nSpecify a directory into which rolling log files should be …\nSend telemetry to <code>grafana loki</code>\nEndpoint of <code>grafana loki</code>\nAllow MDNS (default: false)\nAddress used for metrics collection server. By defaults …\nDisable the automatic database garbage collection.\nDisable healthcheck endpoints\nDisable Metrics endpoint\nP2P listen addresses, e.g., …\nNumber of tipsets requested over one chain exchange …\nAllow RPC to be active or not (default: true)\nAddress used for RPC. By defaults binds on localhost on …\nIf provided, indicates the file to which to save the admin …\nSkips loading CAR file and uses header to index chain. …\nSkip loading actors from the actors bundle.\nIn stateless mode, forest connects to the P2P network but …\nAmount of Peers we want to be connected to (default is 75)\nNumber of tipsets to include in the sample that determines …\nAdmin token to interact with the node\nTurn on tokio-console support for debugging. Memory leak, …\nTrack peak physical memory usage and print on exit\nWhen importing CAR files, maintain a read-ahead buffer …\nWhen importing CAR files, chunk key-value pairs before …\n<code>TTL</code> to set for Ethereum <code>Hash</code> to <code>Cid</code> entries or <code>None</code> to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad actors from the bundle file (possibly generating it …\nMetrics bind, e.g. 127.0.0.1:6116\nRPC bind, e.g. 127.0.0.1:1234\nSkips loading import CAR file and assumes it’s already …\nStructure that defines daemon configuration when process …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns an <code>EnvFilter</code> according to the <code>RUST_LOG</code> environment …\nCalls <code>U::from(self)</code>.\nWho hosts the snapshot on the web? See <code>stable_url</code>.\nAlso defines an <code>ALL_URLS</code> constant for test purposes\nDownload the file at <code>url</code> with a private HTTP client, …\nReturns the path to the downloaded file.\nCreate a filename in the “full” format. See <code>parse</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVendors publish filenames with two formats: …\nReturns\nReturns the argument unchanged.\nCreate a parser for <code>HH_MM_SS</code> etc\nCalls <code>U::from(self)</code>.\nParse a number using its <code>FromStr</code> implementation.\nCreate a parser for <code>YYYY-MM-DD</code> etc\nRun the closure on a thread where blocking is allowed\nLoops until the user provides two matching passwords.\nDisplays the network logo/ASCII art if available.\nGenerates, prints and optionally writes to a file the …\nPrompts for password, looping until the <code>KeyStore</code> is …\nThis may:\nIncrease the file descriptor limit to a reasonable number. …\nreturns the first error with which any of the services …\nIf our current chain is below a supported height, we need …\nStarts daemon process\nTries to load the missing actor bundles to the blockstore. …\nLoads the missing actor bundle, returns the CIDs of the …\nCopies the snapshot to the database directory.\nMoves the snapshot to the database directory (or copies …\nCreates a symbolic link to the snapshot in the database …\nReturns the argument unchanged.\nThis function validates and stores the CAR binary from …\nCalls <code>U::from(self)</code>.\nFor the need for Ethereum RPC API, a new column in …\nCLI structure generated when interacting with Forest binary\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTraits for collecting DB stats\nInterface used to store and retrieve Ethereum mappings …\nA trait to facilitate mark-and-sweep garbage collection.\nExtension trait for the <code>SettingsStoreExt</code> trait. It is …\nInterface used to store and retrieve settings from the …\nExtension trait for the <code>SettingsStore</code> trait. It is …\nDeletes <code>keys</code> if keys exist in store.\nReturns <code>Ok(true)</code> if key exists in store.\nReturns <code>Ok(true)</code> if key exists in store.\nThe current implementation of the garbage collector is …\nGets all the keys currently in the database.\nReturns all message CIDs with their timestamp.\nReads binary field from the Settings store. This should be …\nReads binary field from the <code>EthMappings</code> store. This should …\nRemoves all the keys marked for deletion.\nSame as <code>SettingsStoreExt::read_obj</code>, but returns an error …\nReturns all setting keys.\nWrites binary field to the Settings store. This should be …\nWrites binary field to the <code>EthMappings</code> store. This should …\nMultiple <code>.forest.car.zst</code> archives may use the same cache, …\nThere are three different CAR formats: <code>.car</code>, <code>.car.zst</code> and …\nForest CAR format\nReturns the argument unchanged.\nReturn a clone of the value associated with <code>cid</code>. If a …\nCalls <code>U::from(self)</code>.\nThe <code>ManyCar</code> block store is the union of <code>N</code> read-only …\nMaximum size in bytes. Pages will be evicted if the total …\nVarint frames\nInsert entry into lru-cache and evict pages if <code>max_size</code> …\nReturns the argument unchanged.\nFilecoin archives are tagged with the heaviest tipset. …\nCalls <code>U::from(self)</code>.\nDiscard reader type and replace with dynamic trait object.\nOpen an archive. May be formatted as <code>.car</code>, <code>.car.zst</code> or …\nReturn the identified CAR format variant. There are three …\nSet the z-frame cache of the inner CAR reader.\nConsume stream of blocks, emit a new position of each …\n<code>compress_stream</code> with <code>DEFAULT_FOREST_CAR_FRAME_SIZE</code> as …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEmbedded index for the <code>.forest.car.zst</code> format.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAccumulator of <code>Cid</code>s and frame offsets (<code>u64</code>s) for the hash …\nThe number of bytes that will be written on a call to …\nA <code>Slot</code> as it appears on disk.\nReader for the <code>.forest.car.zst</code>’s embedded index.\nWrites the actual slot table to disk.\nNumber of hash collisions. Not currently considered by the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLook up possible frame offsets for a <code>Cid</code>. Returns <code>Ok([])</code> …\nJump to slot offset and scan downstream. All key-value …\nNumber of buckets for the sake of <code>hash::ideal_slot_ix</code> …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWorst-case distance between an entry and its bucket.\nReplace the inner reader. It MUST point to the same …\nGets a reference to the underlying reader.\nThe first field is unused, but we preserve it to not …\nNumber of preceding <code>Slot::Empty</code>s, followed by the …\nMust only return [<code>Err(_)</code>] if the underlying io fails.\nUseful for exhaustiveness checking\nDesired slot for a hash with a given table length\nSummarize a <code>Cid</code>’s internal hash as a <code>u64</code>-sized hash.\nLike <code>std::num::NonZeroU64</code>, but is never <code>u64::MAX</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA reader that keeps track of how many bytes it has read.\n<strong>Note that all operations on this store are blocking</strong>.\nIf you seek to <code>offset</code> (from the start of the file), and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPanics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTo be correct:\nPanics\nReturns (<code>Cid</code>, the <code>block data offset</code> and <code>block data length</code>)\nReads <code>body length</code>, leaving the reader at the start of a …\nReturns the path to the database directory to be used by …\nUsing the database matching the binary version. This is …\nUsing a custom database\nRepresents different modes of access to the database\nEnvironment variable used to set the development mode It …\nUsing the latest versioned database if exists\nChooses the correct database directory to use based on the …\nReturns the argument unchanged.\nReturns the latest versioned database in the chain data …\nCalls <code>U::from(self)</code>.\nLists all versioned databases in the chain data directory. …\nReturns the database mode based on the environment variable\n<code>MarkAndSweep</code> is a simple garbage collector implementation …\nReturns the argument unchanged.\nStarts the Garbage Collection loop.\nCalls <code>U::from(self)</code>.\nCreates a new mark-and-sweep garbage collector.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMigration logic from version 0.12.1 This is more of an …\nMigration logic for 0.15.2 to 0.16.0 version. We are …\nMigration logic for 0.18.0 to 0.19.0 version. For the need …\nMigration logic from any version that requires no …\nGoverns the database migration process. This is the entry …\nForest configuration used.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nVerifies if a migration is needed for the current Forest …\nPerforms a database migration if required. Note that this …\nMigration trait. It is expected that the …\nMigrations map. The key is the starting version and the …\nCreates a migration chain from <code>start</code> to <code>goal</code>. The chain is …\nSame as <code>create_migration_chain</code>, but uses any provided …\nA utility macro to make the migrations easier to declare. …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPerforms the actual migration. All the logic should be …\nPerforms post-migration checks. This is the place to check …\nPerforms pre-migration checks. This is the place to check …\nReturns the name of the temporary database that will be …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDatabase settings from Forest <code>v0.12.1</code>\nDatabase settings from Forest <code>v0.13.0</code>\nAn iterator over the variants of DbColumn\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the variants of DbColumn\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDatabase settings, Forest <code>v0.15.1</code>\nAn iterator over the variants of DbColumn\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDatabase settings from Forest <code>v0.18.0</code>\nDatabase settings from Forest <code>v0.19.0</code>\nAn iterator over the variants of DbColumn\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn iterator over the variants of DbColumn\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThis is specific to Forest’s <code>ParityDb</code> usage. It is used …\nAn iterator over the variants of DbColumn\nColumn for storing Ethereum mappings.\nColumn for storing IPLD data with <code>Blake2b256</code> hash and …\nColumn for storing other IPLD data (different codec or …\nColumn for storing Forest-specific settings.\nReturns an appropriate column variant based on the …\nRemoves a record.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTry to create Self from the raw representation\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdates/inserts a record.\n<code>ParityDb</code> configuration exposed in Forest.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKey used to store the state of the Ethereum mapping. This …\nKey used to store the heaviest tipset in the settings …\nKey used to store the memory pool configuration in the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a <code>TTL</code> collector for the Ethereum mapping.\nRemove keys whose <code>(duration - timestamp) &gt; TTL</code> from the …\nThis is a ground-up introduction to the different kinds of …\nEthereum Improvement Proposals 1559 transaction type. This …\nFrom Lotus:\nThis module contains the logic for EIP-1559 transaction …\nBuilder for <code>EthEip1559TxArgs</code>.\nError type for EthEip1559TxArgsBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>EthEip1559TxArgs</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDescription from Lotus: <code>EthLegacyEip155TxArgs</code> is a legacy …\nBuilder for <code>EthLegacyEip155TxArgs</code>.\nError type for EthLegacyEip155TxArgsBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>EthLegacyEip155TxArgs</code>.\nReturns the valid signature lengths for EIP-155 …\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuilder for <code>EthLegacyHomesteadTxArgs</code>.\nError type for EthLegacyHomesteadTxArgsBuilder\nUninitialized field\nCustom validation error\nBuilds a new <code>EthLegacyHomesteadTxArgs</code>.\nCreate an empty builder, with all fields set to <code>None</code> or …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEthereum transaction which can be of different types. The …\nValidates that the signed Filecoin message is a valid …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates an Ethereum transaction from a signed Filecoin …\nExtracts the Ethereum transaction parameters and recipient …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if a signed Filecoin message is valid for sending …\n<code>Drand</code> randomness beacon\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nFunctionality for verification of seal, winning PoSt and …\nChecks optional values in header.\nCheck the timestamp corresponds exactly to the number of …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nValidates block semantically according to …\nBlocks epoch allowed\nThe ratio of weight contributed by short-term vs long-term …\nReturns the weight of provided Tipset. This function will …\nUses an optional file path or the default genesis to parse …\nSimple error wrapper for the healthcheck server\nDefault listening port for the healthcheck server.\nState shared between the healthcheck server and the main …\nReturns the argument unchanged.\nReturns the argument unchanged.\nInitializes the healthcheck server. The server listens on …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSample message accumulator for healthcheck responses. It …\nQuery parameter for verbose responses\nChecks if the current epoch of the node is not too far …\nReturns the argument unchanged.\nThis endpoint is a combination of the <code>[livez]</code> and <code>[readyz]</code> …\nCalls <code>U::from(self)</code>.\nLiveness probes determine whether or not an application …\nReadiness probes determine whether or not a container is …\nreturns the public key type of address (<code>BLS</code>/<code>SECP256K1</code>) of …\nInterpreter error.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSignifies whether or not we have to bail due to database …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSignifies whether or not we have to bail due to database …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nContains all messages to process through the VM as well as …\nContains the error value\nComes from …\nDo not collect trace\nContains the success value\nCollect trace for the given operation\nInterpreter which handles execution of state transitioning …\nTracing a Filecoin VM has a performance penalty. This …\nApply block messages from a Tipset. Returns the receipts …\nApplies single message through VM and returns result from …\nWas <code>VM::apply_message</code> or <code>VM::apply_implicit_message</code> called?\nApplies the state transition for a single message. Returns …\nFlush stores in VM and return state root.\nRetrieves block messages to be passed through the VM and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet actor state from an address. Will be resolved to ID …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nShould tracing be collected?\nRepresents a boolean value.\nRepresents a sequence of bytes.\nRepresents a floating point value.\nRepresents an integer.\nIpld\nRepresents a map of integers.\nRepresents a list.\nRepresents a map of strings.\nRepresents the absence of a value or the value undefined.\nRepresents an UTF-8 string.\nReturns the argument unchanged.\nIndexes into an ipld list or map.\nCalls <code>U::from(self)</code>.\nReturns an iterator.\nReturns the references to other blocks.\nDestructs an ipld list or map\nCondition is expresses a predicate with a boolean result.\n<code>ExploreAll</code> is similar to a <code>*</code> – it traverses all elements …\n<code>ExploreFields</code> traverses named fields in a map (or …\n<code>ExploreIndex</code> traverses a specific index in a list, and …\n<code>ExploreRange</code> traverses a list, and for each element in the …\n<code>ExploreRecursive</code> traverses some structure recursively. To …\n<code>ExploreRecursiveEdge</code> is a special sentinel value which is …\n<code>ExploreUnion</code> allows selection to continue with two or more …\n<code>Matcher</code> marks a node to be included in the “result” …\nSelectors are expressions that identify and select a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUsed to index current\nif a node matches, we won’t match it nor explore its …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDepth-first-search iterator for <code>ipld</code> leaf nodes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nStream all blocks that are reachable before the …\nStream all blocks that are reachable before the …\nKey already exists in key store\ninfo that corresponds to key does not exist\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEncrypted <code>KeyStore</code> <code>Argon2id</code> hash key derivation …\nAn error occurred while encrypting keys\nEnvironmental variable which holds the <code>KeyStore</code> encryption …\n<code>KeyInfo</code> structure, this contains the type of key (stored …\n<code>KeyStore</code> structure, this contains a set of <code>KeyInfos</code> …\nPersistent <code>KeyStore</code> in JSON clear text in <code>KEYSTORE_LOCATION</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturn <code>KeyInfo</code> that corresponds to a given key\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn a reference to the key’s signature type\nReturn all of the keys that are stored in the <code>KeyStore</code>\nReturn a new <code>KeyInfo</code> given the key type and private key\nReturn a reference to the private key\nSave a key/<code>KeyInfo</code> pair to the <code>KeyStore</code>\nRemove the key and corresponding <code>KeyInfo</code> from the <code>KeyStore</code>\nA key, this contains a <code>KeyInfo</code>, an address, and a public …\nReturn <code>KeyInfo</code> for given address in <code>KeyStore</code>\nReturns a key corresponding to given address\nReturns the argument unchanged.\nGenerate new key of given <code>SignatureType</code>\nReturn the default address for <code>KeyStore</code>\nCalls <code>U::from(self)</code>.\nReturn vector of addresses sorted by their string …\nRemoves a key corresponding to given address\nGenerate a new private key\nReturn a new Address that is of a given <code>SignatureType</code> and …\nSign takes in <code>SignatureType</code>, private key and message. …\nReturn the public key for a given private key and …\nIdentity keypair of a node.\nContains the “port” to contact. Similar to TCP or UDP, …\nRepresentation of a Multiaddr.\nA Multihash with the same allocated size as the …\nError when parsing a <code>PeerId</code> from string or bytes.\nIdentifier of a peer of the network.\n<code>Protocol</code> describes all possible multiaddress protocols.\nTurn this <code>Protocol</code> into one that owns its data, thus being …\nDeterministically derive a new secret from this <code>Keypair</code>, …\nEd25519 keys.\nCreate a new, empty multiaddress.\nChecks whether the given <code>Multiaddr</code> is a suffix of this …\nConvert a Multiaddr to a string\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a single <code>Protocol</code> value from its byte slice …\nParses a <code>PeerId</code> from bytes.\nTries to turn a <code>Multihash</code> into a <code>PeerId</code>.\nDecode a private key from a protobuf structure and parse …\nBuilds a <code>PeerId</code> from a public key.\nParse a protocol value from the given iterator of string …\nGenerate a new ECDSA keypair.\nGenerate a new Ed25519 keypair.\nGenerate a new Secp256k1 keypair.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the length of this multiaddress is 0.\nReturns the components of this multiaddress.\nReturn a <code>KeyType</code> of the <code>Keypair</code>.\nReturn the length in bytes of this multiaddress.\nPops the last <code>Protocol</code> of this multiaddr, or <code>None</code> if the …\nReturns &amp;str identifiers for the protocol names themselves.\nGet the public key of this keypair.\nAdds an already-parsed address component to the end of …\nGenerates a random peer ID from a cryptographically secure …\nReplace a <code>Protocol</code> at some position in this <code>Multiaddr</code>.\nDecode an keypair from a DER-encoded secret key in PKCS#8 …\nDecode a keypair from a DER-encoded Secp256k1 secret key …\nSign a message using the private key of this keypair, …\nReturns a base-58 encoded string of this <code>PeerId</code>.\nReturns a raw bytes representation of this <code>PeerId</code>.\nEncode a private key as protobuf structure.\nReturn a copy of this <code>Multiaddr</code>’s byte representation.\nLike <code>Multiaddr::push</code> but consumes <code>self</code>.\nCreate a new, empty multiaddress with the given capacity.\nAppends the given <code>PeerId</code> if not yet present at the end of …\nEncode this protocol by writing its binary representation …\nLibp2p behavior for the Forest node. This handles all sub …\n<code>NetworkBehaviour::ToSwarm</code> produced by ForestBehaviour.\nBootstrap Kademlia network\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a map of peer ids and their multi-addresses\nReturns a set of peer ids\nPublish data over the gossip network.\nSubscribe to a gossip topic.\nLibp2p protocol name for <code>ChainExchange</code>.\n<code>ChainExchange</code> protocol codec to be used within the RPC …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRequest was bad.\nRequest.Start not found.\nThe payload that gets sent to another node to request for …\nThe response to a <code>ChainExchange</code> request.\nStatus codes of a <code>chain_exchange</code> response.\nContains all BLS and SECP messages and their indexes per …\nRequester is making too many requests.\n<code>ChainExchange</code> Filecoin header set bit.\nInternal error occurred.\n<code>ChainExchange</code> Filecoin messages set bit.\nOther undefined response code.\nWe could not fetch all blocks requested (but at least we …\nAll is well.\nContains the blocks and messages in a particular tipset\nThe blocks in the tipset.\nDescribes which block each message belongs to. if …\nUnsigned BLS messages.\nThe tipsets requested.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstructs a <code>FullTipset</code> from headers and compacted …\nIf a request has the HEADERS bit set and requests Filecoin …\nIf a request has the MESSAGES bit set and requests …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts <code>chain_exchange</code> response into result. Returns an …\nIf either the HEADERS bit or the MESSAGES bit is set.\nStatus message indicating failure reason.\nCompressed messages format.\n1 for Block only, 2 for Messages only, 3 for Blocks and …\nThe amount of tipsets to request.\nDescribes which block each message belongs to.\nSigned SECP messages.\nThe tipset Cid to start the request from.\nStatus code of the response.\nBuilds chain exchange response out of chain data.\nLibp2p configuration for the Forest node.\nBootstrap peer list.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nKademlia discovery enabled.\nLocal addresses. TCP and WebSocket with DNS are supported. …\nMDNS discovery enabled.\nTarget peer count.\n<code>NetworkBehaviour::ToSwarm</code> produced by …\nDiscovery event\nImplementation of <code>NetworkBehaviour</code> that discovers the …\n<code>DiscoveryBehaviour</code> configuration.\nEvent generated by the <code>DiscoveryBehaviour</code>.\nEvent that notifies that we connected to the node with the …\nEvent that notifies that we disconnected with the node …\nFor details see …\nBootstrap Kademlia network\nSeed peers\nDerived discovery discovery.\nAfter <code>next_kad_random_query</code> triggers, the next one …\nCreate a <code>DiscoveryBehaviour</code> from this configuration.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\n<code>identify::Behaviour</code> needs to be manually hooked up with …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nKademlia discovery.\nDiscovers nodes on the local network.\nNumber of nodes we’re currently connected to.\nGets the NAT status.\nCreate a default configuration with the given public key.\nStream that fires when we need to perform the next random …\nReturns a map of peer ids and their multi-addresses\nKeeps hash map of peers and their information.\nReturns reference to peer set.\nKeeps hash set of peers connected.\nOptions to configure dials to known peers.\nEvents to return in priority when polled.\nSet the number of connected peers at which we pause …\nNumber of connected peers to pause discovery on.\n<code>UPnP</code> port mapping that automatically try to map the ports …\nConfigures if Kademlia is enabled.\nConfigures if MDNS is enabled.\nSet custom nodes which never expire, e.g. bootstrap or …\nAn Ed25519 keypair.\nAn Ed25519 public key.\nAn Ed25519 secret key.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerate a new random Ed25519 keypair.\nGenerate a new Ed25519 secret key.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGet the public key of this keypair.\nGet the secret key of this keypair.\nSign a message using the private key of this keypair.\nConvert the keypair into a byte array by concatenating the …\nConvert the public key to a byte array in compressed form, …\nTry to parse a keypair from the binary format produced by …\nTry to parse a public key from a byte array containing the …\nTry to parse an Ed25519 secret key from a byte slice …\nVerify the Ed25519 signature on a message using the public …\nLibp2p Hello protocol name.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHello protocol codec to be used within the RPC service.\nHello message …\nResponse to a Hello message. This just handles latency of …\nTime of arrival to peer in UNIX nanoseconds.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTime sent from peer in UNIX nanoseconds.\nCreates and saves a new <code>ED25519</code> key-pair to the given path.\nReturns the libp2p key-pair for the node, generating a new …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGlobal duration multiplier, affects duration delta change.\nLocal duration multiplier, affects duration delta change.\nNew peer multiplier slightly less than 1 to incentivize …\nContains info about the peer’s head Tipset, as well as …\nThread safe peer manager which handles peer management for …\nPeer tracking sets, these are handled together to avoid …\nDefines max number of peers to send each chain exchange …\nAverage response time for the peer.\nAverage response time from peers.\nSet of peers to ignore for being incompatible/ failing to …\nBans a peer with an optional duration\nBans a peer with the default duration(<code>1h</code>)\nNumber of failed requests.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nMap of full peers available.\nGets the head epoch of a peer\nHead tipset key received from hello message or gossip sub …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if peer is not marked as bad or not already …\nLogs a failure for the given peer, and updates the average …\nLogs a global request success. This just updates the …\nLogs a success for the given peer, and updates the average …\nRemoves a peer from the set and returns true if the value …\nPeer ban list, key is peer id, value is expiration time\nGets peer operation receiver\nPeer operation receiver\nPeer operation sender\nFull and bad peer sets.\nRemove peer from managed set, does not mark as bad\nSort peers based on a score function with the success rate …\nNumber of successful requests.\nReturn shuffled slice of ordered peers from the peer …\nUpdates peer’s heaviest tipset. If the peer does not …\nGeneric <code>Cbor</code> <code>RequestResponse</code> type. This is just needed to …\nThe connection closed before a response was received.\nThe request could not be sent because a dialing attempt …\nAn IO failure happened on an outbound stream.\nLibp2p request response outbound error type. This …\nThe request timed out before a response was received.\nThe remote supports none of the requested protocols.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\n<code>max_bytes_allowed == 0</code> means unlimited\nMessages that come over the block topic\nThe <code>Libp2pService</code> listens to events from the libp2p swarm.\nMessages that come over the message topic\nNetwork RPC API methods used to gather data from libp2p …\nEvents emitted by this Service.\nMessages into the service to handle.\n<code>Gossipsub</code> Filecoin blocks topic identifier.\n<code>Gossipsub</code> Filecoin messages topic identifier.\nMessage types that can come over <code>GossipSub</code>\nA gossipsub topic.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns a receiver to listen to network events emitted …\nReturns a sender which allows sending messages to the …\nStarts the libp2p service networking stack. This Future …\nRequest manager implementation that is optimized for …\nRe-exports API(s) from the chosen task library\nA <code>go-bitswap</code> compatible protocol that is built on top of …\n<code>libp2p</code> swarm network behavior event of <code>bitswap</code>\nAn inbound request failed.\nAn incoming message (request or response).\nAn outbound request failed.\nA response to an inbound request has been sent.\nReturns the argument unchanged.\nGets mutable borrow of the inner …\nCalls <code>U::from(self)</code>.\nCreates a <code>BitswapBehaviour</code> instance\nGets the associated <code>BitswapRequestManager</code>\nSends a <code>BitswapRequest</code> to a peer\nSends a <code>BitswapResponse</code> to a peer\nThe error that occurred.\nThe error that occurred.\nThe incoming message.\nThe peer who sent the message.\nThe peer to whom the request was sent.\nThe peer from whom the request was received.\nThe peer to whom the response was sent.\nThe (local) ID of the failed request.\nThe ID of the failed inbound request.\nThe ID of the inbound request whose response was sent.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nJust close the outbound stream, the actual responses will …\nSending both <code>bitswap</code> requests and responses\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPrefix represents all metadata of a CID, without the …\nThe codec of <code>CID</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>multihash</code> length of <code>CID</code>.\nThe <code>multihash</code> type of <code>CID</code>.\nCreate a new prefix from encoded bytes.\nConvert the prefix to encoded bytes.\nCreate a CID out of the prefix and some data that will be …\nThe version of <code>CID</code>.\n<code>Bitswap</code> message Enum type that is either a <code>BitswapRequest</code> …\n<code>Bitswap</code> request type\n<code>Bitswap</code> response type\nType of a <code>bitswap</code> request\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRegister bitswap metrics\nRequest manager implementation that is optimized for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a block, writing it to the given block store that …\nHook the <code>bitswap</code> network event into the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA receiver channel of the outbound <code>bitswap</code> network …\nTrait implemented by a block store for reading.\nTrait implemented by a block store for reading and writing.\nThe store parameters.\nA have query needs to know if the block store contains the …\nA block query needs to retrieve the block from the store.\nA block response needs to insert the block into the store.\nWaits until <code>duration</code> has elapsed.\nSpawns a new asynchronous task, returning a <code>JoinHandle</code> for …\nRuns the provided closure on a thread where blocking is …\nA domain struct that is (de) serialized through its lotus …\nThe struct representing JSON. You should …\nUsage: <code>#[serde(with = &quot;base64_standard&quot;)]</code>\nMUST NOT be used in any <code>LotusJson</code> structs.\nReturns the argument unchanged.\nUsage: <code>#[serde(with = &quot;hexify&quot;)]</code>\nUsage: <code>#[serde(with = &quot;hexify_bytes&quot;)]</code>\nCalls <code>U::from(self)</code>.\nDifferences between serializers\nMUST NOT be used in any <code>LotusJson</code> structs\nUsage: <code>#[serde(with = &quot;stringify&quot;)]</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe epoch at which the beneficiary’s rights expire and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe total amount the current beneficiary can withdraw. …\nThe amount of quota the current beneficiary has already …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nJSON visitor for generating IPLD from JSON\nWrapper for serializing a IPLD reference to JSON.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSum of quality adjusted power for a miner’s sectors.\nSum of raw byte power for a miner’s sectors.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMessage interface to interact with Signed and unsigned …\nThis method returns the effective gas premium claimable by …\nReturns the from address of the message.\ngets gas fee cap for the message.\nReturns the gas limit for the message.\ngets gas premium for the message.\nReturns the method number to be called.\nReturns the encoded parameters for the method call.\nReturns the required funds for the message.\nReturns the message sequence or nonce.\nsets the gas fee cap.\nsets the gas limit for the message.\nsets the gas premium.\nsets a new sequence to the message.\nReturns the destination address of the message.\nSemantic validation and validates the message has enough …\nReturns the amount sent in message.\n<code>Enum</code> to encapsulate signed and unsigned messages. Useful …\nTests if a message is equivalent to another replacing …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents a wrapped message with signature bytes.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConsumes self and returns it’s unsigned message.\nChecks if the signed message is a BLS message.\nChecks if the signed message is a delegated message.\nChecks if the signed message is a SECP message.\nReturns reference to the unsigned message.\nGenerate a new signed message from fields. The signature …\nGenerate a new signed message from fields. The signature …\nReturns signature of the signed message.\nVerifies that the from address of the message generated …\nCalculate the number of winners for each block number, up …\nConfiguration available for the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLoad <code>config</code> from store, if exists. If there is no <code>config</code>, …\nReturns slice of Addresses to prioritize when selecting …\nReturns the low limit capacity of messages to allocate.\n<code>MessagePool</code> error.\nError indicating message that’s too large\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nChains is an abstraction of a list of message chain nodes. …\nRepresents a node in the <code>MsgChain</code>.\nDrops nodes which are no longer valid after the merge step\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves the <code>msg</code> chain node by the given <code>NodeKey</code>\nRetrieves the <code>msg</code> chain node at the given index. Returns …\nRetrieves the <code>msg</code> chain node by the given <code>NodeKey</code>\nRetrieves the <code>msg</code> chain node at the given index\nRetrieves the <code>msg</code> chain node by the given <code>NodeKey</code> along …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true is the chain is empty and otherwise. We check …\nRetrieves the amount of items.\nPushes a <code>msg</code> chain node into slot map and places the key …\nSorts the chains with <code>compare</code> method. If rev is true, …\nRemoves messages from the given index and resets effective …\nThis is a helper function for <code>head_change</code>. This method …\nGet the state of the <code>base_sequence</code> for a given address in …\nThis function will revert and/or apply tipsets to the …\nThis is a helper function for <code>head_change</code>. This method …\nSelect messages from the mempool to be included in the …\nContains routines for message selection APIs. Whenever a …\nThis contains all necessary information needed for the …\nSimple structure that contains a hash-map of messages …\nThis is a helper to push that will help to make sure that …\nFinish verifying signed message before adding it to the …\nFinish verifying signed message before adding it to the …\nAdd a signed message to the pool and its address.\nVerify the <code>state_sequence</code> and balance for the sender of …\nAdd a signed message to the <code>MsgSet</code>. Increase <code>next_sequence</code> …\nAdd a signed message to the <code>MsgSet</code>. Increase <code>next_sequence</code> …\nThe underlying provider\nA cache for BLS signature keyed by Cid\nChain configuration\nConfigurable parameters of the message pool\nThe current tipset (a set of blocks)\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the sequence for a given address, return Error if …\nGet the state balance for the actor that corresponds to …\nGet the state of the sequence for a given address in <code>cur_ts</code>…\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads local messages to the message pool to be applied.\nThe local address of the client\nReturn Vector of signed messages given a block header for …\nSender half to send messages to other components\nCreates a new <code>MessagePool</code> instance.\nGenerate a new <code>MsgSet</code> with an empty hash-map and setting …\nReturn a tuple that contains a vector of all signed …\nA map of pending messages where the key is the address\nReturn a Vector of signed messages for a given from …\nPush a signed message to the <code>MessagePool</code>. Additionally …\nRemove a message from pending given the from address and …\nActs as a signal to republish messages from the …\nA set of republished messages identified by their Cid\nRemoves message with the given sequence. If applied, …\nForest employs a sophisticated algorithm for selecting …\nA cache for BLS signature keyed by Cid\nVerify the message signature. first check if it has …\nThis is the default Provider implementation that will be …\nProvider Trait. This trait will be used by the message …\nComputes the base fee\nReturns the argument unchanged.\nReturn state actor for given address given the tipset that …\nGet the heaviest Tipset in the provider\nCalls <code>U::from(self)</code>.\nReturn a tipset given the tipset keys from the <code>ChainStore</code>\nReturn the signed messages for given block header\nAdd a message to the <code>MpoolProvider</code>, return either Cid or …\nUpdate <code>Mpool</code>’s <code>cur_tipset</code> whenever there is a change to …\nReturns merged and trimmed messages with the gas limit\nLike <code>head_change</code>, except it doesn’t change the state of …\nGets the gas reward for the given message.\nAttempt to get a signed message that corresponds to an …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\ntipset cache in state manager\n<code>TipsetCache</code>.\nbutterflynet\ncalibnet\nDefines all network configuration parameters.\ndevnet\nDefines the meaningful heights of the protocol.\nmainnet\nNewest network version for all networks\nForest builtin <code>filecoin</code> network chains. In general only …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns <code>NetworkChain::Calibnet</code> or <code>NetworkChain::Mainnet</code> if …\nReturns <code>NetworkChain::Calibnet</code> or <code>NetworkChain::Mainnet</code> if …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the network version at the given epoch. If the …\nAlternative URL to download the bundle from if the primary …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefault bootstrap peer ids.\nGenesis CID\nCompressed genesis file. It is compressed with zstd and …\nAlternative URL for the genesis file. This is hosted on …\nHeight epochs.\nFetches the genesis CAR from the local database or …\nDefault bootstrap peer ids.\nDefault genesis car file bytes.\nGenesis CID\nHeight epochs.\nHeight epochs. Environment variable names follow …\nDefault genesis car file bytes.\nGenesis CID\nHeight epochs.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nJSON-RPC error which can occur when a JSON-RPC call fails.\nProtocol or transport-specific error Error type.\nCustom error.\nRequest timeout read from environment variables\nEmpty batch request.\nNot implemented for HTTP clients.\nInvalid request ID.\nInvalid subscription ID.\nFailed to parse the data.\nThis is where you store persistent data, or at least …\nThe error returned when registering a method or …\nRequest timeout\nThe background task has been terminated.\nNetworking error or error on the low-level protocol layer.\nSubscription related types and traits for server …\nDesign Goals\nThe macro <code>callback</code> will be passed in each type that …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll the methods live in their own folder\nIf <code>include</code> is not <code>None</code>, only methods that are listed will …\nAll handler definitions.\nForest wishes to provide OpenRPC definitions for Filecoin …\nTypes that are shared <em>between</em> APIs.\nVerify JWT Token and return the token’s permissions.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents a subscription until it is unsubscribed.\nRepresents a single subscription that is waiting to be …\nType-alias for subscribers.\nRepresents a single subscription that hasn’t been …\nAttempt to accept the subscription and respond the …\nReturns the channel identifier\nGet the channel ID.\nChannel identifier.\nChannel identifier.\nCompletes when the subscription has been closed.\nConnection identifier.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nID of the <code>subscription call</code> (i.e. not the same as …\nSink.\nSink.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns whether the subscription is closed.\n<code>MethodCallback</code>.\n<code>MethodCallback</code>.\nGet the method name.\nSend out a response on the subscription and wait until …\nSender to answer the subscribe call.\nShared Mutex of subscriptions for this method.\nA future that fires once the unsubscribe method has been …\nWrapper over <code>tokio::sync::mpsc::Sender::closed</code>\nA JSON-RPC client that can dispatch either a …\nRepresents a single, perhaps persistent connection to a …\nSHOULD end in a slash, due to our use of <code>Url::join</code>.\nUse either the URL in the environment or a default.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAn error returned <em>by the remote server</em>, not due to e.g …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRPC call to create a new JWT Token\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>BeaconGetEntry</code> returns the beacon entry for the given …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGet tipset at epoch. Pick younger tipset if epoch points …\nReturns statistics about the graph referenced by ‘obj’.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFind the path between two tipsets, as a series of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRepresents the current version of the API.\nThe returned session UUID uniquely identifies the API node.\nInteger based value on version information. Highest order …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEthereum address size in bytes.\nEthereum Bloom filter size in bits. Bloom filter is used …\nEthereum Bloom filter size in bytes.\nKeccak-256 of the RLP of null.\nKeccak-256 of an RLP of an empty array. In Filecoin, we don…\nEthereum Virtual Machine word size in bytes.\nEthereum Bloom filter with all bits set to 1.\nThe address used in messages to actors that have since …\nDecodes the payload using the given codec.\nFormat two numbers followed by an arbitrary byte array as …\nSee …\nConvert a native message to an eth transaction.\n<code>eth_tx_from_signed_eth_message</code> does NOT populate:\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a block hash using EIP-1898 Object scheme.\nConstruct a block number using EIP-1898 Object scheme.\n<code>gas_search</code> does an exponential search to find a gas value …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRound to the next multiple of <code>EVM</code> word length.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEstimate the fee cap\nEstimate the fee cap\nEstimates the gas parameters for a given message\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets next nonce for the specified sender.\nReturn <code>Vec</code> of pending messages in <code>mpool</code>\nAdd <code>SignedMessage</code> to <code>mpool</code>, return message CID\nSign given <code>UnsignedMessage</code> and add it to <code>mpool</code>, return …\nAdd <code>SignedMessage</code> from untrusted source to <code>mpool</code>, return …\nReturn <code>Vec</code> of pending messages for inclusion in the next …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\ngets the public key address of the given ID address See …\nTraverse an IPLD directed acyclic graph and use …\nGet randomness from beacon\nGet randomness from tickets\nreturns the message receipt for the given message\nLooks back and returns all messages with a matching to or …\nretrieves the ID address of the given address See …\nlooks up the Escrow and Locked balances of the given …\nReturns a bitfield containing all sector numbers marked as …\nlooks up the miner power of the given address.\nlooks up the miner info of the given address.\nReturn all partitions in the specified deadline\nlooks up the miner power of the given address.\nChecks if a sector is allocated\nReturns the number of sectors in a miner’s sector set …\nGet read state\nSearches for a message in the chain, and returns its …\nLooks back up to limit epochs in the chain for a message, …\n<code>StateVerifiedRegistryRootKey</code> returns the address of the …\nlooks back in the chain for a message. If not found, it …\nlooks back in the chain for a message. If not found, it …\nUnit of storage power (measured in bytes)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the result of executing the indicated message, …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIgnore <code>Self::duration</code> as it is implementation-dependent\nIgnore <code>Self::total_gas</code> as it is implementation-dependent\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSee <code>ApiPaths</code>.\nWhich paths should this method be exposed on?\nExpose this method on both <code>/rpc/v0</code> and <code>/rpc/v1</code>\n<code>openrpc_types::ParamStructure</code> describes accepted param …\nType to be used by <code>RpcMethod::handle</code>.\nBecomes <code>openrpc_types::Method::description</code>.\nMethod name.\nAlias for <code>NAME</code>. Note that currently this is not reflected …\nNumber of required parameters, defaults to <code>ARITY</code>.\nReturn value of this method.\nName of each argument, MUST be unique.\nSee <code>Permission</code>\nA tuple of <code>ARITY</code> arguments.\nTypes of each argument. <code>Option</code>-al arguments MUST follow …\nThe permission required to call an RPC method.\nA definition of an RPC method handler which:\nUtility methods, defined as an extension trait to avoid …\nBecomes <code>openrpc_types::Method::summary</code>.\nOnly expose this method on <code>/rpc/v0</code>\nOnly expose this method on <code>/rpc/v1</code>\nConvert from typed handler parameters to un-typed JSON-RPC …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nLogic for this method.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA transcription of types from the <code>JSON-RPC 2.0</code> …\nGenerate a full <code>OpenRPC</code> method definition for this …\nConvert from raw request parameters, to the argument tuple …\nRegister a method with an <code>RpcModule</code>.\nRegister this method’s alias with an <code>RpcModule</code>.\nReturns <code>Err</code> if any of the parameters fail to serialize.\nCreates a request, using the alias method name if <code>use_alias</code>…\nA <code>Schema</code> and <code>Optional::optional</code> schema-nullable pair for …\nConvert from an argument tuple to un-typed JSON.\nparams MUST be an Object, with member names that match the …\nparams MUST be an Array, containing the values in the …\nIf present, parameters for the RPC call MUST be provided …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nBroken out error type for writing tests\nParser for JSON-RPC parameters. Abstracts calling …\nWhat arguments do we expect to parse?\nHow many times has the user called us so far?\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nHas any error occurred?\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHow many positional parameters are required?\nThe user promises to call <code>Parser::parse</code> <code>names.len()</code> times.\n“Introspection” by tracing a <code>Deserialize</code> to see if it…\nPanics\nAn at-rest description of a remote procedure call, created …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nMap type information about the response.\nThis wrapper is needed because of a bug in Lotus. See: …\nEpoch during which the sector proof was accepted\nIntegral of active deals over sector lifetime\nExpected one day projection of reward for sector computed …\nExpected twenty day projection of reward for sector …\nEpoch during which the sector expires\nAdditional flags, see …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nPledge collected to commit this sector\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEpoch at which this sector’s power was most recently …\nThe seal proof type implies the PoSt proofs\n<code>CommR</code>\nIntegral of active verified deals over sector lifetime\nWe have three goals for our error shims:\nLoads the allocated sector numbers\nLoads the precommit-on-chain info\nLoads sectors corresponding to the bitfield. If no …\nTerminated sectors\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\nChecks if the provided actor code CID is valid for the …\nChecks if the provided actor code CID and version are …\ndefines the encoder for <code>base32</code> encoding with the provided …\nf2: Actor protocol address, 20 byte hash of actor data.\nActor protocol addressing\nA Filecoin address is an identifier that refers to an …\nf3: BLS key address, full 48 byte public key.\nBLS key addressing\nFor user safety, Filecoin has different addresses for its …\nf4: Delegated address, a namespace with an arbitrary …\nDelegated actor protocol addressing\nAddress error\nf0: ID protocol address.\nID protocol addressing\nNetwork defines the preconfigured networks to use with …\nHash length of payload for Secp and Actor addresses.\nPayload is the data of the Address. Variants are the …\nProtocol defines the addressing protocol used to derive …\nf1: SECP256K1 key address, 20 byte hash of PublicKey.\nSECP256K1 key addressing\nA Filecoin address is an identifier that refers to an …\nZero address used to avoid allowing it to be used for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGenerates payload from raw bytes and protocol.\nParse an address belonging to this network.\nReturns encoded bytes of Address including the protocol …\nReturns encoded bytes of Address without the protocol byte.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAllowable clock drift in validations.\nThe expected number of block producers in each epoch.\nDuration of each tipset epoch.\nCodec for raw data.\nSecp256k1 signature length in bytes.\nA cryptographic signature, represented in bytes, of any …\nSignature variants for Filecoin signatures.\nLookback height for retrieving ticket randomness.\nReturns reference to signature bytes.\nExtracts the raw replica commitment from a CID assuming …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the signature is a valid <code>secp256k1</code> signature …\nCreates a BLS Signature given the raw bytes.\nCreates a SECP Signature given the raw bytes.\nChecks if a signature is valid given data and address.\nAggregates and verifies BLS signatures collectively.\nReturns <code>String</code> error if a BLS signature is invalid.\nTotal gas limit allowed per block. This is shared across …\nThe logical number of decimal places of a token unit.\nThe logical precision of a token unit.\nTotal Filecoin available to the network.\nTotal Filecoin supply.\nReturns the quantity of indivisible units.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNote the following format specifiers:\n<code>Newtype</code> wrapper for the FVM <code>ExitCode</code>.\nThe lowest exit code that an actor may abort with.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nResult of a state transition from a message\nIf any actor events were emitted during execution, this …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe <code>Kernel</code>’s <code>CallManager</code> is\nThe “default” <code>Kernel</code> implementation.\nThe “kernel” implements the FVM interface as presented …\nThe <code>Kernel</code>’s memory allocation tracker.\nTracks block data and organizes it through index handles …\nThe call manager for this call stack. If this kernel calls …\nChargeGas charges specified amount of <code>gas</code> for execution. …\nThis module contains the logic to invoke the node by …\nReturns the argument unchanged.\nReturns the remaining gas for the transaction.\nCalls <code>U::from(self)</code>.\nConsume the <code>Kernel</code> and return the underlying <code>CallManager</code> …\nGive access to the limiter of the underlying call manager.\nThe kernel’s underlying “machine”.\nConstruct a new <code>Kernel</code> from the given <code>CallManager</code>.\nConvenience macro for generating Actor Errors\nCreate a mapping from enum items to values in a way that …\nA call backtrace records the actors an error was …\nThe <code>CallManager</code> manages a single call stack.\nThe default <code>CallManager</code> implementation.\nThe returned values upon finishing a call manager.\nImplicitly invoke a constructor. We keep this separate for …\nThe result of calling actor’s entrypoint\nInvoke a method.\nThe underlying <code>Machine</code> on top of which this <code>CallManager</code> …\nBlockID representing nil parameters or return data.\nUpgrade to a new actor code CID.\nAppends an event to the event accumulator.\nBegins a new backtrace. If there is an existing backtrace, …\nReturns the blockstore.\nCalls an actor at the given address and entrypoint. The …\nThe last syscall error before the first actor in <code>frames</code> …\nCharge gas.\nClear the backtrace.\nReturns the machine context.\nCreate a new actor with the given code CID, actor ID, and …\nDeletes an actor from the state-tree, charging gas as …\nReturns a reference to the engine\nThe exit code (0 for success).\nReturns the externs.\nFinishes execution, returning the gas used, machine, and …\nThe actors through which this error was propagated from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the gas premium paid by the currently executing …\nReturns a reference to the gas tracker.\nLooks up an actor in the state-tree, charging gas as …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the total invocations done on this call stack.\nReturns true if the backtrace is completely empty.\nLimit memory usage throughout a message execution.\nReturns a reference to the machine.\nReturns a mutable reference to the machine.\nConstruct a new call manager.\nGet the actor address (f2) that will should be assigned to …\nGetter for message nonce.\nGetter for origin actor.\nReturns the current price list.\nPush a “frame” (actor exit) onto the backtrace.\nResolve an address into an actor ID, charging gas as …\nResolve an address and charge for it.\nSets an actor in the state-tree, charging gas as …\nSets the cause of a backtrace.\nTransfers tokens from one actor to another, charging gas …\nThe return value, if any.\nExecute some operation (usually a call_actor) within a …\nA call backtrace records the actors an error was …\nThe ultimate “cause” of a failed message.\nThe original cause was a fatal error.\nA “frame” in a call backtrace.\nThe original cause was a syscall error.\nThe last syscall error before the first actor in <code>frames</code> …\nThe exit code.\nThe actors through which this error was propagated from …\nReturns the argument unchanged.\nReturns the argument unchanged.\nRecords a fatal error as the cause of a backtrace.\nRecords a failing syscall as the cause of a backtrace.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe abort message.\nThe method that was invoked.\nThe actor that exited with this code.\nThe backtrace, captured if the relevant environment …\nThe exact syscall error.\nThe alternate-formatted message from the anyhow error.\nThe syscall function name.\nThe informational syscall message.\nThe syscall “module”.\nAn <code>Engine</code> represents a single, caching wasm engine. It …\nThe proper way of getting this struct is to convert from …\nEnginePool represents a limited pool of engines.\nContainer managing <code>Engine</code>s with different …\nAcquire an <code>Engine</code>. This method will block until an <code>Engine</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet an <code>EnginePool</code> for the given <code>NetworkConfig</code>, creating …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new “multi-engine” with the given concurrency …\nCreate a new <code>EnginePool</code>.\nLoads an actor’s Wasm code from the blockstore by CID, …\nInstantiates and caches the Wasm modules for the bytecodes …\nA description of some failure encountered when applying a …\nThe kind of message being applied:\nApply message return data.\nThe default <code>Executor</code>.\nAn executor executes messages on the underlying …\nThe <code>Kernel</code> on which messages will be applied. We specify a …\nThe backtrace from a message failure.\nA message describing a pre-validation failure.\nAn executor that executes messages on a separate thread …\nEvents generated while applying the message.\nExecution trace information, for debugging.\nThis is the entrypoint to execute a message.\nThis is the entrypoint to execute a message.\nThis is the entrypoint to execute a message.\nAdditional failure information for debugging, if any.\nFlushes the state-tree, returning the new root CID.\nFlush the state-tree to the underlying blockstore.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume consumes the executor and returns the Machine. If …\nTip given to miner from message.\nMessage receipt for the transaction. This data is stored …\nCreate a new <code>DefaultExecutor</code> for executing messages on the …\nGas penalty from transaction, if any.\nChain information provider.\nConsensus related methods.\nRandomness provider trait\nGets 32 bytes of randomness for ChainRand paramaterized by …\nGets 32 bytes of randomness for ChainRand paramaterized by …\nGets the CID for a given tipset.\nVerify a consensus fault.\nA typesafe representation of gas (internally stored as …\nSingle gas charge in the VM. Contains information about …\nData structure to encapsulate the optional duration which …\nType alias so that we can disable this with a compiler …\nA handle returned by <code>charge_gas</code> which must be used to mark …\nProvides prices for operations in the VM. All costs are in …\nApplies the specified gas charge, where quantities are …\nReturns the gas value as milligas, without loss of …\nSafely consumes gas and returns an out of gas error if …\nGas charged for immediate computation.\nExecution time related to this charge, if traced and …\nCreate a timer that doesn’t measure anything.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a <code>Gas</code> from milligas.\nGetter for gas available.\nGetter for the maximum gas usable by this message.\nGetter for gas used.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGas limit and gas used are provided in protocol units …\nCreate a new timer that will update the elapsed time of a …\nConstruct a <code>Gas</code> from gas, scaling up. If this exceeds the …\nReturns the gas required to create a new actor in the …\nReturns the gas required to lookup an actor in the …\nReturns the gas required to update an actor in the …\nReturns the gas required for accessing the balance of an …\nReturns the gas required for adding an object to the FVM …\nReturns the gas required for committing an object to the …\nReturns the gas required for loading an object based on …\nReturns the base gas required for loading an object, …\nReturns the gas required for reading a loaded object.\nReturns the gas required for storing an object.\nReturns the gas required for storing a message of a given …\nReturns gas required for computing unsealed sector Cid.\nReturns the gas required for creating an actor. Pass <code>true</code> …\nReturns the gas required for deleting an actor.\nReturns the gas required for getting the CID of the code …\nReturns the gas required for looking up the type of a …\nReturns the gas required for looking up the CID of a …\nReturns the cost of the gas required for getting …\nReturns gas required for hashing data.\nReturns the gas required for installing an actor.\nReturns the gas required for looking up an actor’s …\nReturns the gas required for accessing the message context.\nReturns the gas required when invoking a method.\nReturns the gas required for returning a value from a …\nReturns the gas required for accessing the network context.\nReturns gas required for recovering signer pubkey from …\nReturns the gas required for resolving an actor address.\nReturns the gas required for accessing the balance of the …\nReturns the gas required for looking up a tipset CID with …\nReturns the gas required when invoking a method.\nReturns gas required for BLS aggregate signature …\nReturns gas required for verifying consensus fault.\nReturns gas required for PoSt verification.\nReturns gas required for replica verification.\nReturns gas required for seal verification.\nReturns gas required for signature verification.\nOther gas including:\nPop a gas limit, restoring the previous one, and adding …\nReturns gas price list by NetworkVersion for gas …\nPush a new gas limit.\nConvenience method to record the elapsed time only if some …\nReturns the gas value as an integer, truncating the …\nReturns the gas value as an integer, rounding the …\nConvenience method to start measuring time before the …\nRecord the elapsed time since the charge was made.\nRecord the elapsed time based on an instant taken before …\nCalculates total gas charge (in milligas) by summing …\nActors operations whose scope of action is actors other …\nBlocks in the block registry are addressed by an ordinal, …\nA registry of open blocks (per-kernel). Think “file …\nThe <code>Kernel</code>’s <code>CallManager</code> is\nThe FVM’s equivalent of <code>anyhow::Context</code>. This is …\nCryptographic primitives provided by the kernel.\nDebugging APIs.\nContains the error value\nEventing APIs.\nThe IPLD subset of the kernel.\nThe “kernel” implements the FVM interface as presented …\nThe <code>Kernel</code>’s memory allocation tracker.\nAccessors to query attributes of the incoming message.\nNetwork-related operations.\nContains the success value\nRandomness queries.\nExecution result.\nActor state access and manipulation. Depends on BlockOps …\nThe actor calling operations.\nCodes and hashers supported by FVM. You <em>can</em> use this hash …\nRepresents an error from a syscall. It can optionally …\nThe actor upgrade operations.\nReturns the balance associated with an actor id\nCreate a new block.\nComputes a CID for a block.\nOpen a block.\nRead data from a block.\nReturns the blocks codec &amp; size.\nChargeGas charges specified amount of <code>gas</code> for execution. …\nCreates an actor with given <code>code_cid</code>, <code>actor_id</code>, …\nThe balance of the receiver.\nReturns whether debug mode is enabled.\nRecords an event emitted throughout execution.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the remaining gas for the transaction.\nGets the block associated with a block handle.\nLook up the code CID of an actor.\nReturns the actor’s “type” (if builitin) or 0 (if …\nReturns the CodeCID for the supplied built-in actor type.\nRandomness returns a (pseudo)random byte array drawing …\nRandomness returns a (pseudo)random byte array drawing …\nHashes input <code>data_in</code> using with the specified hash …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the <code>Kernel</code> and return the underlying <code>CallManager</code> …\nReturns true if the error is fatal. A fatal error means …\nCheck if a block is reachable. Call this before attempting …\nGive access to the limiter of the underlying call manager.\nLog a message.\nLooks up the “delegated” (f4) address of the specified …\nThe kernel’s underlying “machine”.\nMark a cid as reachable. Call this when a new block is …\nMessage information.\nNetwork information (epoch, version, etc.).\nConstruct a new <code>Kernel</code> from the given <code>CallManager</code>.\nComputes an address for a new actor. The returned address …\nImport this module (with a glob) if you’re implementing …\nAdds a new block to the registry, checking that all …\nAdds a new block to the registry, marking all children as …\nGiven a message hash and its signature, recovers the …\nResolves an address of any protocol to an ID address (via …\nGet the state root.\nDeletes the executing actor from the state tree, burning …\nSends a message to another actor. The method type …\nUpdate the state-root.\nReturns the size &amp; codec of the specified block.\nStore an artifact. Returns error on malformed name, …\nThe CID of the tipset at the specified epoch.\nUpgrades the running actor to the specified code CID.\nVerifies a BLS aggregate signature. In the case where …\nVerifies that a signature is valid for an address and …\nThe “default” <code>Kernel</code> implementation.\nTracks block data and organizes it through index handles …\nThe call manager for this call stack. If this kernel calls …\nVerifies a batch of seals. This is a privledged syscall, …\nComputes an unsealed sector CID (CommD) from its …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the total token supply in circulation at the …\nVerify aggregate seals verifies an aggregated batch of …\nVerifies that two block headers provide proof of a …\nVerifies a window proof of spacetime.\nVerifies a window proof of spacetime.\nVerify replica update verifies a snap deal: an upgrade …\nIdentifier for Actors, includes builtin and initialized …\nActors operations whose scope of action is actors other …\nAddress is the struct that defines the protocol and data …\nBlocks in the block registry are addressed by an ordinal, …\nA registry of open blocks (per-kernel). Think “file …\nThe <code>Kernel</code>’s <code>CallManager</code> is\nEpoch number of a chain. This acts as a proxy for time …\nA Cid that contains a multihash with an allocated size of …\nCryptographic primitives provided by the kernel.\nThe logical number of decimal places of a token unit.\nDebugging APIs.\nDelegate the implementation of a trait to a struct …\nEventing APIs.\nExitCode defines the exit code from the VM invocation.\nThe lowest exit code that an actor may abort with.\nA typesafe representation of gas (internally stored as …\nA handle returned by <code>charge_gas</code> which must be used to mark …\nThe IPLD subset of the kernel.\nThe “kernel” implements the FVM interface as presented …\nThe <code>Kernel</code>’s memory allocation tracker.\nAccessors to query attributes of the incoming message.\nMethod number indicator for calling actor methods.\nA Multihash with the same allocated size as the …\nNetwork-related operations.\nSpecifies the network version\nThe code indicating successful execution.\nThe logical precision of a token unit.\nProvides prices for operations in the VM. All costs are in …\nSend in “read-only” mode.\nRandomness queries.\nSecp256k1 Public key length in bytes.\nSecp256k1 signature length in bytes.\nLength of the signature input message hash in bytes (32).\nAn internal VM assertion failed.\nThe message receiver aborted with a reserved exit code.\nThe message receiver trapped (panicked).\nThe message sender didn’t have the requisite funds.\nThe message receiver either doesn’t exist and can’t be …\nThe actor returned a block handle that doesn’t exist\nMessage execution (including subcalls) used more gas than …\nThe message sender doesn’t exist.\nThe message sender was not in a valid state to send this …\nActor state access and manipulation. Depends on BlockOps …\nFlags passed to the send syscall.\nThe actor calling operations.\nSignature variants for Filecoin signatures.\nA quantity of native tokens. A token amount is an integer, …\nThe actor failed a user-level assertion.\nThe requested operation is forbidden.\nThe method parameters are invalid.\nThe actor’s internal state is invalid.\nThe actor has insufficient funds to perform the requested …\nThe requested resource does not exist.\nThe method cannot handle a transfer of value.\nThe requested operation cannot be performed in “read-only…\nThere was a de/serialization failure within actor code.\nThe message cannot be handled (usually indicates an …\nThe actor failed with an unspecified error.\nThe actor upgrade operations.\ngenesis (specs-actors v0.9.3)\nbreeze (specs-actors v0.9.7)\ntrust (specs-actors v3.0.x)\nnorwegian (specs-actors v3.1.x)\nturbo (specs-actors v4.0.x)\nHyperDrive\nChocolate v6\nOhSnap v7\nSkyr (builtin-actors v8)\nShark (builtin-actors v9)\nHygge (builtin-actors v10)\nLightning (builtin-actors v11)\nsmoke (specs-actors v0.9.8)\nThunder (builtin-actors v11)\nWatermelon (builtin-actors v12)\nDragon (builtin-actors v13)\nWaffle (builtin-actors v14)\nignition (specs-actors v0.9.11)\nactors v2 (specs-actors v2.0.x)\ntape (increases max prove commit size by 10x)\nkumquat (specs-actors v2.2.0)\ncalico (specs-actors v2.3.2)\npersian (post-2.3.2 behaviour transition)\norange\nGet a flags value with all known bits set.\nReturns the quantity of indivisible units.\nReturns the balance associated with an actor id\nThe current base-fee.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nCreate a new block.\nComputes a CID for a block.\nOpen a block.\nRead data from a block.\nReturns the blocks codec &amp; size.\nThe caller’s actor ID.\nThe Chain ID of the network.\nChargeGas charges specified amount of <code>gas</code> for execution. …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nCreates an actor with given <code>code_cid</code>, <code>actor_id</code>, …\nThe balance of the receiver.\nReturns whether debug mode is enabled.\nThe intersection of a source flags value with the …\nRecords an event emitted throughout execution.\nGet a flags value with all bits unset.\nThe current epoch.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nFlags pertaining to the currently executing actor’s …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a token amount from a quantity of indivisible …\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nCreates address from encoded bytes.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nCreates a token amount from nanoFIL.\nCreates a token amount from a quantity of whole units …\nReturns the remaining gas for the transaction.\nThe gas premium being paid by the currently executing …\nLook up the code CID of an actor.\nReturns the actor’s “type” (if builitin) or 0 (if …\nReturns the CodeCID for the supplied built-in actor type.\nRandomness returns a (pseudo)random byte array drawing …\nRandomness returns a (pseudo)random byte array drawing …\nHashes input <code>data_in</code> using with the specified hash …\nGet ID of the address. ID protocol only.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConsume the <code>Kernel</code> and return the underlying <code>CallManager</code> …\nConverts Address into <code>Payload</code> object, where the respective …\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.")